#!/usr/bin/expect

source  ../kernel_config.exp
source  config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

set TITLE [title "$argv0"]

step "Start building QT..."

set case_num 0

#remove previous qt resource and generate a new one
cd $qt_dir
exec rm -fr $qt_name
exec tar xvfj $qt_tarball

#set environment parametre and patch qt resource
spawn /bin/bash
send "export QTDIR=$QT_PATH\r"
send "echo \$QTDIR\r"
send "cd \$QTDIR\r"
expect "$qt_ver>"

incr case_num
set timeout 60
send "patch -p1 < $uclinux_path/$qt_patch\r"
while 1 {
    expect {
        -re "$qt_ver>" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 600
send "./configure\r"
while 1 {
    expect {
        -re "Do you accept the terms of the license?" {
            send "yes\r"
        }
        -re "Your choices \\\(default 8,16,32\\\):" {
            send "\r"
        }
        -re "$qt_ver>" {
            send_user "Configure success\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Configure timeout\n"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 2500
set bfin_make_status failure
send "make\r"
while 1 {
    expect {
        "Leaving directory" { set bfin_make_status success }
        "Error" {set bfin_make_status failure }
        "$qt_ver>" { break }
    }
}
if { $bfin_make_status == "failure" } {
    puts "ERROR: Error somewhere during make"
    exit
} else {
    send_user "Build qt finish\n"
    case_pass $case_num
}

incr case_num
set timeout 600
send "make clean\r"
while 1 {
    expect {
        -re "$qt_ver>" {
            send_user "make clean success\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "make clean timeout\n"
            case_fail $case_num
        }
    }
}

#build FLAT static library
incr case_num
set timeout 2
send "cp mkspecs/qws/linux-bfin-g++/qmake.static.conf mkspecs/qws/linux-bfin-g++/qmake.conf\r"
while 1 {
    expect {
        -re "cp:.*>" {
            send_user "copy qmake.static.conf fail\n"
            case_fail $case_num
        }
        -re "$qt_ver>" {
            send_user "copy qmake.static.conf pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "copy qmake.static.conf timeout\n"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 600
send "./configure -static -depths 4,16,24,32 -no-cups -no-ipv6 -embedded bfin -little-endian -thread\r"
while 1 {
    expect {
        -re "Do you accept the terms of the license?" {
            send "yes\r"
        }
        -re "$qt_ver>" {
            send_user "Configure for FLAT static success\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Configure for FLAT static timeout\n"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 2500
set bfin_make_status failure
send "make\r"
while 1 {
    expect {
        "Leaving directory" { set bfin_make_status success }
        "Error" {set bfin_make_status failure }
        "$qt_ver>" { break }
    }
}
if { $bfin_make_status == "failure" } {
    puts "ERROR: Error somewhere during make"
    exit
} else {
    send_user "Build qt FLAT static finish\n"
    case_pass $case_num
}

incr case_num
set timeout 2000
send "rm -fr \$QTDIR.FLAT\r"
while 1 {
    expect {
        -re "$qt_ver>" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 2000
send "cp -fr \$QTDIR \$QTDIR.FLAT\r"
while 1 {
    expect {
        -re "$qt_ver>" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

#build FDPIC dynamic loadable shared library
incr case_num
set timeout 600
send "make clean\r"
while 1 {
    expect {
        -re "$qt_ver>" {
            send_user "make clean success\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "make clean timeout\n"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 2
send "cp mkspecs/qws/linux-bfin-g++/qmake.shared.conf mkspecs/qws/linux-bfin-g++/qmake.conf\r"
while 1 {
    expect {
        -re "cp:.*>" {
            send_user "copy qmake.shared.conf fail\n"
            case_fail $case_num
        }
        -re "$qt_ver>" {
            send_user "copy qmake.shared.conf pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "copy qmake.shared.conf timeout\n"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 600
send "./configure -shared -depths 4,16,24,32 -no-cups -no-ipv6 -embedded bfin -little-endian -thread\r"
while 1 {
    expect {
        -re "Do you accept the terms of the license?" {
            send "yes\r"
        }
        -re "$qt_ver>" {
            send_user "Configure for FDPIC success\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Configure for FDPIC timeout\n"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 2500
set bfin_make_status failure
send "make\r"
while 1 {
    expect {
        "Leaving directory" { set bfin_make_status success }
        "Error" {set bfin_make_status failure }
        "$qt_ver>" { break }
    }
}
if { $bfin_make_status == "failure" } {
    puts "ERROR: Error somewhere during make"
    exit
} else {
    send_user "Build qt FLAT static finish\n"
    case_pass $case_num
}

incr case_num
set timeout 2000
send "rm -fr \$QTDIR.FDPIC\r"
while 1 {
    expect {
        -re "$qt_ver>" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 2000
send "cp -fr \$QTDIR \$QTDIR.FDPIC\r"
while 1 {
    expect {
        -re "$qt_ver>" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

send_log "\n"
send_log "\n$TITLE ............\[PASS\]\n" 

send_user "Ending $argv0\n"

log_file
