http://trolltech.com/developer/task-tracker/index_html?id=239094&method=entry

--- a/src/corelib/io/qprocess_unix.cpp
+++ b/src/corelib/io/qprocess_unix.cpp
@@ -564,7 +564,7 @@ static char **_q_dupEnvironment(const QStringList &environment, int *envc)
 // under QNX RTOS we have to use vfork() when multithreading
 inline pid_t qt_fork()
 {
-#if defined(Q_OS_QNX)
+#if defined(Q_OS_QNX) || defined(QT_LINUX_NOMMU)
     return vfork();
 #else
     return fork();
--- a/src/gui/painting/qpdf.cpp
+++ b/src/gui/painting/qpdf.cpp
@@ -1443,6 +1443,16 @@ static void closeAllOpenFds()
 }
 #endif
 
+// under QNX RTOS we have to use vfork() when multithreading
+inline pid_t qt_fork()
+{
+#if defined(Q_OS_QNX) || defined(QT_LINUX_NOMMU)
+    return vfork();
+#else
+    return fork();
+#endif
+}
+
 bool QPdfBaseEnginePrivate::openPrintDevice()
 {
     if(outDevice)
@@ -1476,12 +1486,12 @@ bool QPdfBaseEnginePrivate::openPrintDevice()
             return false;
         }
 
-        pid_t pid = fork();
+        pid_t pid = qt_fork();
         if (pid == 0) {       // child process
             // if possible, exit quickly, so the actual lp/lpr
             // becomes a child of init, and ::waitpid() is
             // guaranteed not to wait.
-            if (fork() > 0) {
+            if (qt_fork() > 0) {
                 closeAllOpenFds();
 
                 // try to replace this process with "true" - this prevents
