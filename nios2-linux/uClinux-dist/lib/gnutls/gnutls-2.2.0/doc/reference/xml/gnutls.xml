<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="gnutls-gnutls">
<refmeta>
<refentrytitle role="top_of_page">gnutls</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNUTLS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gnutls</refname>
<refpurpose></refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



#define             <link linkend="LIBGNUTLS-VERSION:CAPS">LIBGNUTLS_VERSION</link>
#define             <link linkend="LIBGNUTLS-VERSION-MAJOR:CAPS">LIBGNUTLS_VERSION_MAJOR</link>
#define             <link linkend="LIBGNUTLS-VERSION-MINOR:CAPS">LIBGNUTLS_VERSION_MINOR</link>
#define             <link linkend="LIBGNUTLS-VERSION-PATCH:CAPS">LIBGNUTLS_VERSION_PATCH</link>
#define             <link linkend="LIBGNUTLS-VERSION-NUMBER:CAPS">LIBGNUTLS_VERSION_NUMBER</link>
#define             <link linkend="HAVE-SSIZE-T:CAPS">HAVE_SSIZE_T</link>
#define             <link linkend="GNUTLS-CIPHER-RIJNDAEL-128-CBC:CAPS">GNUTLS_CIPHER_RIJNDAEL_128_CBC</link>
#define             <link linkend="GNUTLS-CIPHER-RIJNDAEL-256-CBC:CAPS">GNUTLS_CIPHER_RIJNDAEL_256_CBC</link>
#define             <link linkend="GNUTLS-CIPHER-RIJNDAEL-CBC:CAPS">GNUTLS_CIPHER_RIJNDAEL_CBC</link>
#define             <link linkend="GNUTLS-CIPHER-ARCFOUR:CAPS">GNUTLS_CIPHER_ARCFOUR</link>
enum                <link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link>;
enum                <link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link>;
enum                <link linkend="gnutls-params-type-t">gnutls_params_type_t</link>;
enum                <link linkend="gnutls-credentials-type-t">gnutls_credentials_type_t</link>;
#define             <link linkend="GNUTLS-MAC-SHA:CAPS">GNUTLS_MAC_SHA</link>
#define             <link linkend="GNUTLS-DIG-SHA:CAPS">GNUTLS_DIG_SHA</link>
enum                <link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link>;
enum                <link linkend="gnutls-digest-algorithm-t">gnutls_digest_algorithm_t</link>;
#define             <link linkend="GNUTLS-MAX-ALGORITHM-NUM:CAPS">GNUTLS_MAX_ALGORITHM_NUM</link>
#define             <link linkend="GNUTLS-COMP-ZLIB:CAPS">GNUTLS_COMP_ZLIB</link>
enum                <link linkend="gnutls-compression-method-t">gnutls_compression_method_t</link>;
enum                <link linkend="gnutls-connection-end-t">gnutls_connection_end_t</link>;
enum                <link linkend="gnutls-alert-level-t">gnutls_alert_level_t</link>;
enum                <link linkend="gnutls-alert-description-t">gnutls_alert_description_t</link>;
enum                <link linkend="gnutls-handshake-description-t">gnutls_handshake_description_t</link>;
enum                <link linkend="gnutls-certificate-status-t">gnutls_certificate_status_t</link>;
enum                <link linkend="gnutls-certificate-request-t">gnutls_certificate_request_t</link>;
enum                <link linkend="gnutls-openpgp-crt-status-t">gnutls_openpgp_crt_status_t</link>;
enum                <link linkend="gnutls-close-request-t">gnutls_close_request_t</link>;
#define             <link linkend="GNUTLS-TLS1:CAPS">GNUTLS_TLS1</link>
enum                <link linkend="gnutls-protocol-t">gnutls_protocol_t</link>;
enum                <link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link>;
enum                <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link>;
enum                <link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link>;
const <link linkend="char">char</link>*         <link linkend="gnutls-pk-algorithm-get-name">gnutls_pk_algorithm_get_name</link>        (<link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link> algorithm);
#define             <link linkend="GNUTLS-SIGN-RSA-SHA:CAPS">GNUTLS_SIGN_RSA_SHA</link>
#define             <link linkend="GNUTLS-SIGN-DSA-SHA:CAPS">GNUTLS_SIGN_DSA_SHA</link>
enum                <link linkend="gnutls-sign-algorithm-t">gnutls_sign_algorithm_t</link>;
const <link linkend="char">char</link>*         <link linkend="gnutls-sign-algorithm-get-name">gnutls_sign_algorithm_get_name</link>      (<link linkend="gnutls-sign-algorithm-talgorithm">gnutls_sign_algorithm_talgorithm</link> );
typedef             <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link>;
struct              <link linkend="gnutls-session-int">gnutls_session_int</link>;
typedef             <link linkend="gnutls-session-t">gnutls_session_t</link>;
struct              <link linkend="gnutls-dh-params-int">gnutls_dh_params_int</link>;
typedef             <link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link>;
struct              <link linkend="gnutls-x509-privkey-int">gnutls_x509_privkey_int</link>;
typedef             <link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link>;
struct              <link linkend="gnutls-priority-st">gnutls_priority_st</link>;
typedef             <link linkend="gnutls-priority-t">gnutls_priority_t</link>;
<link linkend="int">int</link>                 <link linkend="gnutls-init">gnutls_init</link>                         (<link linkend="gnutls-session-t">gnutls_session_t</link> *session,
                                                         <link linkend="gnutls-connection-end-t">gnutls_connection_end_t</link> con_end);
<link linkend="void">void</link>                <link linkend="gnutls-deinit">gnutls_deinit</link>                       (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-bye">gnutls_bye</link>                          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-close-request-t">gnutls_close_request_t</link> how);
<link linkend="int">int</link>                 <link linkend="gnutls-handshake">gnutls_handshake</link>                    (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-rehandshake">gnutls_rehandshake</link>                  (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="gnutls-alert-description-t">gnutls_alert_description_t</link> <link linkend="gnutls-alert-get">gnutls_alert_get</link>             (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-alert-send">gnutls_alert_send</link>                   (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-alert-level-t">gnutls_alert_level_t</link> level,
                                                         <link linkend="gnutls-alert-description-t">gnutls_alert_description_t</link> desc);
<link linkend="int">int</link>                 <link linkend="gnutls-alert-send-appropriate">gnutls_alert_send_appropriate</link>       (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> err);
const <link linkend="char">char</link>*         <link linkend="gnutls-alert-get-name">gnutls_alert_get_name</link>               (<link linkend="gnutls-alert-description-t">gnutls_alert_description_t</link> alert);
<link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link> <link linkend="gnutls-cipher-get">gnutls_cipher_get</link>             (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link> <link linkend="gnutls-kx-get">gnutls_kx_get</link>                     (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link> <link linkend="gnutls-mac-get">gnutls_mac_get</link>                   (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="gnutls-compression-method-t">gnutls_compression_method_t</link> <link linkend="gnutls-compression-get">gnutls_compression_get</link>      (<link linkend="gnutls-session-tsession">gnutls_session_tsession</link> );
<link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link> <link linkend="gnutls-certificate-type-get">gnutls_certificate_type_get</link>   (<link linkend="gnutls-session-tsession">gnutls_session_tsession</link> );
<link linkend="size-t">size_t</link>              <link linkend="gnutls-cipher-get-key-size">gnutls_cipher_get_key_size</link>          (<link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link> algorithm);
<link linkend="size-t">size_t</link>              <link linkend="gnutls-mac-get-key-size">gnutls_mac_get_key_size</link>             (<link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link> algorithm);
const <link linkend="char">char</link>*         <link linkend="gnutls-cipher-get-name">gnutls_cipher_get_name</link>              (<link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link> algorithm);
const <link linkend="char">char</link>*         <link linkend="gnutls-mac-get-name">gnutls_mac_get_name</link>                 (<link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link> algorithm);
const <link linkend="char">char</link>*         <link linkend="gnutls-compression-get-name">gnutls_compression_get_name</link>         (<link linkend="gnutls-compression-method-talgorithm">gnutls_compression_method_talgorithm</link> );
const <link linkend="char">char</link>*         <link linkend="gnutls-kx-get-name">gnutls_kx_get_name</link>                  (<link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link> algorithm);
const <link linkend="char">char</link>*         <link linkend="gnutls-certificate-type-get-name">gnutls_certificate_type_get_name</link>    (<link linkend="gnutls-certificate-type-ttype">gnutls_certificate_type_ttype</link> );
<link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link> <link linkend="gnutls-mac-get-id">gnutls_mac_get_id</link>                (const <link linkend="char">char</link> *name);
<link linkend="gnutls-compression-method-t">gnutls_compression_method_t</link> <link linkend="gnutls-compression-get-id">gnutls_compression_get_id</link>   (const <link linkend="char">char</link> *name);
<link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link> <link linkend="gnutls-cipher-get-id">gnutls_cipher_get_id</link>          (const <link linkend="char">char</link> *name);
<link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link> <link linkend="gnutls-kx-get-id">gnutls_kx_get_id</link>                  (const <link linkend="char">char</link> *name);
<link linkend="gnutls-protocol-t">gnutls_protocol_t</link>   <link linkend="gnutls-protocol-get-id">gnutls_protocol_get_id</link>              (const <link linkend="char">char</link> *name);
<link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link> <link linkend="gnutls-certificate-type-get-id">gnutls_certificate_type_get_id</link>
                                                        (const <link linkend="char">char</link> *name);
const <link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link>* <link linkend="gnutls-cipher-list">gnutls_cipher_list</link>     (void);
const <link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link>* <link linkend="gnutls-mac-list">gnutls_mac_list</link>           (void);
const <link linkend="gnutls-compression-method-t">gnutls_compression_method_t</link>* <link linkend="gnutls-compression-list">gnutls_compression_list</link>
                                                        (void);
const <link linkend="gnutls-protocol-t">gnutls_protocol_t</link>* <link linkend="gnutls-protocol-list">gnutls_protocol_list</link>           (void);
const <link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link>* <link linkend="gnutls-certificate-type-list">gnutls_certificate_type_list</link>
                                                        (void);
const <link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link>* <link linkend="gnutls-kx-list">gnutls_kx_list</link>             (void);
const <link linkend="char">char</link>*         <link linkend="gnutls-cipher-suite-info">gnutls_cipher_suite_info</link>            (<link linkend="size-t">size_t</link> i,
                                                         <link linkend="char">char</link> *id,
                                                         <link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link> *kx,
                                                         <link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link> *cipher,
                                                         <link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link> *mac,
                                                         <link linkend="gnutls-protocol-t">gnutls_protocol_t</link> *version);
<link linkend="int">int</link>                 <link linkend="gnutls-error-is-fatal">gnutls_error_is_fatal</link>               (<link linkend="int">int</link> error);
<link linkend="int">int</link>                 <link linkend="gnutls-error-to-alert">gnutls_error_to_alert</link>               (<link linkend="int">int</link> err,
                                                         <link linkend="int">int</link> *level);
<link linkend="void">void</link>                <link linkend="gnutls-perror">gnutls_perror</link>                       (<link linkend="int">int</link> error);
const <link linkend="char">char</link>*         <link linkend="gnutls-strerror">gnutls_strerror</link>                     (<link linkend="int">int</link> error);
<link linkend="void">void</link>                <link linkend="gnutls-handshake-set-private-extensions">gnutls_handshake_set_private_extensions</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> allow);
<link linkend="gnutls-handshake-description-t">gnutls_handshake_description_t</link> <link linkend="gnutls-handshake-get-last-out">gnutls_handshake_get_last_out</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="gnutls-handshake-description-t">gnutls_handshake_description_t</link> <link linkend="gnutls-handshake-get-last-in">gnutls_handshake_get_last_in</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="ssize-t">ssize_t</link>             <link linkend="gnutls-record-send">gnutls_record_send</link>                  (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> sizeofdata);
<link linkend="ssize-t">ssize_t</link>             <link linkend="gnutls-record-recv">gnutls_record_recv</link>                  (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> sizeofdata);
#define             <link linkend="gnutls-read">gnutls_read</link>
#define             <link linkend="gnutls-write">gnutls_write</link>
<link linkend="void">void</link>                <link linkend="gnutls-session-enable-compatibility-mode">gnutls_session_enable_compatibility_mode</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="void">void</link>                <link linkend="gnutls-record-disable-padding">gnutls_record_disable_padding</link>       (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-record-get-direction">gnutls_record_get_direction</link>         (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="size-t">size_t</link>              <link linkend="gnutls-record-get-max-size">gnutls_record_get_max_size</link>          (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="ssize-t">ssize_t</link>             <link linkend="gnutls-record-set-max-size">gnutls_record_set_max_size</link>          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="size-t">size_t</link> size);
<link linkend="size-t">size_t</link>              <link linkend="gnutls-record-check-pending">gnutls_record_check_pending</link>         (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-prf">gnutls_prf</link>                          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="size-t">size_t</link> label_size,
                                                         const <link linkend="char">char</link> *label,
                                                         <link linkend="int">int</link> server_random_first,
                                                         <link linkend="size-t">size_t</link> extra_size,
                                                         const <link linkend="char">char</link> *extra,
                                                         <link linkend="size-t">size_t</link> outsize,
                                                         <link linkend="char">char</link> *out);
<link linkend="int">int</link>                 <link linkend="gnutls-prf-raw">gnutls_prf_raw</link>                      (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="size-t">size_t</link> label_size,
                                                         const <link linkend="char">char</link> *label,
                                                         <link linkend="size-t">size_t</link> seed_size,
                                                         const <link linkend="char">char</link> *seed,
                                                         <link linkend="size-t">size_t</link> outsize,
                                                         <link linkend="char">char</link> *out);
enum                <link linkend="gnutls-server-name-type-t">gnutls_server_name_type_t</link>;
<link linkend="int">int</link>                 <link linkend="gnutls-server-name-set">gnutls_server_name_set</link>              (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-server-name-type-t">gnutls_server_name_type_t</link> type,
                                                         const <link linkend="void">void</link> *name,
                                                         <link linkend="size-t">size_t</link> name_length);
<link linkend="int">int</link>                 <link linkend="gnutls-server-name-get">gnutls_server_name_get</link>              (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> *data_length,
                                                         unsigned <link linkend="int">int</link> *type,
                                                         unsigned <link linkend="int">int</link> indx);
<link linkend="void">void</link>                <link linkend="gnutls-oprfi-enable-client">gnutls_oprfi_enable_client</link>          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="size-t">size_t</link> len,
                                                         unsigned <link linkend="char">char</link> *data);
<link linkend="int">int</link>                 (<link linkend="gnutls-oprfi-callback-func">*gnutls_oprfi_callback_func</link>)       (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *userdata,
                                                         <link linkend="size-t">size_t</link> oprfi_len,
                                                         unsigned <link linkend="char">char</link> *in_oprfi,
                                                         unsigned <link linkend="char">char</link> *out_oprfi);
<link linkend="void">void</link>                <link linkend="gnutls-oprfi-enable-server">gnutls_oprfi_enable_server</link>          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-oprfi-callback-func">gnutls_oprfi_callback_func</link> cb,
                                                         <link linkend="void">void</link> *userdata);
enum                <link linkend="gnutls-supplemental-data-format-type-t">gnutls_supplemental_data_format_type_t</link>;
const <link linkend="char">char</link>*         <link linkend="gnutls-supplemental-get-name">gnutls_supplemental_get_name</link>        (<link linkend="gnutls-supplemental-data-format-type-t">gnutls_supplemental_data_format_type_t</link> type);
<link linkend="int">int</link>                 <link linkend="gnutls-cipher-set-priority">gnutls_cipher_set_priority</link>          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);
<link linkend="int">int</link>                 <link linkend="gnutls-mac-set-priority">gnutls_mac_set_priority</link>             (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);
<link linkend="int">int</link>                 <link linkend="gnutls-compression-set-priority">gnutls_compression_set_priority</link>     (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);
<link linkend="int">int</link>                 <link linkend="gnutls-kx-set-priority">gnutls_kx_set_priority</link>              (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);
<link linkend="int">int</link>                 <link linkend="gnutls-protocol-set-priority">gnutls_protocol_set_priority</link>        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-type-set-priority">gnutls_certificate_type_set_priority</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);
<link linkend="int">int</link>                 <link linkend="gnutls-priority-init">gnutls_priority_init</link>                (<link linkend="gnutls-priority-t">gnutls_priority_t</link> *,
                                                         const <link linkend="char">char</link> *priority,
                                                         const <link linkend="char">char</link> **err_pos);
<link linkend="void">void</link>                <link linkend="gnutls-priority-deinit">gnutls_priority_deinit</link>              (<link linkend="gnutls-priority-t">gnutls_priority_t</link> );
<link linkend="int">int</link>                 <link linkend="gnutls-priority-set">gnutls_priority_set</link>                 (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-priority-t">gnutls_priority_t</link> );
<link linkend="int">int</link>                 <link linkend="gnutls-priority-set-direct">gnutls_priority_set_direct</link>          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="char">char</link> *priority,
                                                         const <link linkend="char">char</link> **err_pos);
<link linkend="int">int</link>                 <link linkend="gnutls-set-default-priority">gnutls_set_default_priority</link>         (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-set-default-export-priority">gnutls_set_default_export_priority</link>  (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
const <link linkend="char">char</link>*         <link linkend="gnutls-cipher-suite-get-name">gnutls_cipher_suite_get_name</link>        (<link linkend="gnutls-kx-algorithm-tkx-algorithm">gnutls_kx_algorithm_tkx_algorithm</link> ,
                                                         <link linkend="gnutls-cipher-algorithm-tcipher-algorithm">gnutls_cipher_algorithm_tcipher_algorithm</link> ,
                                                         <link linkend="gnutls-mac-algorithm-tmac-algorithm">gnutls_mac_algorithm_tmac_algorithm</link> );
<link linkend="gnutls-protocol-t">gnutls_protocol_t</link>   <link linkend="gnutls-protocol-get-version">gnutls_protocol_get_version</link>         (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
const <link linkend="char">char</link>*         <link linkend="gnutls-protocol-get-name">gnutls_protocol_get_name</link>            (<link linkend="gnutls-protocol-t">gnutls_protocol_t</link> version);
<link linkend="int">int</link>                 <link linkend="gnutls-session-set-data">gnutls_session_set_data</link>             (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="void">void</link> *session_data,
                                                         <link linkend="size-t">size_t</link> session_data_size);
<link linkend="int">int</link>                 <link linkend="gnutls-session-get-data">gnutls_session_get_data</link>             (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *session_data,
                                                         <link linkend="size-t">size_t</link> *session_data_size);
<link linkend="int">int</link>                 <link linkend="gnutls-session-get-data2">gnutls_session_get_data2</link>            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data);
#define             <link linkend="GNUTLS-MAX-SESSION-ID:CAPS">GNUTLS_MAX_SESSION_ID</link>
<link linkend="int">int</link>                 <link linkend="gnutls-session-get-id">gnutls_session_get_id</link>               (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *session_id,
                                                         <link linkend="size-t">size_t</link> *session_id_size);
#define             <link linkend="TLS-MASTER-SIZE:CAPS">TLS_MASTER_SIZE</link>
#define             <link linkend="TLS-RANDOM-SIZE:CAPS">TLS_RANDOM_SIZE</link>
const <link linkend="void">void</link>*         <link linkend="gnutls-session-get-server-random">gnutls_session_get_server_random</link>    (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
const <link linkend="void">void</link>*         <link linkend="gnutls-session-get-client-random">gnutls_session_get_client_random</link>    (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
const <link linkend="void">void</link>*         <link linkend="gnutls-session-get-master-secret">gnutls_session_get_master_secret</link>    (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-session-is-resumed">gnutls_session_is_resumed</link>           (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 (<link linkend="gnutls-db-store-func">*gnutls_db_store_func</link>)             (<link linkend="void">void</link> *,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> key,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> data);
<link linkend="int">int</link>                 (<link linkend="gnutls-db-remove-func">*gnutls_db_remove_func</link>)            (<link linkend="void">void</link> *,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> key);
<link linkend="gnutls-datum-t">gnutls_datum_t</link>      (<link linkend="gnutls-db-retr-func">*gnutls_db_retr_func</link>)              (<link linkend="void">void</link> *,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> key);
<link linkend="void">void</link>                <link linkend="gnutls-db-set-cache-expiration">gnutls_db_set_cache_expiration</link>      (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> seconds);
<link linkend="void">void</link>                <link linkend="gnutls-db-remove-session">gnutls_db_remove_session</link>            (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="void">void</link>                <link linkend="gnutls-db-set-retrieve-function">gnutls_db_set_retrieve_function</link>     (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-db-retr-func">gnutls_db_retr_func</link> retr_func);
<link linkend="void">void</link>                <link linkend="gnutls-db-set-remove-function">gnutls_db_set_remove_function</link>       (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-db-remove-func">gnutls_db_remove_func</link> rem_func);
<link linkend="void">void</link>                <link linkend="gnutls-db-set-store-function">gnutls_db_set_store_function</link>        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-db-store-func">gnutls_db_store_func</link> store_func);
<link linkend="void">void</link>                <link linkend="gnutls-db-set-ptr">gnutls_db_set_ptr</link>                   (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *ptr);
<link linkend="void">void</link>*               <link linkend="gnutls-db-get-ptr">gnutls_db_get_ptr</link>                   (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-db-check-entry">gnutls_db_check_entry</link>               (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> session_entry);
<link linkend="int">int</link>                 (<link linkend="gnutls-handshake-post-client-hello-func">*gnutls_handshake_post_client_hello_func</link>)
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> );
<link linkend="void">void</link>                <link linkend="gnutls-handshake-set-post-client-hello-function">gnutls_handshake_set_post_client_hello_function</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> ,
                                                         <link linkend="gnutls-handshake-post-client-hello-func">gnutls_handshake_post_client_hello_func</link> );
<link linkend="void">void</link>                <link linkend="gnutls-handshake-set-max-packet-length">gnutls_handshake_set_max_packet_length</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="size-t">size_t</link> max);
const <link linkend="char">char</link>*         <link linkend="gnutls-check-version">gnutls_check_version</link>                (const <link linkend="char">char</link> *req_version);
<link linkend="void">void</link>                <link linkend="gnutls-credentials-clear">gnutls_credentials_clear</link>            (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-credentials-set">gnutls_credentials_set</link>              (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-credentials-type-t">gnutls_credentials_type_t</link> type,
                                                         <link linkend="void">void</link> *cred);
#define             <link linkend="gnutls-cred-set">gnutls_cred_set</link>
struct              <link linkend="gnutls-certificate-credentials-st">gnutls_certificate_credentials_st</link>;
<link linkend="void">void</link>                <link linkend="gnutls-anon-free-server-credentials">gnutls_anon_free_server_credentials</link> (<link linkend="gnutls-anon-server-credentials-t">gnutls_anon_server_credentials_t</link> sc);
<link linkend="int">int</link>                 <link linkend="gnutls-anon-allocate-server-credentials">gnutls_anon_allocate_server_credentials</link>
                                                        (<link linkend="gnutls-anon-server-credentials-t">gnutls_anon_server_credentials_t</link> *sc);
<link linkend="void">void</link>                <link linkend="gnutls-anon-set-server-dh-params">gnutls_anon_set_server_dh_params</link>    (<link linkend="gnutls-anon-server-credentials-t">gnutls_anon_server_credentials_t</link> res,
                                                         <link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dh_params);
<link linkend="void">void</link>                <link linkend="gnutls-anon-set-server-params-function">gnutls_anon_set_server_params_function</link>
                                                        (<link linkend="gnutls-anon-server-credentials-tres">gnutls_anon_server_credentials_tres</link> ,
                                                         <link linkend="gnutls-params-function">gnutls_params_function</link> *func);
<link linkend="void">void</link>                <link linkend="gnutls-anon-free-client-credentials">gnutls_anon_free_client_credentials</link> (<link linkend="gnutls-anon-client-credentials-tsc">gnutls_anon_client_credentials_tsc</link> );
<link linkend="int">int</link>                 <link linkend="gnutls-anon-allocate-client-credentials">gnutls_anon_allocate_client_credentials</link>
                                                        (<link linkend="gnutls-anon-client-credentials-t">gnutls_anon_client_credentials_t</link> *sc);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-free-credentials">gnutls_certificate_free_credentials</link> (<link linkend="gnutls-certificate-credentials-tsc">gnutls_certificate_credentials_tsc</link> );
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-allocate-credentials">gnutls_certificate_allocate_credentials</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> *res);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-free-keys">gnutls_certificate_free_keys</link>        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-free-cas">gnutls_certificate_free_cas</link>         (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-free-ca-names">gnutls_certificate_free_ca_names</link>    (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-free-crls">gnutls_certificate_free_crls</link>        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-set-dh-params">gnutls_certificate_set_dh_params</link>    (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dh_params);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-set-rsa-export-params">gnutls_certificate_set_rsa_export_params</link>
                                                        (<link linkend="gnutls-certificate-credentials-tres">gnutls_certificate_credentials_tres</link> ,
                                                         <link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> rsa_params);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-set-verify-flags">gnutls_certificate_set_verify_flags</link> (<link linkend="gnutls-certificate-credentials-tres">gnutls_certificate_credentials_tres</link> ,
                                                         unsigned <link linkend="int">int</link> flags);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-set-verify-limits">gnutls_certificate_set_verify_limits</link>
                                                        (<link linkend="gnutls-certificate-credentials-tres">gnutls_certificate_credentials_tres</link> ,
                                                         unsigned <link linkend="int">int</link> max_bits,
                                                         unsigned <link linkend="int">int</link> max_depth);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-trust-file">gnutls_certificate_set_x509_trust_file</link>
                                                        (<link linkend="gnutls-certificate-credentials-tres">gnutls_certificate_credentials_tres</link> ,
                                                         const <link linkend="char">char</link> *CAFILE,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-trust-mem">gnutls_certificate_set_x509_trust_mem</link>
                                                        (<link linkend="gnutls-certificate-credentials-tres">gnutls_certificate_credentials_tres</link> ,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *CA,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-crl-file">gnutls_certificate_set_x509_crl_file</link>
                                                        (<link linkend="gnutls-certificate-credentials-tres">gnutls_certificate_credentials_tres</link> ,
                                                         const <link linkend="char">char</link> *crlfile,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-crl-mem">gnutls_certificate_set_x509_crl_mem</link> (<link linkend="gnutls-certificate-credentials-tres">gnutls_certificate_credentials_tres</link> ,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *CRL,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-key-file">gnutls_certificate_set_x509_key_file</link>
                                                        (<link linkend="gnutls-certificate-credentials-tres">gnutls_certificate_credentials_tres</link> ,
                                                         const <link linkend="char">char</link> *CERTFILE,
                                                         const <link linkend="char">char</link> *KEYFILE,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-key-mem">gnutls_certificate_set_x509_key_mem</link> (<link linkend="gnutls-certificate-credentials-tres">gnutls_certificate_credentials_tres</link> ,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *CERT,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *KEY,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-send-x509-rdn-sequence">gnutls_certificate_send_x509_rdn_sequence</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> status);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-simple-pkcs12-file">gnutls_certificate_set_x509_simple_pkcs12_file</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *pkcs12file,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type,
                                                         const <link linkend="char">char</link> *password);
typedef             <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link>;
struct              <link linkend="gnutls-x509-crl-int">gnutls_x509_crl_int</link>;
typedef             <link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link>;
struct              <link linkend="gnutls-x509-crt-int">gnutls_x509_crt_int</link>;
typedef             <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link>;
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-key">gnutls_certificate_set_x509_key</link>     (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> *cert_list,
                                                         <link linkend="int">int</link> cert_list_size,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-trust">gnutls_certificate_set_x509_trust</link>   (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> *ca_list,
                                                         <link linkend="int">int</link> ca_list_size);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-crl">gnutls_certificate_set_x509_crl</link>     (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> *crl_list,
                                                         <link linkend="int">int</link> crl_list_size);
<link linkend="int">int</link>                 <link linkend="gnutls-global-init">gnutls_global_init</link>                  (void);
<link linkend="void">void</link>                <link linkend="gnutls-global-deinit">gnutls_global_deinit</link>                (void);
<link linkend="void">void</link>*               (<link linkend="gnutls-alloc-function">*gnutls_alloc_function</link>)            (<link linkend="size-t">size_t</link> );
<link linkend="void">void</link>*               (<link linkend="gnutls-calloc-function">*gnutls_calloc_function</link>)           (<link linkend="size-t">size_t</link> ,
                                                         <link linkend="size-t">size_t</link> );
<link linkend="int">int</link>                 (<link linkend="gnutls-is-secure-function">*gnutls_is_secure_function</link>)        (const <link linkend="void">void</link> *);
<link linkend="void">void</link>                (<link linkend="gnutls-free-function">*gnutls_free_function</link>)             (<link linkend="void">void</link> *);
<link linkend="void">void</link>*               (<link linkend="gnutls-realloc-function">*gnutls_realloc_function</link>)          (<link linkend="void">void</link> *,
                                                         <link linkend="size-t">size_t</link> );
<link linkend="void">void</link>                <link linkend="gnutls-global-set-mem-functions">gnutls_global_set_mem_functions</link>     (<link linkend="gnutls-alloc-function">gnutls_alloc_function</link> gt_alloc_func,
                                                         <link linkend="gnutls-alloc-functiongt-secure-alloc-func">gnutls_alloc_functiongt_secure_alloc_func</link> ,
                                                         <link linkend="gnutls-is-secure-functiongt-is-secure-func">gnutls_is_secure_functiongt_is_secure_func</link> ,
                                                         <link linkend="gnutls-realloc-function">gnutls_realloc_function</link> gt_realloc_func,
                                                         <link linkend="gnutls-free-function">gnutls_free_function</link> gt_free_func);
extern              gnutls_alloc_function <link linkend="gnutls-malloc">gnutls_malloc</link>;
extern              gnutls_alloc_function <link linkend="gnutls-secure-malloc">gnutls_secure_malloc</link>;
extern              gnutls_realloc_function <link linkend="gnutls-realloc">gnutls_realloc</link>;
extern              gnutls_calloc_function <link linkend="gnutls-calloc">gnutls_calloc</link>;
extern              gnutls_free_function <link linkend="gnutls-free">gnutls_free</link>;
<link linkend="char">char</link>*               <link linkend="gnutls-strdup">gnutls_strdup</link>                       (const <link linkend="char">char</link> *);
<link linkend="void">void</link>                (<link linkend="gnutls-log-func">*gnutls_log_func</link>)                  (...,
                                                         const <link linkend="char">char</link> *);
<link linkend="void">void</link>                <link linkend="gnutls-global-set-log-function">gnutls_global_set_log_function</link>      (<link linkend="gnutls-log-func">gnutls_log_func</link> log_func);
<link linkend="void">void</link>                <link linkend="gnutls-global-set-log-level">gnutls_global_set_log_level</link>         (<link linkend="int">int</link> level);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-params-init">gnutls_dh_params_init</link>               (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> *dh_params);
<link linkend="void">void</link>                <link linkend="gnutls-dh-params-deinit">gnutls_dh_params_deinit</link>             (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dh_params);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-params-import-raw">gnutls_dh_params_import_raw</link>         (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dh_params,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *prime,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *generator);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-params-import-pkcs3">gnutls_dh_params_import_pkcs3</link>       (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> params,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *pkcs3_params,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-params-generate2">gnutls_dh_params_generate2</link>          (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> params,
                                                         unsigned <link linkend="int">int</link> bits);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-params-export-pkcs3">gnutls_dh_params_export_pkcs3</link>       (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> params,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         unsigned <link linkend="char">char</link> *params_data,
                                                         <link linkend="size-t">size_t</link> *params_data_size);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-params-export-raw">gnutls_dh_params_export_raw</link>         (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> params,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *prime,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *generator,
                                                         unsigned <link linkend="int">int</link> *bits);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-params-cpy">gnutls_dh_params_cpy</link>                (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dst,
                                                         <link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> src);
<link linkend="int">int</link>                 <link linkend="gnutls-rsa-params-init">gnutls_rsa_params_init</link>              (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> *rsa_params);
<link linkend="void">void</link>                <link linkend="gnutls-rsa-params-deinit">gnutls_rsa_params_deinit</link>            (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> rsa_params);
<link linkend="int">int</link>                 <link linkend="gnutls-rsa-params-cpy">gnutls_rsa_params_cpy</link>               (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> dst,
                                                         <link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> src);
<link linkend="int">int</link>                 <link linkend="gnutls-rsa-params-import-raw">gnutls_rsa_params_import_raw</link>        (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> rsa_params,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *d,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *u);
<link linkend="int">int</link>                 <link linkend="gnutls-rsa-params-generate2">gnutls_rsa_params_generate2</link>         (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> params,
                                                         unsigned <link linkend="int">int</link> bits);
<link linkend="int">int</link>                 <link linkend="gnutls-rsa-params-export-raw">gnutls_rsa_params_export_raw</link>        (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> params,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *d,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *u,
                                                         unsigned <link linkend="int">int</link> *bits);
<link linkend="int">int</link>                 <link linkend="gnutls-rsa-params-export-pkcs1">gnutls_rsa_params_export_pkcs1</link>      (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> params,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         unsigned <link linkend="char">char</link> *params_data,
                                                         <link linkend="size-t">size_t</link> *params_data_size);
<link linkend="int">int</link>                 <link linkend="gnutls-rsa-params-import-pkcs1">gnutls_rsa_params_import_pkcs1</link>      (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> params,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *pkcs1_params,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format);
<link linkend="ssize-t">ssize_t</link>             (<link linkend="gnutls-pull-func">*gnutls_pull_func</link>)                 (<link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> ,
                                                         <link linkend="void">void</link> *,
                                                         <link linkend="size-t">size_t</link> );
<link linkend="ssize-t">ssize_t</link>             (<link linkend="gnutls-push-func">*gnutls_push_func</link>)                 (<link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> ,
                                                         const <link linkend="void">void</link> *,
                                                         <link linkend="size-t">size_t</link> );
<link linkend="void">void</link>                <link linkend="gnutls-transport-set-ptr">gnutls_transport_set_ptr</link>            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> ptr);
<link linkend="void">void</link>                <link linkend="gnutls-transport-set-ptr2">gnutls_transport_set_ptr2</link>           (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> recv_ptr,
                                                         <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> send_ptr);
<link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> <link linkend="gnutls-transport-get-ptr">gnutls_transport_get_ptr</link>         (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="void">void</link>                <link linkend="gnutls-transport-get-ptr2">gnutls_transport_get_ptr2</link>           (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> *recv_ptr,
                                                         <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> *send_ptr);
<link linkend="void">void</link>                <link linkend="gnutls-transport-set-lowat">gnutls_transport_set_lowat</link>          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> num);
<link linkend="void">void</link>                <link linkend="gnutls-transport-set-push-function">gnutls_transport_set_push_function</link>  (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-push-func">gnutls_push_func</link> push_func);
<link linkend="void">void</link>                <link linkend="gnutls-transport-set-pull-function">gnutls_transport_set_pull_function</link>  (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-pull-func">gnutls_pull_func</link> pull_func);
<link linkend="void">void</link>                <link linkend="gnutls-transport-set-errno">gnutls_transport_set_errno</link>          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> err);
<link linkend="void">void</link>                <link linkend="gnutls-transport-set-global-errno">gnutls_transport_set_global_errno</link>   (<link linkend="int">int</link> err);
<link linkend="void">void</link>                <link linkend="gnutls-session-set-ptr">gnutls_session_set_ptr</link>              (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *ptr);
<link linkend="void">void</link>*               <link linkend="gnutls-session-get-ptr">gnutls_session_get_ptr</link>              (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="void">void</link>                <link linkend="gnutls-openpgp-send-cert">gnutls_openpgp_send_cert</link>            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-openpgp-crt-status-t">gnutls_openpgp_crt_status_t</link> status);
<link linkend="int">int</link>                 <link linkend="gnutls-fingerprint">gnutls_fingerprint</link>                  (<link linkend="gnutls-digest-algorithm-t">gnutls_digest_algorithm_t</link> algo,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="void">void</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);
<link linkend="void">void</link>                <link linkend="gnutls-srp-free-client-credentials">gnutls_srp_free_client_credentials</link>  (<link linkend="gnutls-srp-client-credentials-tsc">gnutls_srp_client_credentials_tsc</link> );
<link linkend="int">int</link>                 <link linkend="gnutls-srp-allocate-client-credentials">gnutls_srp_allocate_client_credentials</link>
                                                        (<link linkend="gnutls-srp-client-credentials-t">gnutls_srp_client_credentials_t</link> *sc);
<link linkend="int">int</link>                 <link linkend="gnutls-srp-set-client-credentials">gnutls_srp_set_client_credentials</link>   (<link linkend="gnutls-srp-client-credentials-t">gnutls_srp_client_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *username,
                                                         const <link linkend="char">char</link> *password);
<link linkend="void">void</link>                <link linkend="gnutls-srp-free-server-credentials">gnutls_srp_free_server_credentials</link>  (<link linkend="gnutls-srp-server-credentials-tsc">gnutls_srp_server_credentials_tsc</link> );
<link linkend="int">int</link>                 <link linkend="gnutls-srp-allocate-server-credentials">gnutls_srp_allocate_server_credentials</link>
                                                        (<link linkend="gnutls-srp-server-credentials-t">gnutls_srp_server_credentials_t</link> *sc);
<link linkend="int">int</link>                 <link linkend="gnutls-srp-set-server-credentials-file">gnutls_srp_set_server_credentials_file</link>
                                                        (<link linkend="gnutls-srp-server-credentials-tres">gnutls_srp_server_credentials_tres</link> ,
                                                         const <link linkend="char">char</link> *password_file,
                                                         const <link linkend="char">char</link> *password_conf_file);
const <link linkend="char">char</link>*         <link linkend="gnutls-srp-server-get-username">gnutls_srp_server_get_username</link>      (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-srp-verifier">gnutls_srp_verifier</link>                 (const <link linkend="char">char</link> *username,
                                                         const <link linkend="char">char</link> *password,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *salt,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *generator,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *prime,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *res);
extern              const gnutls_datum_t <link linkend="gnutls-srp-2048-group-prime">gnutls_srp_2048_group_prime</link>;
extern              const gnutls_datum_t <link linkend="gnutls-srp-2048-group-generator">gnutls_srp_2048_group_generator</link>;
extern              const gnutls_datum_t <link linkend="gnutls-srp-1536-group-prime">gnutls_srp_1536_group_prime</link>;
extern              const gnutls_datum_t <link linkend="gnutls-srp-1536-group-generator">gnutls_srp_1536_group_generator</link>;
extern              const gnutls_datum_t <link linkend="gnutls-srp-1024-group-prime">gnutls_srp_1024_group_prime</link>;
extern              const gnutls_datum_t <link linkend="gnutls-srp-1024-group-generator">gnutls_srp_1024_group_generator</link>;
<link linkend="void">void</link>                <link linkend="gnutls-srp-set-server-credentials-function">gnutls_srp_set_server_credentials_function</link>
                                                        (<link linkend="gnutls-srp-server-credentials-t">gnutls_srp_server_credentials_t</link> cred,
                                                         <link linkend="gnutls-srp-server-credentials-function">gnutls_srp_server_credentials_function</link> *func);
<link linkend="void">void</link>                <link linkend="gnutls-srp-set-client-credentials-function">gnutls_srp_set_client_credentials_function</link>
                                                        (<link linkend="gnutls-srp-client-credentials-t">gnutls_srp_client_credentials_t</link> cred,
                                                         <link linkend="gnutls-srp-client-credentials-function">gnutls_srp_client_credentials_function</link> *func);
<link linkend="int">int</link>                 <link linkend="gnutls-srp-base64-encode">gnutls_srp_base64_encode</link>            (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);
<link linkend="int">int</link>                 <link linkend="gnutls-srp-base64-encode-alloc">gnutls_srp_base64_encode_alloc</link>      (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *result);
<link linkend="int">int</link>                 <link linkend="gnutls-srp-base64-decode">gnutls_srp_base64_decode</link>            (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *b64_data,
                                                         <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);
<link linkend="int">int</link>                 <link linkend="gnutls-srp-base64-decode-alloc">gnutls_srp_base64_decode_alloc</link>      (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *b64_data,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *result);
enum                <link linkend="gnutls-psk-key-flags">gnutls_psk_key_flags</link>;
<link linkend="void">void</link>                <link linkend="gnutls-psk-free-client-credentials">gnutls_psk_free_client_credentials</link>  (<link linkend="gnutls-psk-client-credentials-tsc">gnutls_psk_client_credentials_tsc</link> );
<link linkend="int">int</link>                 <link linkend="gnutls-psk-allocate-client-credentials">gnutls_psk_allocate_client_credentials</link>
                                                        (<link linkend="gnutls-psk-client-credentials-t">gnutls_psk_client_credentials_t</link> *sc);
<link linkend="int">int</link>                 <link linkend="gnutls-psk-set-client-credentials">gnutls_psk_set_client_credentials</link>   (<link linkend="gnutls-psk-client-credentials-t">gnutls_psk_client_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *username,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *key,
                                                         <link linkend="gnutls-psk-key-flags">gnutls_psk_key_flags</link> format);
<link linkend="void">void</link>                <link linkend="gnutls-psk-free-server-credentials">gnutls_psk_free_server_credentials</link>  (<link linkend="gnutls-psk-server-credentials-tsc">gnutls_psk_server_credentials_tsc</link> );
<link linkend="int">int</link>                 <link linkend="gnutls-psk-allocate-server-credentials">gnutls_psk_allocate_server_credentials</link>
                                                        (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> *sc);
<link linkend="int">int</link>                 <link linkend="gnutls-psk-set-server-credentials-file">gnutls_psk_set_server_credentials_file</link>
                                                        (<link linkend="gnutls-psk-server-credentials-tres">gnutls_psk_server_credentials_tres</link> ,
                                                         const <link linkend="char">char</link> *password_file);
const <link linkend="char">char</link>*         <link linkend="gnutls-psk-server-get-username">gnutls_psk_server_get_username</link>      (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="void">void</link>                <link linkend="gnutls-psk-set-server-credentials-function">gnutls_psk_set_server_credentials_function</link>
                                                        (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> cred,
                                                         <link linkend="gnutls-psk-server-credentials-function">gnutls_psk_server_credentials_function</link> *func);
<link linkend="void">void</link>                <link linkend="gnutls-psk-set-client-credentials-function">gnutls_psk_set_client_credentials_function</link>
                                                        (<link linkend="gnutls-psk-client-credentials-t">gnutls_psk_client_credentials_t</link> cred,
                                                         <link linkend="gnutls-psk-client-credentials-function">gnutls_psk_client_credentials_function</link> *func);
<link linkend="int">int</link>                 <link linkend="gnutls-hex-encode">gnutls_hex_encode</link>                   (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);
<link linkend="int">int</link>                 <link linkend="gnutls-hex-decode">gnutls_hex_decode</link>                   (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *hex_data,
                                                         <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);
<link linkend="void">void</link>                <link linkend="gnutls-psk-set-server-dh-params">gnutls_psk_set_server_dh_params</link>     (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> res,
                                                         <link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dh_params);
<link linkend="void">void</link>                <link linkend="gnutls-psk-set-server-params-function">gnutls_psk_set_server_params_function</link>
                                                        (<link linkend="gnutls-psk-server-credentials-tres">gnutls_psk_server_credentials_tres</link> ,
                                                         <link linkend="gnutls-params-function">gnutls_params_function</link> *func);
enum                <link linkend="gnutls-x509-subject-alt-name-t">gnutls_x509_subject_alt_name_t</link>;
struct              <link linkend="gnutls-openpgp-crt-int">gnutls_openpgp_crt_int</link>;
typedef             <link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link>;
struct              <link linkend="gnutls-openpgp-privkey-int">gnutls_openpgp_privkey_int</link>;
typedef             <link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link>;
<link linkend="gnutls-credentials-type-t">gnutls_credentials_type_t</link> <link linkend="gnutls-auth-get-type">gnutls_auth_get_type</link>          (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="gnutls-credentials-type-t">gnutls_credentials_type_t</link> <link linkend="gnutls-auth-server-get-type">gnutls_auth_server_get_type</link>   (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="gnutls-credentials-type-t">gnutls_credentials_type_t</link> <link linkend="gnutls-auth-client-get-type">gnutls_auth_client_get_type</link>   (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="void">void</link>                <link linkend="gnutls-dh-set-prime-bits">gnutls_dh_set_prime_bits</link>            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         unsigned <link linkend="int">int</link> bits);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-get-secret-bits">gnutls_dh_get_secret_bits</link>           (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-get-peers-public-bits">gnutls_dh_get_peers_public_bits</link>     (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-get-prime-bits">gnutls_dh_get_prime_bits</link>            (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-get-group">gnutls_dh_get_group</link>                 (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *raw_gen,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *raw_prime);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-get-pubkey">gnutls_dh_get_pubkey</link>                (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *raw_key);
<link linkend="int">int</link>                 <link linkend="gnutls-rsa-export-get-pubkey">gnutls_rsa_export_get_pubkey</link>        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *exponent,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *modulus);
<link linkend="int">int</link>                 <link linkend="gnutls-rsa-export-get-modulus-bits">gnutls_rsa_export_get_modulus_bits</link>  (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 (<link linkend="gnutls-sign-func">*gnutls_sign_func</link>)                 (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *userdata,
                                                         <link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link> cert_type,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *cert,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *hash,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *signature);
<link linkend="void">void</link>                <link linkend="gnutls-sign-callback-set">gnutls_sign_callback_set</link>            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-sign-func">gnutls_sign_func</link> sign_func,
                                                         <link linkend="void">void</link> *userdata);
<link linkend="gnutls-sign-func">gnutls_sign_func</link>    <link linkend="gnutls-sign-callback-get">gnutls_sign_callback_get</link>            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> **userdata);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-client-set-retrieve-function">gnutls_certificate_client_set_retrieve_function</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> cred,
                                                         <link linkend="gnutls-certificate-client-retrieve-function">gnutls_certificate_client_retrieve_function</link> *func);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-server-set-retrieve-function">gnutls_certificate_server_set_retrieve_function</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> cred,
                                                         <link linkend="gnutls-certificate-server-retrieve-function">gnutls_certificate_server_retrieve_function</link> *func);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-server-set-request">gnutls_certificate_server_set_request</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-certificate-request-treq">gnutls_certificate_request_treq</link> );
const <link linkend="gnutls-datum-t">gnutls_datum_t</link>* <link linkend="gnutls-certificate-get-peers">gnutls_certificate_get_peers</link>      (<link linkend="gnutls-session-tsession">gnutls_session_tsession</link> ,
                                                         unsigned <link linkend="int">int</link> *list_size);
const <link linkend="gnutls-datum-t">gnutls_datum_t</link>* <link linkend="gnutls-certificate-get-ours">gnutls_certificate_get_ours</link>       (<link linkend="gnutls-session-tsession">gnutls_session_tsession</link> );
<link linkend="time-t">time_t</link>              <link linkend="gnutls-certificate-activation-time-peers">gnutls_certificate_activation_time_peers</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="time-t">time_t</link>              <link linkend="gnutls-certificate-expiration-time-peers">gnutls_certificate_expiration_time_peers</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-client-get-request-status">gnutls_certificate_client_get_request_status</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-verify-peers2">gnutls_certificate_verify_peers2</link>    (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         unsigned <link linkend="int">int</link> *status);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-verify-peers">gnutls_certificate_verify_peers</link>     (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-pem-base64-encode">gnutls_pem_base64_encode</link>            (const <link linkend="char">char</link> *msg,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);
<link linkend="int">int</link>                 <link linkend="gnutls-pem-base64-decode">gnutls_pem_base64_decode</link>            (const <link linkend="char">char</link> *header,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *b64_data,
                                                         unsigned <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);
<link linkend="int">int</link>                 <link linkend="gnutls-pem-base64-encode-alloc">gnutls_pem_base64_encode_alloc</link>      (const <link linkend="char">char</link> *msg,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *result);
<link linkend="int">int</link>                 <link linkend="gnutls-pem-base64-decode-alloc">gnutls_pem_base64_decode_alloc</link>      (const <link linkend="char">char</link> *header,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *b64_data,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *result);
#define             <link linkend="GNUTLS-KEY-DIGITAL-SIGNATURE:CAPS">GNUTLS_KEY_DIGITAL_SIGNATURE</link>
#define             <link linkend="GNUTLS-KEY-NON-REPUDIATION:CAPS">GNUTLS_KEY_NON_REPUDIATION</link>
#define             <link linkend="GNUTLS-KEY-KEY-ENCIPHERMENT:CAPS">GNUTLS_KEY_KEY_ENCIPHERMENT</link>
#define             <link linkend="GNUTLS-KEY-DATA-ENCIPHERMENT:CAPS">GNUTLS_KEY_DATA_ENCIPHERMENT</link>
#define             <link linkend="GNUTLS-KEY-KEY-AGREEMENT:CAPS">GNUTLS_KEY_KEY_AGREEMENT</link>
#define             <link linkend="GNUTLS-KEY-KEY-CERT-SIGN:CAPS">GNUTLS_KEY_KEY_CERT_SIGN</link>
#define             <link linkend="GNUTLS-KEY-CRL-SIGN:CAPS">GNUTLS_KEY_CRL_SIGN</link>
#define             <link linkend="GNUTLS-KEY-ENCIPHER-ONLY:CAPS">GNUTLS_KEY_ENCIPHER_ONLY</link>
#define             <link linkend="GNUTLS-KEY-DECIPHER-ONLY:CAPS">GNUTLS_KEY_DECIPHER_ONLY</link>
<link linkend="void">void</link>                <link linkend="gnutls-certificate-set-params-function">gnutls_certificate_set_params_function</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-params-function">gnutls_params_function</link> *func);
<link linkend="void">void</link>                <link linkend="gnutls-anon-set-params-function">gnutls_anon_set_params_function</link>     (<link linkend="gnutls-anon-server-credentials-t">gnutls_anon_server_credentials_t</link> res,
                                                         <link linkend="gnutls-params-function">gnutls_params_function</link> *func);
<link linkend="void">void</link>                <link linkend="gnutls-psk-set-params-function">gnutls_psk_set_params_function</link>      (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> res,
                                                         <link linkend="gnutls-params-function">gnutls_params_function</link> *func);
#define             <link linkend="GNUTLS-E-SUCCESS:CAPS">GNUTLS_E_SUCCESS</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-COMPRESSION-ALGORITHM:CAPS">GNUTLS_E_UNKNOWN_COMPRESSION_ALGORITHM</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-CIPHER-TYPE:CAPS">GNUTLS_E_UNKNOWN_CIPHER_TYPE</link>
#define             <link linkend="GNUTLS-E-LARGE-PACKET:CAPS">GNUTLS_E_LARGE_PACKET</link>
#define             <link linkend="GNUTLS-E-UNSUPPORTED-VERSION-PACKET:CAPS">GNUTLS_E_UNSUPPORTED_VERSION_PACKET</link>
#define             <link linkend="GNUTLS-E-UNEXPECTED-PACKET-LENGTH:CAPS">GNUTLS_E_UNEXPECTED_PACKET_LENGTH</link>
#define             <link linkend="GNUTLS-E-INVALID-SESSION:CAPS">GNUTLS_E_INVALID_SESSION</link>
#define             <link linkend="GNUTLS-E-FATAL-ALERT-RECEIVED:CAPS">GNUTLS_E_FATAL_ALERT_RECEIVED</link>
#define             <link linkend="GNUTLS-E-UNEXPECTED-PACKET:CAPS">GNUTLS_E_UNEXPECTED_PACKET</link>
#define             <link linkend="GNUTLS-E-WARNING-ALERT-RECEIVED:CAPS">GNUTLS_E_WARNING_ALERT_RECEIVED</link>
#define             <link linkend="GNUTLS-E-ERROR-IN-FINISHED-PACKET:CAPS">GNUTLS_E_ERROR_IN_FINISHED_PACKET</link>
#define             <link linkend="GNUTLS-E-UNEXPECTED-HANDSHAKE-PACKET:CAPS">GNUTLS_E_UNEXPECTED_HANDSHAKE_PACKET</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-CIPHER-SUITE:CAPS">GNUTLS_E_UNKNOWN_CIPHER_SUITE</link>
#define             <link linkend="GNUTLS-E-UNWANTED-ALGORITHM:CAPS">GNUTLS_E_UNWANTED_ALGORITHM</link>
#define             <link linkend="GNUTLS-E-MPI-SCAN-FAILED:CAPS">GNUTLS_E_MPI_SCAN_FAILED</link>
#define             <link linkend="GNUTLS-E-DECRYPTION-FAILED:CAPS">GNUTLS_E_DECRYPTION_FAILED</link>
#define             <link linkend="GNUTLS-E-MEMORY-ERROR:CAPS">GNUTLS_E_MEMORY_ERROR</link>
#define             <link linkend="GNUTLS-E-DECOMPRESSION-FAILED:CAPS">GNUTLS_E_DECOMPRESSION_FAILED</link>
#define             <link linkend="GNUTLS-E-COMPRESSION-FAILED:CAPS">GNUTLS_E_COMPRESSION_FAILED</link>
#define             <link linkend="GNUTLS-E-AGAIN:CAPS">GNUTLS_E_AGAIN</link>
#define             <link linkend="GNUTLS-E-EXPIRED:CAPS">GNUTLS_E_EXPIRED</link>
#define             <link linkend="GNUTLS-E-DB-ERROR:CAPS">GNUTLS_E_DB_ERROR</link>
#define             <link linkend="GNUTLS-E-SRP-PWD-ERROR:CAPS">GNUTLS_E_SRP_PWD_ERROR</link>
#define             <link linkend="GNUTLS-E-INSUFFICIENT-CREDENTIALS:CAPS">GNUTLS_E_INSUFFICIENT_CREDENTIALS</link>
#define             <link linkend="GNUTLS-E-INSUFICIENT-CREDENTIALS:CAPS">GNUTLS_E_INSUFICIENT_CREDENTIALS</link>
#define             <link linkend="GNUTLS-E-INSUFFICIENT-CRED:CAPS">GNUTLS_E_INSUFFICIENT_CRED</link>
#define             <link linkend="GNUTLS-E-INSUFICIENT-CRED:CAPS">GNUTLS_E_INSUFICIENT_CRED</link>
#define             <link linkend="GNUTLS-E-HASH-FAILED:CAPS">GNUTLS_E_HASH_FAILED</link>
#define             <link linkend="GNUTLS-E-BASE64-DECODING-ERROR:CAPS">GNUTLS_E_BASE64_DECODING_ERROR</link>
#define             <link linkend="GNUTLS-E-MPI-PRINT-FAILED:CAPS">GNUTLS_E_MPI_PRINT_FAILED</link>
#define             <link linkend="GNUTLS-E-REHANDSHAKE:CAPS">GNUTLS_E_REHANDSHAKE</link>
#define             <link linkend="GNUTLS-E-GOT-APPLICATION-DATA:CAPS">GNUTLS_E_GOT_APPLICATION_DATA</link>
#define             <link linkend="GNUTLS-E-RECORD-LIMIT-REACHED:CAPS">GNUTLS_E_RECORD_LIMIT_REACHED</link>
#define             <link linkend="GNUTLS-E-ENCRYPTION-FAILED:CAPS">GNUTLS_E_ENCRYPTION_FAILED</link>
#define             <link linkend="GNUTLS-E-PK-ENCRYPTION-FAILED:CAPS">GNUTLS_E_PK_ENCRYPTION_FAILED</link>
#define             <link linkend="GNUTLS-E-PK-DECRYPTION-FAILED:CAPS">GNUTLS_E_PK_DECRYPTION_FAILED</link>
#define             <link linkend="GNUTLS-E-PK-SIGN-FAILED:CAPS">GNUTLS_E_PK_SIGN_FAILED</link>
#define             <link linkend="GNUTLS-E-X509-UNSUPPORTED-CRITICAL-EXTENSION:CAPS">GNUTLS_E_X509_UNSUPPORTED_CRITICAL_EXTENSION</link>
#define             <link linkend="GNUTLS-E-KEY-USAGE-VIOLATION:CAPS">GNUTLS_E_KEY_USAGE_VIOLATION</link>
#define             <link linkend="GNUTLS-E-NO-CERTIFICATE-FOUND:CAPS">GNUTLS_E_NO_CERTIFICATE_FOUND</link>
#define             <link linkend="GNUTLS-E-INVALID-REQUEST:CAPS">GNUTLS_E_INVALID_REQUEST</link>
#define             <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER:CAPS">GNUTLS_E_SHORT_MEMORY_BUFFER</link>
#define             <link linkend="GNUTLS-E-INTERRUPTED:CAPS">GNUTLS_E_INTERRUPTED</link>
#define             <link linkend="GNUTLS-E-PUSH-ERROR:CAPS">GNUTLS_E_PUSH_ERROR</link>
#define             <link linkend="GNUTLS-E-PULL-ERROR:CAPS">GNUTLS_E_PULL_ERROR</link>
#define             <link linkend="GNUTLS-E-RECEIVED-ILLEGAL-PARAMETER:CAPS">GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER</link>
#define             <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE:CAPS">GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</link>
#define             <link linkend="GNUTLS-E-PKCS1-WRONG-PAD:CAPS">GNUTLS_E_PKCS1_WRONG_PAD</link>
#define             <link linkend="GNUTLS-E-RECEIVED-ILLEGAL-EXTENSION:CAPS">GNUTLS_E_RECEIVED_ILLEGAL_EXTENSION</link>
#define             <link linkend="GNUTLS-E-INTERNAL-ERROR:CAPS">GNUTLS_E_INTERNAL_ERROR</link>
#define             <link linkend="GNUTLS-E-DH-PRIME-UNACCEPTABLE:CAPS">GNUTLS_E_DH_PRIME_UNACCEPTABLE</link>
#define             <link linkend="GNUTLS-E-FILE-ERROR:CAPS">GNUTLS_E_FILE_ERROR</link>
#define             <link linkend="GNUTLS-E-TOO-MANY-EMPTY-PACKETS:CAPS">GNUTLS_E_TOO_MANY_EMPTY_PACKETS</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-PK-ALGORITHM:CAPS">GNUTLS_E_UNKNOWN_PK_ALGORITHM</link>
#define             <link linkend="GNUTLS-E-INIT-LIBEXTRA:CAPS">GNUTLS_E_INIT_LIBEXTRA</link>
#define             <link linkend="GNUTLS-E-LIBRARY-VERSION-MISMATCH:CAPS">GNUTLS_E_LIBRARY_VERSION_MISMATCH</link>
#define             <link linkend="GNUTLS-E-NO-TEMPORARY-RSA-PARAMS:CAPS">GNUTLS_E_NO_TEMPORARY_RSA_PARAMS</link>
#define             <link linkend="GNUTLS-E-LZO-INIT-FAILED:CAPS">GNUTLS_E_LZO_INIT_FAILED</link>
#define             <link linkend="GNUTLS-E-NO-COMPRESSION-ALGORITHMS:CAPS">GNUTLS_E_NO_COMPRESSION_ALGORITHMS</link>
#define             <link linkend="GNUTLS-E-NO-CIPHER-SUITES:CAPS">GNUTLS_E_NO_CIPHER_SUITES</link>
#define             <link linkend="GNUTLS-E-OPENPGP-GETKEY-FAILED:CAPS">GNUTLS_E_OPENPGP_GETKEY_FAILED</link>
#define             <link linkend="GNUTLS-E-PK-SIG-VERIFY-FAILED:CAPS">GNUTLS_E_PK_SIG_VERIFY_FAILED</link>
#define             <link linkend="GNUTLS-E-ILLEGAL-SRP-USERNAME:CAPS">GNUTLS_E_ILLEGAL_SRP_USERNAME</link>
#define             <link linkend="GNUTLS-E-SRP-PWD-PARSING-ERROR:CAPS">GNUTLS_E_SRP_PWD_PARSING_ERROR</link>
#define             <link linkend="GNUTLS-E-NO-TEMPORARY-DH-PARAMS:CAPS">GNUTLS_E_NO_TEMPORARY_DH_PARAMS</link>
#define             <link linkend="GNUTLS-E-ASN1-ELEMENT-NOT-FOUND:CAPS">GNUTLS_E_ASN1_ELEMENT_NOT_FOUND</link>
#define             <link linkend="GNUTLS-E-ASN1-IDENTIFIER-NOT-FOUND:CAPS">GNUTLS_E_ASN1_IDENTIFIER_NOT_FOUND</link>
#define             <link linkend="GNUTLS-E-ASN1-DER-ERROR:CAPS">GNUTLS_E_ASN1_DER_ERROR</link>
#define             <link linkend="GNUTLS-E-ASN1-VALUE-NOT-FOUND:CAPS">GNUTLS_E_ASN1_VALUE_NOT_FOUND</link>
#define             <link linkend="GNUTLS-E-ASN1-GENERIC-ERROR:CAPS">GNUTLS_E_ASN1_GENERIC_ERROR</link>
#define             <link linkend="GNUTLS-E-ASN1-VALUE-NOT-VALID:CAPS">GNUTLS_E_ASN1_VALUE_NOT_VALID</link>
#define             <link linkend="GNUTLS-E-ASN1-TAG-ERROR:CAPS">GNUTLS_E_ASN1_TAG_ERROR</link>
#define             <link linkend="GNUTLS-E-ASN1-TAG-IMPLICIT:CAPS">GNUTLS_E_ASN1_TAG_IMPLICIT</link>
#define             <link linkend="GNUTLS-E-ASN1-TYPE-ANY-ERROR:CAPS">GNUTLS_E_ASN1_TYPE_ANY_ERROR</link>
#define             <link linkend="GNUTLS-E-ASN1-SYNTAX-ERROR:CAPS">GNUTLS_E_ASN1_SYNTAX_ERROR</link>
#define             <link linkend="GNUTLS-E-ASN1-DER-OVERFLOW:CAPS">GNUTLS_E_ASN1_DER_OVERFLOW</link>
#define             <link linkend="GNUTLS-E-OPENPGP-UID-REVOKED:CAPS">GNUTLS_E_OPENPGP_UID_REVOKED</link>
#define             <link linkend="GNUTLS-E-CERTIFICATE-ERROR:CAPS">GNUTLS_E_CERTIFICATE_ERROR</link>
#define             <link linkend="GNUTLS-E-X509-CERTIFICATE-ERROR:CAPS">GNUTLS_E_X509_CERTIFICATE_ERROR</link>
#define             <link linkend="GNUTLS-E-CERTIFICATE-KEY-MISMATCH:CAPS">GNUTLS_E_CERTIFICATE_KEY_MISMATCH</link>
#define             <link linkend="GNUTLS-E-UNSUPPORTED-CERTIFICATE-TYPE:CAPS">GNUTLS_E_UNSUPPORTED_CERTIFICATE_TYPE</link>
#define             <link linkend="GNUTLS-E-X509-UNKNOWN-SAN:CAPS">GNUTLS_E_X509_UNKNOWN_SAN</link>
#define             <link linkend="GNUTLS-E-OPENPGP-FINGERPRINT-UNSUPPORTED:CAPS">GNUTLS_E_OPENPGP_FINGERPRINT_UNSUPPORTED</link>
#define             <link linkend="GNUTLS-E-X509-UNSUPPORTED-ATTRIBUTE:CAPS">GNUTLS_E_X509_UNSUPPORTED_ATTRIBUTE</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-HASH-ALGORITHM:CAPS">GNUTLS_E_UNKNOWN_HASH_ALGORITHM</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-PKCS-CONTENT-TYPE:CAPS">GNUTLS_E_UNKNOWN_PKCS_CONTENT_TYPE</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-PKCS-BAG-TYPE:CAPS">GNUTLS_E_UNKNOWN_PKCS_BAG_TYPE</link>
#define             <link linkend="GNUTLS-E-INVALID-PASSWORD:CAPS">GNUTLS_E_INVALID_PASSWORD</link>
#define             <link linkend="GNUTLS-E-MAC-VERIFY-FAILED:CAPS">GNUTLS_E_MAC_VERIFY_FAILED</link>
#define             <link linkend="GNUTLS-E-CONSTRAINT-ERROR:CAPS">GNUTLS_E_CONSTRAINT_ERROR</link>
#define             <link linkend="GNUTLS-E-WARNING-IA-IPHF-RECEIVED:CAPS">GNUTLS_E_WARNING_IA_IPHF_RECEIVED</link>
#define             <link linkend="GNUTLS-E-WARNING-IA-FPHF-RECEIVED:CAPS">GNUTLS_E_WARNING_IA_FPHF_RECEIVED</link>
#define             <link linkend="GNUTLS-E-IA-VERIFY-FAILED:CAPS">GNUTLS_E_IA_VERIFY_FAILED</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-ALGORITHM:CAPS">GNUTLS_E_UNKNOWN_ALGORITHM</link>
#define             <link linkend="GNUTLS-E-BASE64-ENCODING-ERROR:CAPS">GNUTLS_E_BASE64_ENCODING_ERROR</link>
#define             <link linkend="GNUTLS-E-INCOMPATIBLE-GCRYPT-LIBRARY:CAPS">GNUTLS_E_INCOMPATIBLE_GCRYPT_LIBRARY</link>
#define             <link linkend="GNUTLS-E-INCOMPATIBLE-CRYPTO-LIBRARY:CAPS">GNUTLS_E_INCOMPATIBLE_CRYPTO_LIBRARY</link>
#define             <link linkend="GNUTLS-E-INCOMPATIBLE-LIBTASN1-LIBRARY:CAPS">GNUTLS_E_INCOMPATIBLE_LIBTASN1_LIBRARY</link>
#define             <link linkend="GNUTLS-E-OPENPGP-KEYRING-ERROR:CAPS">GNUTLS_E_OPENPGP_KEYRING_ERROR</link>
#define             <link linkend="GNUTLS-E-X509-UNSUPPORTED-OID:CAPS">GNUTLS_E_X509_UNSUPPORTED_OID</link>
#define             <link linkend="GNUTLS-E-RANDOM-FAILED:CAPS">GNUTLS_E_RANDOM_FAILED</link>
#define             <link linkend="GNUTLS-E-BASE64-UNEXPECTED-HEADER-ERROR:CAPS">GNUTLS_E_BASE64_UNEXPECTED_HEADER_ERROR</link>
#define             <link linkend="GNUTLS-E-UNIMPLEMENTED-FEATURE:CAPS">GNUTLS_E_UNIMPLEMENTED_FEATURE</link>
#define             <link linkend="GNUTLS-E-APPLICATION-ERROR-MAX:CAPS">GNUTLS_E_APPLICATION_ERROR_MAX</link>
#define             <link linkend="GNUTLS-E-APPLICATION-ERROR-MIN:CAPS">GNUTLS_E_APPLICATION_ERROR_MIN</link>
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="LIBGNUTLS-VERSION:CAPS" role="macro"/>LIBGNUTLS_VERSION</title>
<indexterm><primary>LIBGNUTLS_VERSION</primary></indexterm><programlisting>#define             LIBGNUTLS_VERSION</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="LIBGNUTLS-VERSION-MAJOR:CAPS" role="macro"/>LIBGNUTLS_VERSION_MAJOR</title>
<indexterm><primary>LIBGNUTLS_VERSION_MAJOR</primary></indexterm><programlisting>#define             LIBGNUTLS_VERSION_MAJOR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="LIBGNUTLS-VERSION-MINOR:CAPS" role="macro"/>LIBGNUTLS_VERSION_MINOR</title>
<indexterm><primary>LIBGNUTLS_VERSION_MINOR</primary></indexterm><programlisting>#define             LIBGNUTLS_VERSION_MINOR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="LIBGNUTLS-VERSION-PATCH:CAPS" role="macro"/>LIBGNUTLS_VERSION_PATCH</title>
<indexterm><primary>LIBGNUTLS_VERSION_PATCH</primary></indexterm><programlisting>#define             LIBGNUTLS_VERSION_PATCH</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="LIBGNUTLS-VERSION-NUMBER:CAPS" role="macro"/>LIBGNUTLS_VERSION_NUMBER</title>
<indexterm><primary>LIBGNUTLS_VERSION_NUMBER</primary></indexterm><programlisting>#define             LIBGNUTLS_VERSION_NUMBER</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="HAVE-SSIZE-T:CAPS" role="macro"/>HAVE_SSIZE_T</title>
<indexterm><primary>HAVE_SSIZE_T</primary></indexterm><programlisting>#define             HAVE_SSIZE_T</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-CIPHER-RIJNDAEL-128-CBC:CAPS" role="macro"/>GNUTLS_CIPHER_RIJNDAEL_128_CBC</title>
<indexterm><primary>GNUTLS_CIPHER_RIJNDAEL_128_CBC</primary></indexterm><programlisting>#define             GNUTLS_CIPHER_RIJNDAEL_128_CBC</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-CIPHER-RIJNDAEL-256-CBC:CAPS" role="macro"/>GNUTLS_CIPHER_RIJNDAEL_256_CBC</title>
<indexterm><primary>GNUTLS_CIPHER_RIJNDAEL_256_CBC</primary></indexterm><programlisting>#define             GNUTLS_CIPHER_RIJNDAEL_256_CBC</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-CIPHER-RIJNDAEL-CBC:CAPS" role="macro"/>GNUTLS_CIPHER_RIJNDAEL_CBC</title>
<indexterm><primary>GNUTLS_CIPHER_RIJNDAEL_CBC</primary></indexterm><programlisting>#define             GNUTLS_CIPHER_RIJNDAEL_CBC</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-CIPHER-ARCFOUR:CAPS" role="macro"/>GNUTLS_CIPHER_ARCFOUR</title>
<indexterm><primary>GNUTLS_CIPHER_ARCFOUR</primary></indexterm><programlisting>#define             GNUTLS_CIPHER_ARCFOUR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-cipher-algorithm-t" role="enum"/>enum gnutls_cipher_algorithm_t</title>
<indexterm><primary>gnutls_cipher_algorithm_t</primary></indexterm><programlisting>  typedef enum gnutls_cipher_algorithm
  {
    GNUTLS_CIPHER_UNKNOWN = 0,
    GNUTLS_CIPHER_NULL = 1,
    GNUTLS_CIPHER_ARCFOUR_128,
    GNUTLS_CIPHER_3DES_CBC,
    GNUTLS_CIPHER_AES_128_CBC,
    GNUTLS_CIPHER_AES_256_CBC,
    GNUTLS_CIPHER_ARCFOUR_40,
    GNUTLS_CIPHER_CAMELLIA_128_CBC,
    GNUTLS_CIPHER_CAMELLIA_256_CBC,
    GNUTLS_CIPHER_RC2_40_CBC = 90,
    GNUTLS_CIPHER_DES_CBC
  } gnutls_cipher_algorithm_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-kx-algorithm-t" role="enum"/>enum gnutls_kx_algorithm_t</title>
<indexterm><primary>gnutls_kx_algorithm_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_KX_UNKNOWN = 0,
    GNUTLS_KX_RSA = 1,
    GNUTLS_KX_DHE_DSS,
    GNUTLS_KX_DHE_RSA,
    GNUTLS_KX_ANON_DH,
    GNUTLS_KX_SRP,
    GNUTLS_KX_RSA_EXPORT,
    GNUTLS_KX_SRP_RSA,
    GNUTLS_KX_SRP_DSS,
    GNUTLS_KX_PSK,
    GNUTLS_KX_DHE_PSK
  } gnutls_kx_algorithm_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-params-type-t" role="enum"/>enum gnutls_params_type_t</title>
<indexterm><primary>gnutls_params_type_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_PARAMS_RSA_EXPORT = 1,
    GNUTLS_PARAMS_DH
  } gnutls_params_type_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-credentials-type-t" role="enum"/>enum gnutls_credentials_type_t</title>
<indexterm><primary>gnutls_credentials_type_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_CRD_CERTIFICATE = 1,
    GNUTLS_CRD_ANON,
    GNUTLS_CRD_SRP,
    GNUTLS_CRD_PSK,
    GNUTLS_CRD_IA
  } gnutls_credentials_type_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-MAC-SHA:CAPS" role="macro"/>GNUTLS_MAC_SHA</title>
<indexterm><primary>GNUTLS_MAC_SHA</primary></indexterm><programlisting>#define             GNUTLS_MAC_SHA</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-DIG-SHA:CAPS" role="macro"/>GNUTLS_DIG_SHA</title>
<indexterm><primary>GNUTLS_DIG_SHA</primary></indexterm><programlisting>#define             GNUTLS_DIG_SHA</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-mac-algorithm-t" role="enum"/>enum gnutls_mac_algorithm_t</title>
<indexterm><primary>gnutls_mac_algorithm_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_MAC_UNKNOWN = 0,
    GNUTLS_MAC_NULL = 1,
    GNUTLS_MAC_MD5,
    GNUTLS_MAC_SHA1,
    GNUTLS_MAC_RMD160,
    GNUTLS_MAC_MD2,
    GNUTLS_MAC_SHA256,
    GNUTLS_MAC_SHA384,
    GNUTLS_MAC_SHA512
  } gnutls_mac_algorithm_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-digest-algorithm-t" role="enum"/>enum gnutls_digest_algorithm_t</title>
<indexterm><primary>gnutls_digest_algorithm_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_DIG_NULL = GNUTLS_MAC_NULL,
    GNUTLS_DIG_MD5 = GNUTLS_MAC_MD5,
    GNUTLS_DIG_SHA1 = GNUTLS_MAC_SHA1,
    GNUTLS_DIG_RMD160 = GNUTLS_MAC_RMD160,
    GNUTLS_DIG_MD2 = GNUTLS_MAC_MD2,
    GNUTLS_DIG_SHA256 = GNUTLS_MAC_SHA256,
    GNUTLS_DIG_SHA384 = GNUTLS_MAC_SHA384,
    GNUTLS_DIG_SHA512 = GNUTLS_MAC_SHA512
  } gnutls_digest_algorithm_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-MAX-ALGORITHM-NUM:CAPS" role="macro"/>GNUTLS_MAX_ALGORITHM_NUM</title>
<indexterm><primary>GNUTLS_MAX_ALGORITHM_NUM</primary></indexterm><programlisting>#define             GNUTLS_MAX_ALGORITHM_NUM</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-COMP-ZLIB:CAPS" role="macro"/>GNUTLS_COMP_ZLIB</title>
<indexterm><primary>GNUTLS_COMP_ZLIB</primary></indexterm><programlisting>#define             GNUTLS_COMP_ZLIB</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-compression-method-t" role="enum"/>enum gnutls_compression_method_t</title>
<indexterm><primary>gnutls_compression_method_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_COMP_UNKNOWN = 0,
    GNUTLS_COMP_NULL = 1,
    GNUTLS_COMP_DEFLATE,
    GNUTLS_COMP_LZO		/* only available if gnutls-extra has
				   been initialized
				 */
  } gnutls_compression_method_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-connection-end-t" role="enum"/>enum gnutls_connection_end_t</title>
<indexterm><primary>gnutls_connection_end_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_SERVER = 1,
    GNUTLS_CLIENT
  } gnutls_connection_end_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-alert-level-t" role="enum"/>enum gnutls_alert_level_t</title>
<indexterm><primary>gnutls_alert_level_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_AL_WARNING = 1,
    GNUTLS_AL_FATAL
  } gnutls_alert_level_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-alert-description-t" role="enum"/>enum gnutls_alert_description_t</title>
<indexterm><primary>gnutls_alert_description_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_A_CLOSE_NOTIFY,
    GNUTLS_A_UNEXPECTED_MESSAGE = 10,
    GNUTLS_A_BAD_RECORD_MAC = 20,
    GNUTLS_A_DECRYPTION_FAILED,
    GNUTLS_A_RECORD_OVERFLOW,
    GNUTLS_A_DECOMPRESSION_FAILURE = 30,
    GNUTLS_A_HANDSHAKE_FAILURE = 40,
    GNUTLS_A_SSL3_NO_CERTIFICATE = 41,
    GNUTLS_A_BAD_CERTIFICATE = 42,
    GNUTLS_A_UNSUPPORTED_CERTIFICATE,
    GNUTLS_A_CERTIFICATE_REVOKED,
    GNUTLS_A_CERTIFICATE_EXPIRED,
    GNUTLS_A_CERTIFICATE_UNKNOWN,
    GNUTLS_A_ILLEGAL_PARAMETER,
    GNUTLS_A_UNKNOWN_CA,
    GNUTLS_A_ACCESS_DENIED,
    GNUTLS_A_DECODE_ERROR = 50,
    GNUTLS_A_DECRYPT_ERROR,
    GNUTLS_A_EXPORT_RESTRICTION = 60,
    GNUTLS_A_PROTOCOL_VERSION = 70,
    GNUTLS_A_INSUFFICIENT_SECURITY,
    GNUTLS_A_INTERNAL_ERROR = 80,
    GNUTLS_A_USER_CANCELED = 90,
    GNUTLS_A_NO_RENEGOTIATION = 100,
    GNUTLS_A_UNSUPPORTED_EXTENSION = 110,
    GNUTLS_A_CERTIFICATE_UNOBTAINABLE = 111,
    GNUTLS_A_UNRECOGNIZED_NAME = 112,
    GNUTLS_A_UNKNOWN_PSK_IDENTITY = 115,
    GNUTLS_A_INNER_APPLICATION_FAILURE = 208,
    GNUTLS_A_INNER_APPLICATION_VERIFICATION = 209
  } gnutls_alert_description_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-handshake-description-t" role="enum"/>enum gnutls_handshake_description_t</title>
<indexterm><primary>gnutls_handshake_description_t</primary></indexterm><programlisting>  typedef enum
  { GNUTLS_HANDSHAKE_HELLO_REQUEST = 0,
    GNUTLS_HANDSHAKE_CLIENT_HELLO = 1,
    GNUTLS_HANDSHAKE_SERVER_HELLO = 2,
    GNUTLS_HANDSHAKE_CERTIFICATE_PKT = 11,
    GNUTLS_HANDSHAKE_SERVER_KEY_EXCHANGE = 12,
    GNUTLS_HANDSHAKE_CERTIFICATE_REQUEST = 13,
    GNUTLS_HANDSHAKE_SERVER_HELLO_DONE = 14,
    GNUTLS_HANDSHAKE_CERTIFICATE_VERIFY = 15,
    GNUTLS_HANDSHAKE_CLIENT_KEY_EXCHANGE = 16,
    GNUTLS_HANDSHAKE_FINISHED = 20,
    GNUTLS_HANDSHAKE_SUPPLEMENTAL = 23
  } gnutls_handshake_description_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-status-t" role="enum"/>enum gnutls_certificate_status_t</title>
<indexterm><primary>gnutls_certificate_status_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_CERT_INVALID = 2,	/* will be set if the certificate
				 * was not verified.
				 */
    GNUTLS_CERT_REVOKED = 32,	/* in X.509 this will be set only if CRLs are checked
				 */

    /* Those are extra information about the verification
     * process. Will be set only if the certificate was 
     * not verified.
     */
    GNUTLS_CERT_SIGNER_NOT_FOUND = 64,
    GNUTLS_CERT_SIGNER_NOT_CA = 128,
    GNUTLS_CERT_INSECURE_ALGORITHM = 256
  } gnutls_certificate_status_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-request-t" role="enum"/>enum gnutls_certificate_request_t</title>
<indexterm><primary>gnutls_certificate_request_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_CERT_IGNORE,
    GNUTLS_CERT_REQUEST = 1,
    GNUTLS_CERT_REQUIRE
  } gnutls_certificate_request_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-openpgp-crt-status-t" role="enum"/>enum gnutls_openpgp_crt_status_t</title>
<indexterm><primary>gnutls_openpgp_crt_status_t</primary></indexterm><programlisting>  typedef enum
  { GNUTLS_OPENPGP_CERT,
    GNUTLS_OPENPGP_CERT_FINGERPRINT
  } gnutls_openpgp_crt_status_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-close-request-t" role="enum"/>enum gnutls_close_request_t</title>
<indexterm><primary>gnutls_close_request_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_SHUT_RDWR = 0,
    GNUTLS_SHUT_WR = 1
  } gnutls_close_request_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-TLS1:CAPS" role="macro"/>GNUTLS_TLS1</title>
<indexterm><primary>GNUTLS_TLS1</primary></indexterm><programlisting>#define             GNUTLS_TLS1</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-protocol-t" role="enum"/>enum gnutls_protocol_t</title>
<indexterm><primary>gnutls_protocol_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_SSL3 = 1,
    GNUTLS_TLS1_0,
    GNUTLS_TLS1_1,
    GNUTLS_TLS1_2,
    GNUTLS_VERSION_UNKNOWN = 0xff
  } gnutls_protocol_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-type-t" role="enum"/>enum gnutls_certificate_type_t</title>
<indexterm><primary>gnutls_certificate_type_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_CRT_UNKNOWN = 0,
    GNUTLS_CRT_X509 = 1,
    GNUTLS_CRT_OPENPGP
  } gnutls_certificate_type_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-x509-crt-fmt-t" role="enum"/>enum gnutls_x509_crt_fmt_t</title>
<indexterm><primary>gnutls_x509_crt_fmt_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_X509_FMT_DER,
    GNUTLS_X509_FMT_PEM
  } gnutls_x509_crt_fmt_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-pk-algorithm-t" role="enum"/>enum gnutls_pk_algorithm_t</title>
<indexterm><primary>gnutls_pk_algorithm_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_PK_UNKNOWN = 0,
    GNUTLS_PK_RSA = 1,
    GNUTLS_PK_DSA
  } gnutls_pk_algorithm_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-pk-algorithm-get-name" role="function"/>gnutls_pk_algorithm_get_name ()</title>
<indexterm><primary>gnutls_pk_algorithm_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link>*         gnutls_pk_algorithm_get_name        (<link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link> algorithm);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GNUTLS-SIGN-RSA-SHA:CAPS" role="macro"/>GNUTLS_SIGN_RSA_SHA</title>
<indexterm><primary>GNUTLS_SIGN_RSA_SHA</primary></indexterm><programlisting>#define             GNUTLS_SIGN_RSA_SHA</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-SIGN-DSA-SHA:CAPS" role="macro"/>GNUTLS_SIGN_DSA_SHA</title>
<indexterm><primary>GNUTLS_SIGN_DSA_SHA</primary></indexterm><programlisting>#define             GNUTLS_SIGN_DSA_SHA</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-sign-algorithm-t" role="enum"/>enum gnutls_sign_algorithm_t</title>
<indexterm><primary>gnutls_sign_algorithm_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_SIGN_UNKNOWN = 0,
    GNUTLS_SIGN_RSA_SHA1 = 1,
    GNUTLS_SIGN_DSA_SHA1,
    GNUTLS_SIGN_RSA_MD5,
    GNUTLS_SIGN_RSA_MD2,
    GNUTLS_SIGN_RSA_RMD160,
    GNUTLS_SIGN_RSA_SHA256,
    GNUTLS_SIGN_RSA_SHA384,
    GNUTLS_SIGN_RSA_SHA512
  } gnutls_sign_algorithm_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-sign-algorithm-get-name" role="function"/>gnutls_sign_algorithm_get_name ()</title>
<indexterm><primary>gnutls_sign_algorithm_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link>*         gnutls_sign_algorithm_get_name      (<link linkend="gnutls-sign-algorithm-talgorithm">gnutls_sign_algorithm_talgorithm</link> );</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-transport-ptr-t" role="typedef"/>gnutls_transport_ptr_t</title>
<indexterm><primary>gnutls_transport_ptr_t</primary></indexterm><para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-session-int" role="struct"/>struct gnutls_session_int</title>
<indexterm><primary>gnutls_session_int</primary></indexterm><programlisting>struct gnutls_session_int;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-session-t" role="typedef"/>gnutls_session_t</title>
<indexterm><primary>gnutls_session_t</primary></indexterm><para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-dh-params-int" role="struct"/>struct gnutls_dh_params_int</title>
<indexterm><primary>gnutls_dh_params_int</primary></indexterm><programlisting>struct gnutls_dh_params_int;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-dh-params-t" role="typedef"/>gnutls_dh_params_t</title>
<indexterm><primary>gnutls_dh_params_t</primary></indexterm><para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-x509-privkey-int" role="struct"/>struct gnutls_x509_privkey_int</title>
<indexterm><primary>gnutls_x509_privkey_int</primary></indexterm><programlisting>struct gnutls_x509_privkey_int;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-rsa-params-t" role="typedef"/>gnutls_rsa_params_t</title>
<indexterm><primary>gnutls_rsa_params_t</primary></indexterm><para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-priority-st" role="struct"/>struct gnutls_priority_st</title>
<indexterm><primary>gnutls_priority_st</primary></indexterm><programlisting>struct gnutls_priority_st;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-priority-t" role="typedef"/>gnutls_priority_t</title>
<indexterm><primary>gnutls_priority_t</primary></indexterm><para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-init" role="function"/>gnutls_init ()</title>
<indexterm><primary>gnutls_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_init                         (<link linkend="gnutls-session-t">gnutls_session_t</link> *session,
                                                         <link linkend="gnutls-connection-end-t">gnutls_connection_end_t</link> con_end);</programlisting>
<para>
This function initializes the current session to null. Every
session must be initialized before use, so internal structures can
be allocated.  This function allocates structures which can only
be free'd by calling <link linkend="gnutls-deinit"><function>gnutls_deinit()</function></link>.  Returns zero on success.
</para>
<para>
<parameter>con_end</parameter> can be one of <link linkend="GNUTLS-CLIENT:CAPS"><literal>GNUTLS_CLIENT</literal></link> and <link linkend="GNUTLS-SERVER:CAPS"><literal>GNUTLS_SERVER</literal></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>con_end</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-deinit" role="function"/>gnutls_deinit ()</title>
<indexterm><primary>gnutls_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_deinit                       (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function clears all buffers associated with the <parameter>session</parameter>.
This function will also remove session data from the session
database if the session was terminated abnormally.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-bye" role="function"/>gnutls_bye ()</title>
<indexterm><primary>gnutls_bye</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_bye                          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-close-request-t">gnutls_close_request_t</link> how);</programlisting>
<para>
Terminates the current TLS/SSL connection. The connection should
have been initiated using <link linkend="gnutls-handshake"><function>gnutls_handshake()</function></link>.  <parameter>how</parameter> should be one
of <link linkend="GNUTLS-SHUT-RDWR:CAPS"><literal>GNUTLS_SHUT_RDWR</literal></link>, <link linkend="GNUTLS-SHUT-WR:CAPS"><literal>GNUTLS_SHUT_WR</literal></link>.
</para>
<para>
In case of <link linkend="GNUTLS-SHUT-RDWR:CAPS"><literal>GNUTLS_SHUT_RDWR</literal></link> then the TLS connection gets
terminated and further receives and sends will be disallowed.  If
the return value is zero you may continue using the connection.
<link linkend="GNUTLS-SHUT-RDWR:CAPS"><literal>GNUTLS_SHUT_RDWR</literal></link> actually sends an alert containing a close
request and waits for the peer to reply with the same message.
</para>
<para>
In case of <link linkend="GNUTLS-SHUT-WR:CAPS"><literal>GNUTLS_SHUT_WR</literal></link> then the TLS connection gets terminated
and further sends will be disallowed. In order to reuse the
connection you should wait for an EOF from the peer.
<link linkend="GNUTLS-SHUT-WR:CAPS"><literal>GNUTLS_SHUT_WR</literal></link> sends an alert containing a close request.
</para>
<para>
Note that not all implementations will properly terminate a TLS
connection.  Some of them, usually for performance reasons, will
terminate only the underlying transport layer, thus causing a
transmission error to the peer.  This error cannot be
distinguished from a malicious party prematurely terminating the
session, thus this behavior is not recommended.
</para>
<para>
This function may also return <link linkend="GNUTLS-E-AGAIN:CAPS"><literal>GNUTLS_E_AGAIN</literal></link> or
<link linkend="GNUTLS-E-INTERRUPTED:CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link>; cf.  <link linkend="gnutls-record-get-direction"><function>gnutls_record_get_direction()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>how</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-handshake" role="function"/>gnutls_handshake ()</title>
<indexterm><primary>gnutls_handshake</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_handshake                    (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function does the handshake of the TLS/SSL protocol, and
initializes the TLS connection.
</para>
<para>
This function will fail if any problem is encountered, and will
return a negative error code. In case of a client, if the client
has asked to resume a session, but the server couldn't, then a
full handshake will be performed.
</para>
<para>
The non-fatal errors such as <link linkend="GNUTLS-E-AGAIN:CAPS"><literal>GNUTLS_E_AGAIN</literal></link> and
<link linkend="GNUTLS-E-INTERRUPTED:CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link> interrupt the handshake procedure, which
should be later be resumed.  Call this function again, until it
returns 0; cf.  <link linkend="gnutls-record-get-direction"><function>gnutls_record_get_direction()</function></link> and
<link linkend="gnutls-error-is-fatal"><function>gnutls_error_is_fatal()</function></link>.
</para>
<para>
If this function is called by a server after a rehandshake request
then <link linkend="GNUTLS-E-GOT-APPLICATION-DATA:CAPS"><literal>GNUTLS_E_GOT_APPLICATION_DATA</literal></link> or
<link linkend="GNUTLS-E-WARNING-ALERT-RECEIVED:CAPS"><literal>GNUTLS_E_WARNING_ALERT_RECEIVED</literal></link> may be returned.  Note that these
are non fatal errors, only in the specific case of a rehandshake.
Their meaning is that the client rejected the rehandshake request.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-rehandshake" role="function"/>gnutls_rehandshake ()</title>
<indexterm><primary>gnutls_rehandshake</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_rehandshake                  (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function will renegotiate security parameters with the
client.  This should only be called in case of a server.
</para>
<para>
This message informs the peer that we want to renegotiate
parameters (perform a handshake).
</para>
<para>
If this function succeeds (returns 0), you must call the
<link linkend="gnutls-handshake"><function>gnutls_handshake()</function></link> function in order to negotiate the new
parameters.
</para>
<para>
If the client does not wish to renegotiate parameters he will
should with an alert message, thus the return code will be
<link linkend="GNUTLS-E-WARNING-ALERT-RECEIVED:CAPS"><literal>GNUTLS_E_WARNING_ALERT_RECEIVED</literal></link> and the alert will be
<link linkend="GNUTLS-A-NO-RENEGOTIATION:CAPS"><literal>GNUTLS_A_NO_RENEGOTIATION</literal></link>.  A client may also choose to ignore
this message.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-alert-get" role="function"/>gnutls_alert_get ()</title>
<indexterm><primary>gnutls_alert_get</primary></indexterm><programlisting><link linkend="gnutls-alert-description-t">gnutls_alert_description_t</link> gnutls_alert_get             (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function will return the last alert number received. This
function should be called if GNUTLS_E_WARNING_ALERT_RECEIVED or
GNUTLS_E_FATAL_ALERT_RECEIVED has been returned by a gnutls
function.  The peer may send alerts if he thinks some things were
not right. Check gnutls.h for the available alert descriptions.
</para>
<para>
If no alert has been received the returned value is undefined.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-alert-send" role="function"/>gnutls_alert_send ()</title>
<indexterm><primary>gnutls_alert_send</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_alert_send                   (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-alert-level-t">gnutls_alert_level_t</link> level,
                                                         <link linkend="gnutls-alert-description-t">gnutls_alert_description_t</link> desc);</programlisting>
<para>
This function will send an alert to the peer in order to inform
him of something important (eg. his Certificate could not be verified).
If the alert level is Fatal then the peer is expected to close the
connection, otherwise he may ignore the alert and continue.
</para>
<para>
The error code of the underlying record send function will be returned,
so you may also receive GNUTLS_E_INTERRUPTED or GNUTLS_E_AGAIN as well.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>level</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-alert-send-appropriate" role="function"/>gnutls_alert_send_appropriate ()</title>
<indexterm><primary>gnutls_alert_send_appropriate</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_alert_send_appropriate       (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> err);</programlisting>
<para>
Sends an alert to the peer depending on the error code returned by a gnutls
function. This function will call <link linkend="gnutls-error-to-alert"><function>gnutls_error_to_alert()</function></link> to determine
the appropriate alert to send.
</para>
<para>
This function may also return GNUTLS_E_AGAIN, or GNUTLS_E_INTERRUPTED.
</para>
<para>
If the return value is GNUTLS_E_INVALID_REQUEST, then no alert has
been sent to the peer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>err</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-alert-get-name" role="function"/>gnutls_alert_get_name ()</title>
<indexterm><primary>gnutls_alert_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link>*         gnutls_alert_get_name               (<link linkend="gnutls-alert-description-t">gnutls_alert_description_t</link> alert);</programlisting>
<para>
This function will return a string that describes the given alert
number or NULL.  See <link linkend="gnutls-alert-get"><function>gnutls_alert_get()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>alert</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-cipher-get" role="function"/>gnutls_cipher_get ()</title>
<indexterm><primary>gnutls_cipher_get</primary></indexterm><programlisting><link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link> gnutls_cipher_get             (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-kx-get" role="function"/>gnutls_kx_get ()</title>
<indexterm><primary>gnutls_kx_get</primary></indexterm><programlisting><link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link> gnutls_kx_get                     (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-mac-get" role="function"/>gnutls_mac_get ()</title>
<indexterm><primary>gnutls_mac_get</primary></indexterm><programlisting><link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link> gnutls_mac_get                   (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-compression-get" role="function"/>gnutls_compression_get ()</title>
<indexterm><primary>gnutls_compression_get</primary></indexterm><programlisting><link linkend="gnutls-compression-method-t">gnutls_compression_method_t</link> gnutls_compression_get      (<link linkend="gnutls-session-tsession">gnutls_session_tsession</link> );</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-type-get" role="function"/>gnutls_certificate_type_get ()</title>
<indexterm><primary>gnutls_certificate_type_get</primary></indexterm><programlisting><link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link> gnutls_certificate_type_get   (<link linkend="gnutls-session-tsession">gnutls_session_tsession</link> );</programlisting>
<para>
The certificate type is by default X.509, unless it is negotiated
as a TLS extension.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-cipher-get-key-size" role="function"/>gnutls_cipher_get_key_size ()</title>
<indexterm><primary>gnutls_cipher_get_key_size</primary></indexterm><programlisting><link linkend="size-t">size_t</link>              gnutls_cipher_get_key_size          (<link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link> algorithm);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-mac-get-key-size" role="function"/>gnutls_mac_get_key_size ()</title>
<indexterm><primary>gnutls_mac_get_key_size</primary></indexterm><programlisting><link linkend="size-t">size_t</link>              gnutls_mac_get_key_size             (<link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link> algorithm);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-cipher-get-name" role="function"/>gnutls_cipher_get_name ()</title>
<indexterm><primary>gnutls_cipher_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link>*         gnutls_cipher_get_name              (<link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link> algorithm);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-mac-get-name" role="function"/>gnutls_mac_get_name ()</title>
<indexterm><primary>gnutls_mac_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link>*         gnutls_mac_get_name                 (<link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link> algorithm);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-compression-get-name" role="function"/>gnutls_compression_get_name ()</title>
<indexterm><primary>gnutls_compression_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link>*         gnutls_compression_get_name         (<link linkend="gnutls-compression-method-talgorithm">gnutls_compression_method_talgorithm</link> );</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-kx-get-name" role="function"/>gnutls_kx_get_name ()</title>
<indexterm><primary>gnutls_kx_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link>*         gnutls_kx_get_name                  (<link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link> algorithm);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-type-get-name" role="function"/>gnutls_certificate_type_get_name ()</title>
<indexterm><primary>gnutls_certificate_type_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link>*         gnutls_certificate_type_get_name    (<link linkend="gnutls-certificate-type-ttype">gnutls_certificate_type_ttype</link> );</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-mac-get-id" role="function"/>gnutls_mac_get_id ()</title>
<indexterm><primary>gnutls_mac_get_id</primary></indexterm><programlisting><link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link> gnutls_mac_get_id                (const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-compression-get-id" role="function"/>gnutls_compression_get_id ()</title>
<indexterm><primary>gnutls_compression_get_id</primary></indexterm><programlisting><link linkend="gnutls-compression-method-t">gnutls_compression_method_t</link> gnutls_compression_get_id   (const <link linkend="char">char</link> *name);</programlisting>
<para>
The names are compared in a case insensitive way.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-cipher-get-id" role="function"/>gnutls_cipher_get_id ()</title>
<indexterm><primary>gnutls_cipher_get_id</primary></indexterm><programlisting><link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link> gnutls_cipher_get_id          (const <link linkend="char">char</link> *name);</programlisting>
<para>
The names are compared in a case insensitive way.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-kx-get-id" role="function"/>gnutls_kx_get_id ()</title>
<indexterm><primary>gnutls_kx_get_id</primary></indexterm><programlisting><link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link> gnutls_kx_get_id                  (const <link linkend="char">char</link> *name);</programlisting>
<para>
The names are compared in a case insensitive way.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-protocol-get-id" role="function"/>gnutls_protocol_get_id ()</title>
<indexterm><primary>gnutls_protocol_get_id</primary></indexterm><programlisting><link linkend="gnutls-protocol-t">gnutls_protocol_t</link>   gnutls_protocol_get_id              (const <link linkend="char">char</link> *name);</programlisting>
<para>
The names are compared in a case insensitive way.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-type-get-id" role="function"/>gnutls_certificate_type_get_id ()</title>
<indexterm><primary>gnutls_certificate_type_get_id</primary></indexterm><programlisting><link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link> gnutls_certificate_type_get_id
                                                        (const <link linkend="char">char</link> *name);</programlisting>
<para>
The names are compared in a case insensitive way.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-cipher-list" role="function"/>gnutls_cipher_list ()</title>
<indexterm><primary>gnutls_cipher_list</primary></indexterm><programlisting>const <link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link>* gnutls_cipher_list     (void);</programlisting>
<para>
Get a list of supported cipher algorithms.  Note that not
necessarily all ciphers are supported as TLS cipher suites.  For
example, DES is not supported as a cipher suite, but is supported
for other purposes (e.g., PKCS<link linkend="8:CAPS"><type>8</type></link> or similar).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-mac-list" role="function"/>gnutls_mac_list ()</title>
<indexterm><primary>gnutls_mac_list</primary></indexterm><programlisting>const <link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link>* gnutls_mac_list           (void);</programlisting>
<para>
Get a list of hash algorithms for use as MACs.  Note that not
necessarily all MACs are supported in TLS cipher suites.  For
example, MD2 is not supported as a cipher suite, but is supported
for other purposes (e.g., X.509 signature verification or similar).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-compression-list" role="function"/>gnutls_compression_list ()</title>
<indexterm><primary>gnutls_compression_list</primary></indexterm><programlisting>const <link linkend="gnutls-compression-method-t">gnutls_compression_method_t</link>* gnutls_compression_list
                                                        (void);</programlisting>
<para>
Get a list of compression methods.  Note that to be able to use LZO
compression, you must link to libgnutls-extra and call
<link linkend="gnutls-global-init-extra"><function>gnutls_global_init_extra()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-protocol-list" role="function"/>gnutls_protocol_list ()</title>
<indexterm><primary>gnutls_protocol_list</primary></indexterm><programlisting>const <link linkend="gnutls-protocol-t">gnutls_protocol_t</link>* gnutls_protocol_list           (void);</programlisting>
<para>
Get a list of supported protocols, e.g. SSL 3.0, TLS 1.0 etc.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-type-list" role="function"/>gnutls_certificate_type_list ()</title>
<indexterm><primary>gnutls_certificate_type_list</primary></indexterm><programlisting>const <link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link>* gnutls_certificate_type_list
                                                        (void);</programlisting>
<para>
Get a list of certificate types.  Note that to be able to use
OpenPGP certificates, you must link to libgnutls-extra and call
<link linkend="gnutls-global-init-extra"><function>gnutls_global_init_extra()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-kx-list" role="function"/>gnutls_kx_list ()</title>
<indexterm><primary>gnutls_kx_list</primary></indexterm><programlisting>const <link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link>* gnutls_kx_list             (void);</programlisting>
<para>
Get a list of supported key exchange algorithms.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-cipher-suite-info" role="function"/>gnutls_cipher_suite_info ()</title>
<indexterm><primary>gnutls_cipher_suite_info</primary></indexterm><programlisting>const <link linkend="char">char</link>*         gnutls_cipher_suite_info            (<link linkend="size-t">size_t</link> i,
                                                         <link linkend="char">char</link> *id,
                                                         <link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link> *kx,
                                                         <link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link> *cipher,
                                                         <link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link> *mac,
                                                         <link linkend="gnutls-protocol-t">gnutls_protocol_t</link> *version);</programlisting>
<para>
Get information about supported cipher suites.  Use the function
iteratively to get information about all supported cipher suites.
Call with idx=0 to get information about first cipher suite, then
idx=1 and so on until the function returns NULL.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>i</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>kx</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cipher</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mac</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>version</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-error-is-fatal" role="function"/>gnutls_error_is_fatal ()</title>
<indexterm><primary>gnutls_error_is_fatal</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_error_is_fatal               (<link linkend="int">int</link> error);</programlisting>
<para>
If a function returns a negative value you may feed that value
to this function to see if it is fatal. Returns 1 for a fatal 
error 0 otherwise. However you may want to check the
error code manually, since some non-fatal errors to the protocol
may be fatal for you (your program).
</para>
<para>
This is only useful if you are dealing with errors from the
record layer or the handshake layer.
</para>
<para>
For positive <parameter>error</parameter> values, 0 is returned.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-error-to-alert" role="function"/>gnutls_error_to_alert ()</title>
<indexterm><primary>gnutls_error_to_alert</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_error_to_alert               (<link linkend="int">int</link> err,
                                                         <link linkend="int">int</link> *level);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>err</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>level</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-perror" role="function"/>gnutls_perror ()</title>
<indexterm><primary>gnutls_perror</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_perror                       (<link linkend="int">int</link> error);</programlisting>
<para>
This function is like <link linkend="perror"><function>perror()</function></link>. The only difference is that it accepts an 
error number returned by a gnutls function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-strerror" role="function"/>gnutls_strerror ()</title>
<indexterm><primary>gnutls_strerror</primary></indexterm><programlisting>const <link linkend="char">char</link>*         gnutls_strerror                     (<link linkend="int">int</link> error);</programlisting>
<para>
This function is similar to <link linkend="strerror"><function>strerror()</function></link>. Differences: it accepts an error
number returned by a gnutls function; In case of an unknown error
a descriptive string is sent instead of NULL.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-handshake-set-private-extensions" role="function"/>gnutls_handshake_set_private_extensions ()</title>
<indexterm><primary>gnutls_handshake_set_private_extensions</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_handshake_set_private_extensions
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> allow);</programlisting>
<para>
This function will enable or disable the use of private cipher
suites (the ones that start with 0xFF).  By default or if <parameter>allow</parameter>
is 0 then these cipher suites will not be advertized nor used.
</para>
<para>
Unless this function is called with the option to allow (1), then
no compression algorithms, like LZO.  That is because these
algorithms are not yet defined in any RFC or even internet draft.
</para>
<para>
Enabling the private ciphersuites when talking to other than
gnutls servers and clients may cause interoperability problems.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>allow</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-handshake-get-last-out" role="function"/>gnutls_handshake_get_last_out ()</title>
<indexterm><primary>gnutls_handshake_get_last_out</primary></indexterm><programlisting><link linkend="gnutls-handshake-description-t">gnutls_handshake_description_t</link> gnutls_handshake_get_last_out
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function is only useful to check where the last performed
handshake failed.  If the previous handshake succeed or was not
performed at all then no meaningful value will be returned.
</para>
<para>
Check <link linkend="gnutls-handshake-description-t"><literal>gnutls_handshake_description_t</literal></link> in gnutls.h for the
available handshake descriptions.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-handshake-get-last-in" role="function"/>gnutls_handshake_get_last_in ()</title>
<indexterm><primary>gnutls_handshake_get_last_in</primary></indexterm><programlisting><link linkend="gnutls-handshake-description-t">gnutls_handshake_description_t</link> gnutls_handshake_get_last_in
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function is only useful to check where the last performed
handshake failed.  If the previous handshake succeed or was not
performed at all then no meaningful value will be returned.
</para>
<para>
Check <link linkend="gnutls-handshake-description-t"><literal>gnutls_handshake_description_t</literal></link> in gnutls.h for the
available handshake descriptions.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-record-send" role="function"/>gnutls_record_send ()</title>
<indexterm><primary>gnutls_record_send</primary></indexterm><programlisting><link linkend="ssize-t">ssize_t</link>             gnutls_record_send                  (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> sizeofdata);</programlisting>
<para>
This function has the similar semantics with <link linkend="send"><function>send()</function></link>. The only
difference is that is accepts a GNUTLS session, and uses different
error codes.
</para>
<para>
Note that if the send buffer is full, <link linkend="send"><function>send()</function></link> will block this
function.  See the <link linkend="send"><function>send()</function></link> documentation for full information.  You
can replace the default push function by using
<link linkend="gnutls-transport-set-ptr2"><function>gnutls_transport_set_ptr2()</function></link> with a call to <link linkend="send"><function>send()</function></link> with a
MSG_DONTWAIT flag if blocking is a problem.
</para>
<para>
If the EINTR is returned by the internal push function (the
default is <link linkend="send"><function>send()</function></link>} then <link linkend="GNUTLS-E-INTERRUPTED:CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link> will be returned. If
<link linkend="GNUTLS-E-INTERRUPTED:CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link> or <link linkend="GNUTLS-E-AGAIN:CAPS"><literal>GNUTLS_E_AGAIN</literal></link> is returned, you must
call this function again, with the same parameters; alternatively
you could provide a <link linkend="NULL:CAPS"><literal>NULL</literal></link> pointer for data, and 0 for
size. cf. <link linkend="gnutls-record-get-direction"><function>gnutls_record_get_direction()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeofdata</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-record-recv" role="function"/>gnutls_record_recv ()</title>
<indexterm><primary>gnutls_record_recv</primary></indexterm><programlisting><link linkend="ssize-t">ssize_t</link>             gnutls_record_recv                  (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> sizeofdata);</programlisting>
<para>
This function has the similar semantics with <link linkend="recv"><function>recv()</function></link>. The only
difference is that is accepts a GNUTLS session, and uses different
error codes.
</para>
<para>
In the special case that a server requests a renegotiation, the
client may receive an error code of <link linkend="GNUTLS-E-REHANDSHAKE:CAPS"><literal>GNUTLS_E_REHANDSHAKE</literal></link>.  This
message may be simply ignored, replied with an alert containing
NO_RENEGOTIATION, or replied with a new handshake, depending on
the client's will.
</para>
<para>
If <link linkend="EINTR:CAPS"><literal>EINTR</literal></link> is returned by the internal push function (the default
is <link linkend="recv"><function>recv()</function></link>) then <link linkend="GNUTLS-E-INTERRUPTED:CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link> will be returned.  If
<link linkend="GNUTLS-E-INTERRUPTED:CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link> or <link linkend="GNUTLS-E-AGAIN:CAPS"><literal>GNUTLS_E_AGAIN</literal></link> is returned, you must
call this function again to get the data.  See also
<link linkend="gnutls-record-get-direction"><function>gnutls_record_get_direction()</function></link>.
</para>
<para>
A server may also receive <link linkend="GNUTLS-E-REHANDSHAKE:CAPS"><literal>GNUTLS_E_REHANDSHAKE</literal></link> when a client has
initiated a handshake. In that case the server can only initiate a
handshake or terminate the connection.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeofdata</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-read" role="macro"/>gnutls_read</title>
<indexterm><primary>gnutls_read</primary></indexterm><programlisting>#define             gnutls_read</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-write" role="macro"/>gnutls_write</title>
<indexterm><primary>gnutls_write</primary></indexterm><programlisting>#define             gnutls_write</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-session-enable-compatibility-mode" role="function"/>gnutls_session_enable_compatibility_mode ()</title>
<indexterm><primary>gnutls_session_enable_compatibility_mode</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_session_enable_compatibility_mode
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function can be used to disable certain (security) features
in TLS in order to maintain maximum compatibility with buggy
clients. It is equivalent to calling:
<link linkend="gnutls-record-disable-padding"><function>gnutls_record_disable_padding()</function></link>
</para>
<para>
Normally only servers that require maximum compatibility with
everything out there, need to call this function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-record-disable-padding" role="function"/>gnutls_record_disable_padding ()</title>
<indexterm><primary>gnutls_record_disable_padding</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_record_disable_padding       (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Used to disabled padding in TLS 1.0 and above.  Normally you do
not need to use this function, but there are buggy clients that
complain if a server pads the encrypted data.  This of course will
disable protection against statistical attacks on the data.
</para>
<para>
Normally only servers that require maximum compatibility with everything
out there, need to call this function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-record-get-direction" role="function"/>gnutls_record_get_direction ()</title>
<indexterm><primary>gnutls_record_get_direction</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_record_get_direction         (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function provides information about the internals of the
record protocol and is only useful if a prior gnutls function call
(e.g.  <link linkend="gnutls-handshake"><function>gnutls_handshake()</function></link>) was interrupted for some reason, that
is, if a function returned <link linkend="GNUTLS-E-INTERRUPTED:CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link> or
<link linkend="GNUTLS-E-AGAIN:CAPS"><literal>GNUTLS_E_AGAIN</literal></link>.  In such a case, you might want to call <link linkend="select"><function>select()</function></link>
or <link linkend="poll"><function>poll()</function></link> before calling the interrupted gnutls function again.
To tell you whether a file descriptor should be selected for
either reading or writing, <link linkend="gnutls-record-get-direction"><function>gnutls_record_get_direction()</function></link> returns 0
if the interrupted function was trying to read data, and 1 if it
was trying to write data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-record-get-max-size" role="function"/>gnutls_record_get_max_size ()</title>
<indexterm><primary>gnutls_record_get_max_size</primary></indexterm><programlisting><link linkend="size-t">size_t</link>              gnutls_record_get_max_size          (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function returns the maximum record packet size in this
connection.  The maximum record size is negotiated by the client
after the first handshake message.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-record-set-max-size" role="function"/>gnutls_record_set_max_size ()</title>
<indexterm><primary>gnutls_record_set_max_size</primary></indexterm><programlisting><link linkend="ssize-t">ssize_t</link>             gnutls_record_set_max_size          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="size-t">size_t</link> size);</programlisting>
<para>
This function sets the maximum record packet size in this
connection.  This property can only be set to clients.  The server
may choose not to accept the requested size.
</para>
<para>
Acceptable values are 512(=2^9), 1024(=2^10), 2048(=2^11) and
4096(=2^12).  Returns 0 on success. The requested record size does
get in effect immediately only while sending data. The receive
part will take effect after a successful handshake.
</para>
<para>
This function uses a TLS extension called 'max record size'.  Not
all TLS implementations use or even understand this extension.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-record-check-pending" role="function"/>gnutls_record_check_pending ()</title>
<indexterm><primary>gnutls_record_check_pending</primary></indexterm><programlisting><link linkend="size-t">size_t</link>              gnutls_record_check_pending         (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function checks if there are any data to receive
in the gnutls buffers. Returns the size of that data or 0.
Notice that you may also use <link linkend="select"><function>select()</function></link> to check for data in
a TCP connection, instead of this function.
(gnutls leaves some data in the tcp buffer in order for select
to work).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-prf" role="function"/>gnutls_prf ()</title>
<indexterm><primary>gnutls_prf</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_prf                          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="size-t">size_t</link> label_size,
                                                         const <link linkend="char">char</link> *label,
                                                         <link linkend="int">int</link> server_random_first,
                                                         <link linkend="size-t">size_t</link> extra_size,
                                                         const <link linkend="char">char</link> *extra,
                                                         <link linkend="size-t">size_t</link> outsize,
                                                         <link linkend="char">char</link> *out);</programlisting>
<para>
Apply the TLS Pseudo-Random-Function (PRF) using the master secret
on some data, seeded with the client and server random fields.
</para>
<para>
The <parameter>label</parameter> variable usually contain a string denoting the purpose
for the generated data.  The <parameter>server_random_first</parameter> indicate whether
the client random field or the server random field should be first
in the seed.  Non-0 indicate that the server random field is first,
0 that the client random field is first.
</para>
<para>
The <parameter>extra</parameter> variable can be used to add more data to the seed, after
the random variables.  It can be used to tie make sure the
generated output is strongly connected to some additional data
(e.g., a string used in user authentication).
</para>
<para>
The output is placed in *<parameter>OUT</parameter>, which must be pre-allocated.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>label_size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>label</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>server_random_first</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>extra_size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>extra</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>outsize</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-prf-raw" role="function"/>gnutls_prf_raw ()</title>
<indexterm><primary>gnutls_prf_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_prf_raw                      (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="size-t">size_t</link> label_size,
                                                         const <link linkend="char">char</link> *label,
                                                         <link linkend="size-t">size_t</link> seed_size,
                                                         const <link linkend="char">char</link> *seed,
                                                         <link linkend="size-t">size_t</link> outsize,
                                                         <link linkend="char">char</link> *out);</programlisting>
<para>
Apply the TLS Pseudo-Random-Function (PRF) using the master secret
on some data.
</para>
<para>
The <parameter>label</parameter> variable usually contain a string denoting the purpose
for the generated data.  The <parameter>seed</parameter> usually contain data such as the
client and server random, perhaps together with some additional
data that is added to guarantee uniqueness of the output for a
particular purpose.
</para>
<para>
Because the output is not guaranteed to be unique for a particular
session unless <parameter>seed</parameter> include the client random and server random
fields (the PRF would output the same data on another connection
resumed from the first one), it is not recommended to use this
function directly.  The <link linkend="gnutls-prf"><function>gnutls_prf()</function></link> function seed the PRF with the
client and server random fields directly, and is recommended if you
want to generate pseudo random data unique for each session.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>label_size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>label</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>seed_size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>seed</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>outsize</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-server-name-type-t" role="enum"/>enum gnutls_server_name_type_t</title>
<indexterm><primary>gnutls_server_name_type_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_NAME_DNS = 1
  } gnutls_server_name_type_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-server-name-set" role="function"/>gnutls_server_name_set ()</title>
<indexterm><primary>gnutls_server_name_set</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_server_name_set              (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-server-name-type-t">gnutls_server_name_type_t</link> type,
                                                         const <link linkend="void">void</link> *name,
                                                         <link linkend="size-t">size_t</link> name_length);</programlisting>
<para>
This function is to be used by clients that want to inform 
(via a TLS extension mechanism) the server of the name they
connected to. This should be used by clients that connect
to servers that do virtual hosting.
</para>
<para>
The value of <parameter>name</parameter> depends on the <parameter>ind</parameter> type. In case of GNUTLS_NAME_DNS,
an ASCII or UTF-8 null terminated string, without the trailing dot, is expected. 
IPv4 or IPv6 addresses are not permitted.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name_length</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-server-name-get" role="function"/>gnutls_server_name_get ()</title>
<indexterm><primary>gnutls_server_name_get</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_server_name_get              (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> *data_length,
                                                         unsigned <link linkend="int">int</link> *type,
                                                         unsigned <link linkend="int">int</link> indx);</programlisting>
<para>
This function will allow you to get the name indication (if any),
a client has sent. The name indication may be any of the enumeration
gnutls_server_name_type_t.
</para>
<para>
If <parameter>type</parameter> is GNUTLS_NAME_DNS, then this function is to be used by servers
that support virtual hosting, and the data will be a null terminated UTF-8 string.
</para>
<para>
If <parameter>data</parameter> has not enough size to hold the server name GNUTLS_E_SHORT_MEMORY_BUFFER
is returned, and <parameter>data_length</parameter> will hold the required size.
</para>
<para>
<parameter>index</parameter> is used to retrieve more than one server names (if sent by the client).
The first server name has an index of 0, the second 1 and so on. If no name with the given
index exists GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE is returned.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data_length</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-oprfi-enable-client" role="function"/>gnutls_oprfi_enable_client ()</title>
<indexterm><primary>gnutls_oprfi_enable_client</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_oprfi_enable_client          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="size-t">size_t</link> len,
                                                         unsigned <link linkend="char">char</link> *data);</programlisting>
<para>
Request that the client should attempt to negotiate the Opaque PRF
Input TLS extension, using the given data as the client's Opaque
PRF input.
</para>
<para>
The data is copied into the session context after this call, so you
may de-allocate it immediately after calling this function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-oprfi-callback-func" role="function"/>gnutls_oprfi_callback_func ()</title>
<indexterm><primary>gnutls_oprfi_callback_func</primary></indexterm><programlisting><link linkend="int">int</link>                 (*gnutls_oprfi_callback_func)       (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *userdata,
                                                         <link linkend="size-t">size_t</link> oprfi_len,
                                                         unsigned <link linkend="char">char</link> *in_oprfi,
                                                         unsigned <link linkend="char">char</link> *out_oprfi);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>userdata</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oprfi_len</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_oprfi</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_oprfi</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-oprfi-enable-server" role="function"/>gnutls_oprfi_enable_server ()</title>
<indexterm><primary>gnutls_oprfi_enable_server</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_oprfi_enable_server          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-oprfi-callback-func">gnutls_oprfi_callback_func</link> cb,
                                                         <link linkend="void">void</link> *userdata);</programlisting>
<para>
Request that the server should attempt to accept the Opaque PRF
Input TLS extension.  If the client requests the extension, the
provided callback <parameter>cb</parameter> will be invoked.  The callback must have the
following prototype:
</para>
<para>
int callback (gnutls_session_t session, void *userdata,
              size_t oprfi_len, const unsigned char *in_oprfi,
              unsigned char *out_oprfi);
</para>
<para>
The callback can inspect the client-provided data in the input
parameters, and specify its own opaque prf input data in the output
variable.  The function must return 0 on success, otherwise the
handshake will be aborted.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>userdata</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-supplemental-data-format-type-t" role="enum"/>enum gnutls_supplemental_data_format_type_t</title>
<indexterm><primary>gnutls_supplemental_data_format_type_t</primary></indexterm><programlisting>  typedef enum
    {
      GNUTLS_SUPPLEMENTAL_USER_MAPPING_DATA = 0
    } gnutls_supplemental_data_format_type_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-supplemental-get-name" role="function"/>gnutls_supplemental_get_name ()</title>
<indexterm><primary>gnutls_supplemental_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link>*         gnutls_supplemental_get_name        (<link linkend="gnutls-supplemental-data-format-type-t">gnutls_supplemental_data_format_type_t</link> type);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-cipher-set-priority" role="function"/>gnutls_cipher_set_priority ()</title>
<indexterm><primary>gnutls_cipher_set_priority</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_cipher_set_priority          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);</programlisting>
<para>
Sets the priority on the ciphers supported by gnutls.
Priority is higher for elements specified before others.
After specifying the ciphers you want, you must append a 0.
Note that the priority is set on the client. The server does
not use the algorithm's priority except for disabling
algorithms that were not specified.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-mac-set-priority" role="function"/>gnutls_mac_set_priority ()</title>
<indexterm><primary>gnutls_mac_set_priority</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_mac_set_priority             (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);</programlisting>
<para>
Sets the priority on the mac algorithms supported by gnutls.
Priority is higher for elements specified before others.
After specifying the algorithms you want, you must append a 0.
Note that the priority is set on the client. The server does
not use the algorithm's priority except for disabling
algorithms that were not specified.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-compression-set-priority" role="function"/>gnutls_compression_set_priority ()</title>
<indexterm><primary>gnutls_compression_set_priority</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_compression_set_priority     (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);</programlisting>
<para>
Sets the priority on the compression algorithms supported by gnutls.
Priority is higher for elements specified before others.
After specifying the algorithms you want, you must append a 0.
Note that the priority is set on the client. The server does
not use the algorithm's priority except for disabling
algorithms that were not specified.
</para>
<para>
TLS 1.0 does not define any compression algorithms except
NULL. Other compression algorithms are to be considered
as gnutls extensions.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-kx-set-priority" role="function"/>gnutls_kx_set_priority ()</title>
<indexterm><primary>gnutls_kx_set_priority</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_kx_set_priority              (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);</programlisting>
<para>
Sets the priority on the key exchange algorithms supported by gnutls.
Priority is higher for elements specified before others.
After specifying the algorithms you want, you must append a 0.
Note that the priority is set on the client. The server does
not use the algorithm's priority except for disabling
algorithms that were not specified.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-protocol-set-priority" role="function"/>gnutls_protocol_set_priority ()</title>
<indexterm><primary>gnutls_protocol_set_priority</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_protocol_set_priority        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);</programlisting>
<para>
Sets the priority on the protocol versions supported by gnutls.
This function actually enables or disables protocols. Newer protocol
versions always have highest priority.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-type-set-priority" role="function"/>gnutls_certificate_type_set_priority ()</title>
<indexterm><primary>gnutls_certificate_type_set_priority</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_type_set_priority
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);</programlisting>
<para>
Sets the priority on the certificate types supported by gnutls.
Priority is higher for elements specified before others.
After specifying the types you want, you must append a 0.
Note that the certificate type priority is set on the client. 
The server does not use the cert type priority except for disabling
types that were not specified.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-priority-init" role="function"/>gnutls_priority_init ()</title>
<indexterm><primary>gnutls_priority_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_priority_init                (<link linkend="gnutls-priority-t">gnutls_priority_t</link> *,
                                                         const <link linkend="char">char</link> *priority,
                                                         const <link linkend="char">char</link> **err_pos);</programlisting>
<para>
Sets priorities for the ciphers, key exchange methods, macs and
compression methods. This is to avoid using the
gnutls_*<link linkend="priority"><function>_priority()</function></link> functions.
</para>
<para>
The <link linkend="priorities"><type>priorities</type></link> option allows you to specify a semi-colon
separated list of the cipher priorities to enable.
</para>
<para>
Unless the first keyword is "NONE" the defaults are:
Protocols: TLS1.1, TLS1.0, and SSL3.0.
Compression: NULL.
Certificate types: X.509, OpenPGP.
</para>
<para>
You can also use predefined sets of ciphersuites: "PERFORMANCE"
all the "secure" ciphersuites are enabled, limited to 128 bit
ciphers and sorted by terms of speed performance.
</para>
<para>
"NORMAL" option enables all "secure" ciphersuites. The 256-bit ciphers
are included as a fallback only. The ciphers are sorted by security margin.
</para>
<para>
"SECURE128" flag enables all "secure" ciphersuites with ciphers up to 
128 bits, sorted by security margin.
</para>
<para>
"SECURE256" flag enables all "secure" ciphersuites including the 256 bit
ciphers, sorted by security margin.
</para>
<para>
"EXPORT" all the ciphersuites are enabled, including the
low-security 40 bit ciphers.
</para>
<para>
"NONE" nothing is enabled. This disables even protocols and
compression methods.
</para>
<para>
Special keywords:
'!' or '-' appended with an algorithm will remove this algorithm.
'+' appended with an algorithm will add this algorithm.
'<link linkend="COMPAT:CAPS"><literal>COMPAT</literal></link>' will enable compatibility features for a server.
</para>
<para>
To avoid collisions in order to specify a compression algorithm in
this string you have to prefix it with "COMP-", protocol versions
with "VERS-" and certificate types with "CTYPE-". All other
algorithms don't need a prefix.
</para>
<para>
For key exchange algorithms when in NORMAL or SECURE levels the
perfect forward secrecy algorithms take precendence of the other
protocols.  In all cases all the supported key exchange algorithms
are enabled (except for the RSA-EXPORT which is only enabled in
EXPORT level).
</para>
<para>
Note that although one can select very long key sizes (such as 256 bits) 
for symmetric algorithms, to actually increase security the public key
algorithms have to use longer key sizes as well.
</para>
<para>
Examples: "NORMAL:!AES-128-CBC",
"EXPORT:!VERS-TLS1.0:+COMP-DEFLATE:+CTYPE-OPENPGP",
"NONE:+VERS-TLS1.0:+AES-128-CBC:+RSA:+SHA1:+COMP-NULL", "NORMAL",
"NORMAL:<link linkend="COMPAT:CAPS"><literal>COMPAT</literal></link>".</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>priority</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>err_pos</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-priority-deinit" role="function"/>gnutls_priority_deinit ()</title>
<indexterm><primary>gnutls_priority_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_priority_deinit              (<link linkend="gnutls-priority-t">gnutls_priority_t</link> );</programlisting>
<para>
Deinitializes the priority cache.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-priority-set" role="function"/>gnutls_priority_set ()</title>
<indexterm><primary>gnutls_priority_set</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_priority_set                 (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-priority-t">gnutls_priority_t</link> );</programlisting>
<para>
Sets the priorities to use on the ciphers, key exchange methods,
macs and compression methods. 
</para>
<para>
On success 0 is returned.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-priority-set-direct" role="function"/>gnutls_priority_set_direct ()</title>
<indexterm><primary>gnutls_priority_set_direct</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_priority_set_direct          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="char">char</link> *priority,
                                                         const <link linkend="char">char</link> **err_pos);</programlisting>
<para>
Sets the priorities to use on the ciphers, key exchange methods,
macs and compression methods. This function avoids keeping a
priority cache and is used to directly set string priorities to a
TLS session.  For documentation check the <link linkend="gnutls-priority-init"><function>gnutls_priority_init()</function></link>.
</para>
<para>
On syntax error GNUTLS_E_INVALID_REQUEST is returned and 0 on success.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>priority</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>err_pos</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-set-default-priority" role="function"/>gnutls_set_default_priority ()</title>
<indexterm><primary>gnutls_set_default_priority</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_set_default_priority         (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Sets some default priority on the ciphers, key exchange methods,
macs and compression methods.
</para>
<para>
This is the same as calling:
</para>
<para>
gnutls_priority_set_direct (session, "NORMAL", NULL);
</para>
<para>
This function is kept around for backwards compatibility, but
because of its wide use it is still fully supported.  If you wish
to allow users to provide a string that specify which ciphers to
use (which is recommended), you should use
<link linkend="gnutls-priority-set-direct"><function>gnutls_priority_set_direct()</function></link> or <link linkend="gnutls-priority-set"><function>gnutls_priority_set()</function></link> instead.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-set-default-export-priority" role="function"/>gnutls_set_default_export_priority ()</title>
<indexterm><primary>gnutls_set_default_export_priority</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_set_default_export_priority  (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Sets some default priority on the ciphers, key exchange methods, macs
and compression methods.  This function also includes weak algorithms.
</para>
<para>
This is the same as calling:
</para>
<para>
gnutls_priority_set_direct (session, "EXPORT", NULL);
</para>
<para>
This function is kept around for backwards compatibility, but
because of its wide use it is still fully supported.  If you wish
to allow users to provide a string that specify which ciphers to
use (which is recommended), you should use
<link linkend="gnutls-priority-set-direct"><function>gnutls_priority_set_direct()</function></link> or <link linkend="gnutls-priority-set"><function>gnutls_priority_set()</function></link> instead.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-cipher-suite-get-name" role="function"/>gnutls_cipher_suite_get_name ()</title>
<indexterm><primary>gnutls_cipher_suite_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link>*         gnutls_cipher_suite_get_name        (<link linkend="gnutls-kx-algorithm-tkx-algorithm">gnutls_kx_algorithm_tkx_algorithm</link> ,
                                                         <link linkend="gnutls-cipher-algorithm-tcipher-algorithm">gnutls_cipher_algorithm_tcipher_algorithm</link> ,
                                                         <link linkend="gnutls-mac-algorithm-tmac-algorithm">gnutls_mac_algorithm_tmac_algorithm</link> );</programlisting>
<para>
Note that the full cipher suite name must be prepended by TLS or
SSL depending of the protocol in use.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param3</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-protocol-get-version" role="function"/>gnutls_protocol_get_version ()</title>
<indexterm><primary>gnutls_protocol_get_version</primary></indexterm><programlisting><link linkend="gnutls-protocol-t">gnutls_protocol_t</link>   gnutls_protocol_get_version         (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-protocol-get-name" role="function"/>gnutls_protocol_get_name ()</title>
<indexterm><primary>gnutls_protocol_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link>*         gnutls_protocol_get_name            (<link linkend="gnutls-protocol-t">gnutls_protocol_t</link> version);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>version</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-session-set-data" role="function"/>gnutls_session_set_data ()</title>
<indexterm><primary>gnutls_session_set_data</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_session_set_data             (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="void">void</link> *session_data,
                                                         <link linkend="size-t">size_t</link> session_data_size);</programlisting>
<para>
Sets all session parameters, in order to resume a previously established
session. The session data given must be the one returned by <link linkend="gnutls-session-get-data"><function>gnutls_session_get_data()</function></link>.
This function should be called before <link linkend="gnutls-handshake"><function>gnutls_handshake()</function></link>.
</para>
<para>
Keep in mind that session resuming is advisory. The server may
choose not to resume the session, thus a full handshake will be
performed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_data_size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-session-get-data" role="function"/>gnutls_session_get_data ()</title>
<indexterm><primary>gnutls_session_get_data</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_session_get_data             (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *session_data,
                                                         <link linkend="size-t">size_t</link> *session_data_size);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_data_size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-session-get-data2" role="function"/>gnutls_session_get_data2 ()</title>
<indexterm><primary>gnutls_session_get_data2</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_session_get_data2            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GNUTLS-MAX-SESSION-ID:CAPS" role="macro"/>GNUTLS_MAX_SESSION_ID</title>
<indexterm><primary>GNUTLS_MAX_SESSION_ID</primary></indexterm><programlisting>#define             GNUTLS_MAX_SESSION_ID</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-session-get-id" role="function"/>gnutls_session_get_id ()</title>
<indexterm><primary>gnutls_session_get_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_session_get_id               (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *session_id,
                                                         <link linkend="size-t">size_t</link> *session_id_size);</programlisting>
<para>
Returns the current session id. This can be used if you want to check if
the next session you tried to resume was actually resumed.
This is because resumed sessions have the same sessionID with the 
original session.
</para>
<para>
Session id is some data set by the server, that identify the current session. 
In TLS 1.0 and SSL 3.0 session id is always less than 32 bytes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_id</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_id_size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="TLS-MASTER-SIZE:CAPS" role="macro"/>TLS_MASTER_SIZE</title>
<indexterm><primary>TLS_MASTER_SIZE</primary></indexterm><programlisting>#define             TLS_MASTER_SIZE</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="TLS-RANDOM-SIZE:CAPS" role="macro"/>TLS_RANDOM_SIZE</title>
<indexterm><primary>TLS_RANDOM_SIZE</primary></indexterm><programlisting>#define             TLS_RANDOM_SIZE</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-session-get-server-random" role="function"/>gnutls_session_get_server_random ()</title>
<indexterm><primary>gnutls_session_get_server_random</primary></indexterm><programlisting>const <link linkend="void">void</link>*         gnutls_session_get_server_random    (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Return a pointer to the 32-byte server random field used in the
session.  The pointer must not be modified or deallocated.
</para>
<para>
If a server random value has not yet been established, the output
will be garbage; in particular, a <link linkend="NULL:CAPS"><literal>NULL</literal></link> return value should not be
expected.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-session-get-client-random" role="function"/>gnutls_session_get_client_random ()</title>
<indexterm><primary>gnutls_session_get_client_random</primary></indexterm><programlisting>const <link linkend="void">void</link>*         gnutls_session_get_client_random    (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Return a pointer to the 32-byte client random field used in the
session.  The pointer must not be modified or deallocated.
</para>
<para>
If a client random value has not yet been established, the output
will be garbage; in particular, a <link linkend="NULL:CAPS"><literal>NULL</literal></link> return value should not be
expected.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-session-get-master-secret" role="function"/>gnutls_session_get_master_secret ()</title>
<indexterm><primary>gnutls_session_get_master_secret</primary></indexterm><programlisting>const <link linkend="void">void</link>*         gnutls_session_get_master_secret    (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Return a pointer to the 48-byte master secret in the session.  The
pointer must not be modified or deallocated.
</para>
<para>
If a master secret value has not yet been established, the output
will be garbage; in particular, a <link linkend="NULL:CAPS"><literal>NULL</literal></link> return value should not be
expected.
</para>
<para>
Consider using <link linkend="gnutls-prf"><function>gnutls_prf()</function></link> rather than extracting the master
secret and use it to derive further data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-session-is-resumed" role="function"/>gnutls_session_is_resumed ()</title>
<indexterm><primary>gnutls_session_is_resumed</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_session_is_resumed           (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-db-store-func" role="function"/>gnutls_db_store_func ()</title>
<indexterm><primary>gnutls_db_store_func</primary></indexterm><programlisting><link linkend="int">int</link>                 (*gnutls_db_store_func)             (<link linkend="void">void</link> *,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> key,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-db-remove-func" role="function"/>gnutls_db_remove_func ()</title>
<indexterm><primary>gnutls_db_remove_func</primary></indexterm><programlisting><link linkend="int">int</link>                 (*gnutls_db_remove_func)            (<link linkend="void">void</link> *,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> key);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-db-retr-func" role="function"/>gnutls_db_retr_func ()</title>
<indexterm><primary>gnutls_db_retr_func</primary></indexterm><programlisting><link linkend="gnutls-datum-t">gnutls_datum_t</link>      (*gnutls_db_retr_func)              (<link linkend="void">void</link> *,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> key);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-db-set-cache-expiration" role="function"/>gnutls_db_set_cache_expiration ()</title>
<indexterm><primary>gnutls_db_set_cache_expiration</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_db_set_cache_expiration      (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> seconds);</programlisting>
<para>
Sets the expiration time for resumed sessions. The default is 3600 (one hour)
at the time writing this.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>seconds</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-db-remove-session" role="function"/>gnutls_db_remove_session ()</title>
<indexterm><primary>gnutls_db_remove_session</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_db_remove_session            (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function will remove the current session data from the session
database. This will prevent future handshakes reusing these session
data. This function should be called if a session was terminated
abnormally, and before <link linkend="gnutls-deinit"><function>gnutls_deinit()</function></link> is called.
</para>
<para>
Normally <link linkend="gnutls-deinit"><function>gnutls_deinit()</function></link> will remove abnormally terminated sessions.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-db-set-retrieve-function" role="function"/>gnutls_db_set_retrieve_function ()</title>
<indexterm><primary>gnutls_db_set_retrieve_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_db_set_retrieve_function     (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-db-retr-func">gnutls_db_retr_func</link> retr_func);</programlisting>
<para>
Sets the function that will be used to retrieve data from the resumed
sessions database. This function must return a gnutls_datum_t containing the
data on success, or a gnutls_datum_t containing null and 0 on failure.
</para>
<para>
The datum's data must be allocated using the function
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link>.
</para>
<para>
The first argument to <link linkend="retr-func"><function>retr_func()</function></link> will be null unless <link linkend="gnutls-db-set-ptr"><function>gnutls_db_set_ptr()</function></link> 
has been called.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>retr_func</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-db-set-remove-function" role="function"/>gnutls_db_set_remove_function ()</title>
<indexterm><primary>gnutls_db_set_remove_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_db_set_remove_function       (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-db-remove-func">gnutls_db_remove_func</link> rem_func);</programlisting>
<para>
Sets the function that will be used to remove data from the resumed
sessions database. This function must return 0 on success.
</para>
<para>
The first argument to <link linkend="rem-func"><function>rem_func()</function></link> will be null unless <link linkend="gnutls-db-set-ptr"><function>gnutls_db_set_ptr()</function></link> 
has been called.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rem_func</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-db-set-store-function" role="function"/>gnutls_db_set_store_function ()</title>
<indexterm><primary>gnutls_db_set_store_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_db_set_store_function        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-db-store-func">gnutls_db_store_func</link> store_func);</programlisting>
<para>
Sets the function that will be used to store data from the resumed
sessions database. This function must remove 0 on success. 
</para>
<para>
The first argument to <link linkend="store-func"><function>store_func()</function></link> will be null unless <link linkend="gnutls-db-set-ptr"><function>gnutls_db_set_ptr()</function></link> 
has been called.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>store_func</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-db-set-ptr" role="function"/>gnutls_db_set_ptr ()</title>
<indexterm><primary>gnutls_db_set_ptr</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_db_set_ptr                   (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *ptr);</programlisting>
<para>
Sets the pointer that will be provided to db store, retrieve and delete functions, as
the first argument.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ptr</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-db-get-ptr" role="function"/>gnutls_db_get_ptr ()</title>
<indexterm><primary>gnutls_db_get_ptr</primary></indexterm><programlisting><link linkend="void">void</link>*               gnutls_db_get_ptr                   (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-db-check-entry" role="function"/>gnutls_db_check_entry ()</title>
<indexterm><primary>gnutls_db_check_entry</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_db_check_entry               (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> session_entry);</programlisting>
<para>
This function returns GNUTLS_E_EXPIRED, if the database entry
has expired or 0 otherwise. This function is to be used when
you want to clear unnesessary session which occupy space in your
backend.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_entry</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-handshake-post-client-hello-func" role="function"/>gnutls_handshake_post_client_hello_func ()</title>
<indexterm><primary>gnutls_handshake_post_client_hello_func</primary></indexterm><programlisting><link linkend="int">int</link>                 (*gnutls_handshake_post_client_hello_func)
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> );</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-handshake-set-post-client-hello-function" role="function"/>gnutls_handshake_set_post_client_hello_function ()</title>
<indexterm><primary>gnutls_handshake_set_post_client_hello_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_handshake_set_post_client_hello_function
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> ,
                                                         <link linkend="gnutls-handshake-post-client-hello-func">gnutls_handshake_post_client_hello_func</link> );</programlisting>
<para>
This function will set a callback to be called after the client
hello has been received (callback valid in server side only). This
allows the server to adjust settings based on received extensions.
</para>
<para>
Those settings could be ciphersuites, requesting certificate, or
anything else except for version negotiation (this is done before
the hello message is parsed).
</para>
<para>
This callback must return 0 on success or a gnutls error code to
terminate the handshake.
</para>
<para>
NOTE: You should not use this function to terminate the handshake
based on client input unless you know what you are doing. Before
the handshake is finished there is no way to know if there is a
man-in-the-middle attack being performed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-handshake-set-max-packet-length" role="function"/>gnutls_handshake_set_max_packet_length ()</title>
<indexterm><primary>gnutls_handshake_set_max_packet_length</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_handshake_set_max_packet_length
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="size-t">size_t</link> max);</programlisting>
<para>
This function will set the maximum size of a handshake message.
Handshake messages over this size are rejected.  The default value
is 16kb which is large enough. Set this to 0 if you do not want to
set an upper limit.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>max</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-check-version" role="function"/>gnutls_check_version ()</title>
<indexterm><primary>gnutls_check_version</primary></indexterm><programlisting>const <link linkend="char">char</link>*         gnutls_check_version                (const <link linkend="char">char</link> *req_version);</programlisting>
<para>
Check that the version of the library is at minimum the requested one
and return the version string; return NULL if the condition is not
satisfied.  If a NULL is passed to this function, no check is done,
but the version string is simply returned.
</para>
<para>
See <link linkend="LIBGNUTLS-VERSION:CAPS"><literal>LIBGNUTLS_VERSION</literal></link> for a suitable <parameter>req_version</parameter> string.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>req_version</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-credentials-clear" role="function"/>gnutls_credentials_clear ()</title>
<indexterm><primary>gnutls_credentials_clear</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_credentials_clear            (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Clears all the credentials previously set in this session.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-credentials-set" role="function"/>gnutls_credentials_set ()</title>
<indexterm><primary>gnutls_credentials_set</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_credentials_set              (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-credentials-type-t">gnutls_credentials_type_t</link> type,
                                                         <link linkend="void">void</link> *cred);</programlisting>
<para>
Sets the needed credentials for the specified type.
Eg username, password - or public and private keys etc.  
The (void* cred) parameter is a structure that depends on the
specified type and on the current session (client or server).
[ In order to minimize memory usage, and share credentials between 
several threads gnutls keeps a pointer to cred, and not the whole cred
structure. Thus you will have to keep the structure allocated until   
you call <link linkend="gnutls-deinit"><function>gnutls_deinit()</function></link>. ]
</para>
<para>
For GNUTLS_CRD_ANON cred should be gnutls_anon_client_credentials_t in case of a client.
In case of a server it should be gnutls_anon_server_credentials_t.
</para>
<para>
For GNUTLS_CRD_SRP cred should be gnutls_srp_client_credentials_t
in case of a client, and gnutls_srp_server_credentials_t, in case
of a server.
</para>
<para>
For GNUTLS_CRD_CERTIFICATE cred should be gnutls_certificate_credentials_t.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cred</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-cred-set" role="macro"/>gnutls_cred_set</title>
<indexterm><primary>gnutls_cred_set</primary></indexterm><programlisting>#define             gnutls_cred_set</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-credentials-st" role="struct"/>struct gnutls_certificate_credentials_st</title>
<indexterm><primary>gnutls_certificate_credentials_st</primary></indexterm><programlisting>struct gnutls_certificate_credentials_st;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-anon-free-server-credentials" role="function"/>gnutls_anon_free_server_credentials ()</title>
<indexterm><primary>gnutls_anon_free_server_credentials</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_anon_free_server_credentials (<link linkend="gnutls-anon-server-credentials-t">gnutls_anon_server_credentials_t</link> sc);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to free (deallocate) it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-anon-allocate-server-credentials" role="function"/>gnutls_anon_allocate_server_credentials ()</title>
<indexterm><primary>gnutls_anon_allocate_server_credentials</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_anon_allocate_server_credentials
                                                        (<link linkend="gnutls-anon-server-credentials-t">gnutls_anon_server_credentials_t</link> *sc);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to allocate it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-anon-set-server-dh-params" role="function"/>gnutls_anon_set_server_dh_params ()</title>
<indexterm><primary>gnutls_anon_set_server_dh_params</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_anon_set_server_dh_params    (<link linkend="gnutls-anon-server-credentials-t">gnutls_anon_server_credentials_t</link> res,
                                                         <link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dh_params);</programlisting>
<para>
This function will set the diffie hellman parameters for an
anonymous server to use.  These parameters will be used in
Anonymous Diffie Hellman cipher suites.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dh_params</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-anon-set-server-params-function" role="function"/>gnutls_anon_set_server_params_function ()</title>
<indexterm><primary>gnutls_anon_set_server_params_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_anon_set_server_params_function
                                                        (<link linkend="gnutls-anon-server-credentials-tres">gnutls_anon_server_credentials_tres</link> ,
                                                         <link linkend="gnutls-params-function">gnutls_params_function</link> *func);</programlisting>
<para>
This function will set a callback in order for the server to get
the diffie hellman parameters for anonymous authentication.  The
callback should return zero on success.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-anon-free-client-credentials" role="function"/>gnutls_anon_free_client_credentials ()</title>
<indexterm><primary>gnutls_anon_free_client_credentials</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_anon_free_client_credentials (<link linkend="gnutls-anon-client-credentials-tsc">gnutls_anon_client_credentials_tsc</link> );</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to free (deallocate) it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-anon-allocate-client-credentials" role="function"/>gnutls_anon_allocate_client_credentials ()</title>
<indexterm><primary>gnutls_anon_allocate_client_credentials</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_anon_allocate_client_credentials
                                                        (<link linkend="gnutls-anon-client-credentials-t">gnutls_anon_client_credentials_t</link> *sc);</programlisting>
<para>
This structure is complex enough to manipulate directly thus
this helper function is provided in order to allocate it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-free-credentials" role="function"/>gnutls_certificate_free_credentials ()</title>
<indexterm><primary>gnutls_certificate_free_credentials</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_free_credentials (<link linkend="gnutls-certificate-credentials-tsc">gnutls_certificate_credentials_tsc</link> );</programlisting>
<para>
This structure is complex enough to manipulate directly thus
this helper function is provided in order to free (deallocate) it.
</para>
<para>
This function does not free any temporary parameters associated
with this structure (ie RSA and DH parameters are not freed by
this function).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-allocate-credentials" role="function"/>gnutls_certificate_allocate_credentials ()</title>
<indexterm><primary>gnutls_certificate_allocate_credentials</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_allocate_credentials
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> *res);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to allocate it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-free-keys" role="function"/>gnutls_certificate_free_keys ()</title>
<indexterm><primary>gnutls_certificate_free_keys</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_free_keys        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc);</programlisting>
<para>
This function will delete all the keys and the certificates associated
with the given credentials. This function must not be called when a
TLS negotiation that uses the credentials is in progress.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-free-cas" role="function"/>gnutls_certificate_free_cas ()</title>
<indexterm><primary>gnutls_certificate_free_cas</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_free_cas         (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc);</programlisting>
<para>
This function will delete all the CAs associated
with the given credentials. Servers that do not use
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link> may call this to
save some memory.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-free-ca-names" role="function"/>gnutls_certificate_free_ca_names ()</title>
<indexterm><primary>gnutls_certificate_free_ca_names</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_free_ca_names    (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc);</programlisting>
<para>
This function will delete all the CA name in the
given credentials. Clients may call this to save some memory
since in client side the CA names are not used.
</para>
<para>
CA names are used by servers to advertize the CAs they
support to clients.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-free-crls" role="function"/>gnutls_certificate_free_crls ()</title>
<indexterm><primary>gnutls_certificate_free_crls</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_free_crls        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc);</programlisting>
<para>
This function will delete all the CRLs associated
with the given credentials.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-set-dh-params" role="function"/>gnutls_certificate_set_dh_params ()</title>
<indexterm><primary>gnutls_certificate_set_dh_params</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_set_dh_params    (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dh_params);</programlisting>
<para>
This function will set the diffie hellman parameters for a
certificate server to use. These parameters will be used in
Ephemeral Diffie Hellman cipher suites.  Note that only a pointer
to the parameters are stored in the certificate handle, so if you
deallocate the parameters before the certificate is deallocated,
you must change the parameters stored in the certificate first.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dh_params</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-set-rsa-export-params" role="function"/>gnutls_certificate_set_rsa_export_params ()</title>
<indexterm><primary>gnutls_certificate_set_rsa_export_params</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_set_rsa_export_params
                                                        (<link linkend="gnutls-certificate-credentials-tres">gnutls_certificate_credentials_tres</link> ,
                                                         <link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> rsa_params);</programlisting>
<para>
This function will set the temporary RSA parameters for a certificate
server to use. These parameters will be used in RSA-EXPORT
cipher suites.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rsa_params</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-set-verify-flags" role="function"/>gnutls_certificate_set_verify_flags ()</title>
<indexterm><primary>gnutls_certificate_set_verify_flags</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_set_verify_flags (<link linkend="gnutls-certificate-credentials-tres">gnutls_certificate_credentials_tres</link> ,
                                                         unsigned <link linkend="int">int</link> flags);</programlisting>
<para>
This function will set the flags to be used at verification of the
certificates.  Flags must be OR of the
<link linkend="gnutls-certificate-verify-flags"><type>gnutls_certificate_verify_flags</type></link> enumerations.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-set-verify-limits" role="function"/>gnutls_certificate_set_verify_limits ()</title>
<indexterm><primary>gnutls_certificate_set_verify_limits</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_set_verify_limits
                                                        (<link linkend="gnutls-certificate-credentials-tres">gnutls_certificate_credentials_tres</link> ,
                                                         unsigned <link linkend="int">int</link> max_bits,
                                                         unsigned <link linkend="int">int</link> max_depth);</programlisting>
<para>
This function will set some upper limits for the default verification function,
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>, to avoid denial of service attacks.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>max_bits</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>max_depth</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-set-x509-trust-file" role="function"/>gnutls_certificate_set_x509_trust_file ()</title>
<indexterm><primary>gnutls_certificate_set_x509_trust_file</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_trust_file
                                                        (<link linkend="gnutls-certificate-credentials-tres">gnutls_certificate_credentials_tres</link> ,
                                                         const <link linkend="char">char</link> *CAFILE,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);</programlisting>
<para>
This function adds the trusted CAs in order to verify client or
server certificates. In case of a client this is not required to
be called if the certificates are not verified using
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>.  This function may be called
multiple times.
</para>
<para>
In case of a server the names of the CAs set here will be sent to
the client if a certificate request is sent. This can be disabled
using <link linkend="gnutls-certificate-send-x509-rdn-sequence"><function>gnutls_certificate_send_x509_rdn_sequence()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>CAFILE</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-set-x509-trust-mem" role="function"/>gnutls_certificate_set_x509_trust_mem ()</title>
<indexterm><primary>gnutls_certificate_set_x509_trust_mem</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_trust_mem
                                                        (<link linkend="gnutls-certificate-credentials-tres">gnutls_certificate_credentials_tres</link> ,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *CA,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);</programlisting>
<para>
This function adds the trusted CAs in order to verify client or
server certificates. In case of a client this is not required to
be called if the certificates are not verified using
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>.  This function may be called
multiple times.
</para>
<para>
In case of a server the CAs set here will be sent to the client if
a certificate request is sent. This can be disabled using
<link linkend="gnutls-certificate-send-x509-rdn-sequence"><function>gnutls_certificate_send_x509_rdn_sequence()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>CA</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-set-x509-crl-file" role="function"/>gnutls_certificate_set_x509_crl_file ()</title>
<indexterm><primary>gnutls_certificate_set_x509_crl_file</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_crl_file
                                                        (<link linkend="gnutls-certificate-credentials-tres">gnutls_certificate_credentials_tres</link> ,
                                                         const <link linkend="char">char</link> *crlfile,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);</programlisting>
<para>
This function adds the trusted CRLs in order to verify client or server
certificates.  In case of a client this is not required
to be called if the certificates are not verified using
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>.
This function may be called multiple times.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crlfile</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-set-x509-crl-mem" role="function"/>gnutls_certificate_set_x509_crl_mem ()</title>
<indexterm><primary>gnutls_certificate_set_x509_crl_mem</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_crl_mem (<link linkend="gnutls-certificate-credentials-tres">gnutls_certificate_credentials_tres</link> ,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *CRL,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);</programlisting>
<para>
This function adds the trusted CRLs in order to verify client or
server certificates.  In case of a client this is not required to
be called if the certificates are not verified using
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>.  This function may be called
multiple times.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>CRL</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-set-x509-key-file" role="function"/>gnutls_certificate_set_x509_key_file ()</title>
<indexterm><primary>gnutls_certificate_set_x509_key_file</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_key_file
                                                        (<link linkend="gnutls-certificate-credentials-tres">gnutls_certificate_credentials_tres</link> ,
                                                         const <link linkend="char">char</link> *CERTFILE,
                                                         const <link linkend="char">char</link> *KEYFILE,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);</programlisting>
<para>
This function sets a certificate/private key pair in the
gnutls_certificate_credentials_t structure.  This function may be
called more than once (in case multiple keys/certificates exist
for the server).
</para>
<para>
Currently only PKCS-1 encoded RSA and DSA private keys are accepted by
this function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>CERTFILE</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>KEYFILE</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-set-x509-key-mem" role="function"/>gnutls_certificate_set_x509_key_mem ()</title>
<indexterm><primary>gnutls_certificate_set_x509_key_mem</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_key_mem (<link linkend="gnutls-certificate-credentials-tres">gnutls_certificate_credentials_tres</link> ,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *CERT,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *KEY,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);</programlisting>
<para>
This function sets a certificate/private key pair in the 
gnutls_certificate_credentials_t structure. This function may be called
more than once (in case multiple keys/certificates exist for the
server).
</para>
<para>
Currently are supported: RSA PKCS-1 encoded private keys, 
DSA private keys.
</para>
<para>
DSA private keys are encoded the OpenSSL way, which is an ASN.1
DER sequence of 6 INTEGERs - version, p, q, g, pub, priv.
</para>
<para>
Note that the keyUsage (2.5.29.15) PKIX extension in X.509 certificates 
is supported. This means that certificates intended for signing cannot
be used for ciphersuites that require encryption.
</para>
<para>
If the certificate and the private key are given in PEM encoding
then the strings that hold their values must be null terminated.
</para>
<para>
The <parameter>key</parameter> may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if you are using a sign callback, see
<link linkend="gnutls-sign-callback-set"><function>gnutls_sign_callback_set()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>CERT</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>KEY</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-send-x509-rdn-sequence" role="function"/>gnutls_certificate_send_x509_rdn_sequence ()</title>
<indexterm><primary>gnutls_certificate_send_x509_rdn_sequence</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_send_x509_rdn_sequence
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> status);</programlisting>
<para>
If status is non zero, this function will order gnutls not to send
the rdnSequence in the certificate request message. That is the
server will not advertize it's trusted CAs to the peer. If status
is zero then the default behaviour will take effect, which is to
advertize the server's trusted CAs.
</para>
<para>
This function has no effect in clients, and in authentication
methods other than certificate with X.509 certificates.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-set-x509-simple-pkcs12-file" role="function"/>gnutls_certificate_set_x509_simple_pkcs12_file ()</title>
<indexterm><primary>gnutls_certificate_set_x509_simple_pkcs12_file</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_simple_pkcs12_file
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *pkcs12file,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type,
                                                         const <link linkend="char">char</link> *password);</programlisting>
<para>
This function sets a certificate/private key pair and/or a CRL in
the gnutls_certificate_credentials_t structure.  This function may
be called more than once (in case multiple keys/certificates exist
for the server).
</para>
<para>
MAC:ed PKCS<link linkend="12:CAPS"><type>12</type></link> files are supported.  Encrypted PKCS<link linkend="12:CAPS"><type>12</type></link> bags are
supported.  Encrypted PKCS<link linkend="8:CAPS"><type>8</type></link> private keys are supported.  However,
only password based security, and the same password for all
operations, are supported.
</para>
<para>
The private keys may be RSA PKCS<link linkend="1:CAPS"><type>1</type></link> or DSA private keys encoded in
the OpenSSL way.
</para>
<para>
PKCS<link linkend="12:CAPS"><type>12</type></link> file may contain many keys and/or certificates, and there
is no way to identify which key/certificate pair you want.  You
should make sure the PKCS<link linkend="12:CAPS"><type>12</type></link> file only contain one key/certificate
pair and/or one CRL.
</para>
<para>
It is believed that the limitations of this function is acceptable
for most usage, and that any more flexibility would introduce
complexity that would make it harder to use this functionality at
all.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkcs12file</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-x509-privkey-t" role="typedef"/>gnutls_x509_privkey_t</title>
<indexterm><primary>gnutls_x509_privkey_t</primary></indexterm><para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-x509-crl-int" role="struct"/>struct gnutls_x509_crl_int</title>
<indexterm><primary>gnutls_x509_crl_int</primary></indexterm><programlisting>struct gnutls_x509_crl_int;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-x509-crl-t" role="typedef"/>gnutls_x509_crl_t</title>
<indexterm><primary>gnutls_x509_crl_t</primary></indexterm><para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-x509-crt-int" role="struct"/>struct gnutls_x509_crt_int</title>
<indexterm><primary>gnutls_x509_crt_int</primary></indexterm><programlisting>struct gnutls_x509_crt_int;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-x509-crt-t" role="typedef"/>gnutls_x509_crt_t</title>
<indexterm><primary>gnutls_x509_crt_t</primary></indexterm><para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-set-x509-key" role="function"/>gnutls_certificate_set_x509_key ()</title>
<indexterm><primary>gnutls_certificate_set_x509_key</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_key     (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> *cert_list,
                                                         <link linkend="int">int</link> cert_list_size,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key);</programlisting>
<para>
This function sets a certificate/private key pair in the
gnutls_certificate_credentials_t structure.  This function may be
called more than once (in case multiple keys/certificates exist
for the server).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert_list</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert_list_size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-set-x509-trust" role="function"/>gnutls_certificate_set_x509_trust ()</title>
<indexterm><primary>gnutls_certificate_set_x509_trust</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_trust   (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> *ca_list,
                                                         <link linkend="int">int</link> ca_list_size);</programlisting>
<para>
This function adds the trusted CAs in order to verify client
or server certificates. In case of a client this is not required
to be called if the certificates are not verified using
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>.
This function may be called multiple times.
</para>
<para>
In case of a server the CAs set here will be sent to the client if
a certificate request is sent. This can be disabled using
<link linkend="gnutls-certificate-send-x509-rdn-sequence"><function>gnutls_certificate_send_x509_rdn_sequence()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ca_list</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ca_list_size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-set-x509-crl" role="function"/>gnutls_certificate_set_x509_crl ()</title>
<indexterm><primary>gnutls_certificate_set_x509_crl</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_crl     (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> *crl_list,
                                                         <link linkend="int">int</link> crl_list_size);</programlisting>
<para>
This function adds the trusted CRLs in order to verify client or
server certificates.  In case of a client this is not required to
be called if the certificates are not verified using
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>.  This function may be called
multiple times.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crl_list</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crl_list_size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-global-init" role="function"/>gnutls_global_init ()</title>
<indexterm><primary>gnutls_global_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_global_init                  (void);</programlisting>
<para>
This function initializes the global data to defaults.
Every gnutls application has a global data which holds common parameters
shared by gnutls session structures.
You must call <link linkend="gnutls-global-deinit"><function>gnutls_global_deinit()</function></link> when gnutls usage is no longer needed</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-global-deinit" role="function"/>gnutls_global_deinit ()</title>
<indexterm><primary>gnutls_global_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_global_deinit                (void);</programlisting>
<para>
This function deinitializes the global data, that were initialized
using <link linkend="gnutls-global-init"><function>gnutls_global_init()</function></link>.
</para>
<para>
Note!  This function is not thread safe.  See the discussion for
<link linkend="gnutls-global-init"><function>gnutls_global_init()</function></link> for more information.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-alloc-function" role="function"/>gnutls_alloc_function ()</title>
<indexterm><primary>gnutls_alloc_function</primary></indexterm><programlisting><link linkend="void">void</link>*               (*gnutls_alloc_function)            (<link linkend="size-t">size_t</link> );</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-calloc-function" role="function"/>gnutls_calloc_function ()</title>
<indexterm><primary>gnutls_calloc_function</primary></indexterm><programlisting><link linkend="void">void</link>*               (*gnutls_calloc_function)           (<link linkend="size-t">size_t</link> ,
                                                         <link linkend="size-t">size_t</link> );</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-is-secure-function" role="function"/>gnutls_is_secure_function ()</title>
<indexterm><primary>gnutls_is_secure_function</primary></indexterm><programlisting><link linkend="int">int</link>                 (*gnutls_is_secure_function)        (const <link linkend="void">void</link> *);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-free-function" role="function"/>gnutls_free_function ()</title>
<indexterm><primary>gnutls_free_function</primary></indexterm><programlisting><link linkend="void">void</link>                (*gnutls_free_function)             (<link linkend="void">void</link> *);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-realloc-function" role="function"/>gnutls_realloc_function ()</title>
<indexterm><primary>gnutls_realloc_function</primary></indexterm><programlisting><link linkend="void">void</link>*               (*gnutls_realloc_function)          (<link linkend="void">void</link> *,
                                                         <link linkend="size-t">size_t</link> );</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-global-set-mem-functions" role="function"/>gnutls_global_set_mem_functions ()</title>
<indexterm><primary>gnutls_global_set_mem_functions</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_global_set_mem_functions     (<link linkend="gnutls-alloc-function">gnutls_alloc_function</link> gt_alloc_func,
                                                         <link linkend="gnutls-alloc-functiongt-secure-alloc-func">gnutls_alloc_functiongt_secure_alloc_func</link> ,
                                                         <link linkend="gnutls-is-secure-functiongt-is-secure-func">gnutls_is_secure_functiongt_is_secure_func</link> ,
                                                         <link linkend="gnutls-realloc-function">gnutls_realloc_function</link> gt_realloc_func,
                                                         <link linkend="gnutls-free-function">gnutls_free_function</link> gt_free_func);</programlisting>
<para>
This is the function were you set the memory allocation functions gnutls
is going to use. By default the libc's allocation functions (<link linkend="malloc"><function>malloc()</function></link>, <link linkend="free"><function>free()</function></link>),
are used by gnutls, to allocate both sensitive and not sensitive data.
This function is provided to set the memory allocation functions to
something other than the defaults (ie the gcrypt allocation functions). 
</para>
<para>
This function must be called before <link linkend="gnutls-global-init"><function>gnutls_global_init()</function></link> is called.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>gt_alloc_func</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param3</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>gt_realloc_func</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>gt_free_func</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-malloc" role="variable"/>gnutls_malloc</title>
<indexterm><primary>gnutls_malloc</primary></indexterm><programlisting>  extern gnutls_alloc_function gnutls_malloc;
</programlisting>
<para>
This function will allocate 's' bytes data, and
return a pointer to memory. This function is supposed
to be used by callbacks.
</para>
<para>
The allocation function used is the one set by <link linkend="gnutls-global-set-mem-functions"><function>gnutls_global_set_mem_functions()</function></link>.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-secure-malloc" role="variable"/>gnutls_secure_malloc</title>
<indexterm><primary>gnutls_secure_malloc</primary></indexterm><programlisting>  extern gnutls_alloc_function gnutls_secure_malloc;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-realloc" role="variable"/>gnutls_realloc</title>
<indexterm><primary>gnutls_realloc</primary></indexterm><programlisting>  extern gnutls_realloc_function gnutls_realloc;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-calloc" role="variable"/>gnutls_calloc</title>
<indexterm><primary>gnutls_calloc</primary></indexterm><programlisting>  extern gnutls_calloc_function gnutls_calloc;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-free" role="variable"/>gnutls_free</title>
<indexterm><primary>gnutls_free</primary></indexterm><programlisting>  extern gnutls_free_function gnutls_free;
</programlisting>
<para>
This function will free data pointed by ptr.
</para>
<para>
The deallocation function used is the one set by <link linkend="gnutls-global-set-mem-functions"><function>gnutls_global_set_mem_functions()</function></link>.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-strdup" role="function"/>gnutls_strdup ()</title>
<indexterm><primary>gnutls_strdup</primary></indexterm><programlisting><link linkend="char">char</link>*               gnutls_strdup                       (const <link linkend="char">char</link> *);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-log-func" role="function"/>gnutls_log_func ()</title>
<indexterm><primary>gnutls_log_func</primary></indexterm><programlisting><link linkend="void">void</link>                (*gnutls_log_func)                  (...,
                                                         const <link linkend="char">char</link> *);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-global-set-log-function" role="function"/>gnutls_global_set_log_function ()</title>
<indexterm><primary>gnutls_global_set_log_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_global_set_log_function      (<link linkend="gnutls-log-func">gnutls_log_func</link> log_func);</programlisting>
<para>
This is the function where you set the logging function gnutls
is going to use. This function only accepts a character array.
Normally you may not use this function since it is only used 
for debugging purposes.
</para>
<para>
gnutls_log_func is of the form, 
void (*gnutls_log_func)( int level, const char*);</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>log_func</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-global-set-log-level" role="function"/>gnutls_global_set_log_level ()</title>
<indexterm><primary>gnutls_global_set_log_level</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_global_set_log_level         (<link linkend="int">int</link> level);</programlisting>
<para>
This is the function that allows you to set the log level.
The level is an integer between 0 and 9. Higher values mean
more verbosity. The default value is 0. Larger values should
only be used with care, since they may reveal sensitive information.
</para>
<para>
Use a log level over 10 to enable all debugging options.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>level</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-dh-params-init" role="function"/>gnutls_dh_params_init ()</title>
<indexterm><primary>gnutls_dh_params_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_params_init               (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> *dh_params);</programlisting>
<para>
This function will initialize the DH parameters structure.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dh_params</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-dh-params-deinit" role="function"/>gnutls_dh_params_deinit ()</title>
<indexterm><primary>gnutls_dh_params_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_dh_params_deinit             (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dh_params);</programlisting>
<para>
This function will deinitialize the DH parameters structure.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dh_params</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-dh-params-import-raw" role="function"/>gnutls_dh_params_import_raw ()</title>
<indexterm><primary>gnutls_dh_params_import_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_params_import_raw         (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dh_params,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *prime,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *generator);</programlisting>
<para>
This function will replace the pair of prime and generator for use in
the Diffie-Hellman key exchange. The new parameters should be stored in the
appropriate gnutls_datum.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dh_params</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prime</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>generator</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-dh-params-import-pkcs3" role="function"/>gnutls_dh_params_import_pkcs3 ()</title>
<indexterm><primary>gnutls_dh_params_import_pkcs3</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_params_import_pkcs3       (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> params,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *pkcs3_params,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format);</programlisting>
<para>
This function will extract the DHParams found in a PKCS3 formatted
structure. This is the format generated by "openssl dhparam" tool.
</para>
<para>
If the structure is PEM encoded, it should have a header
of "BEGIN DH PARAMETERS".
</para>
<para>
In case of failure a negative value will be returned, and
0 on success.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkcs3_params</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-dh-params-generate2" role="function"/>gnutls_dh_params_generate2 ()</title>
<indexterm><primary>gnutls_dh_params_generate2</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_params_generate2          (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> params,
                                                         unsigned <link linkend="int">int</link> bits);</programlisting>
<para>
This function will generate a new pair of prime and generator for use in 
the Diffie-Hellman key exchange. The new parameters will be allocated using
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the appropriate datum.
This function is normally slow. 
</para>
<para>
Note that the bits value should be one of 768, 1024, 2048, 3072 or 4096.
Also note that the DH parameters are only useful to servers.
Since clients use the parameters sent by the server, it's of
no use to call this in client side.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-dh-params-export-pkcs3" role="function"/>gnutls_dh_params_export_pkcs3 ()</title>
<indexterm><primary>gnutls_dh_params_export_pkcs3</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_params_export_pkcs3       (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> params,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         unsigned <link linkend="char">char</link> *params_data,
                                                         <link linkend="size-t">size_t</link> *params_data_size);</programlisting>
<para>
This function will export the given dh parameters to a PKCS3
DHParams structure. This is the format generated by "openssl dhparam" tool.
If the buffer provided is not long enough to hold the output, then
GNUTLS_E_SHORT_MEMORY_BUFFER will be returned.
</para>
<para>
If the structure is PEM encoded, it will have a header
of "BEGIN DH PARAMETERS".
</para>
<para>
In case of failure a negative value will be returned, and
0 on success.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>params_data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>params_data_size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-dh-params-export-raw" role="function"/>gnutls_dh_params_export_raw ()</title>
<indexterm><primary>gnutls_dh_params_export_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_params_export_raw         (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> params,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *prime,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *generator,
                                                         unsigned <link linkend="int">int</link> *bits);</programlisting>
<para>
This function will export the pair of prime and generator for use in 
the Diffie-Hellman key exchange. The new parameters will be allocated using
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the appropriate datum.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prime</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>generator</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-dh-params-cpy" role="function"/>gnutls_dh_params_cpy ()</title>
<indexterm><primary>gnutls_dh_params_cpy</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_params_cpy                (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dst,
                                                         <link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> src);</programlisting>
<para>
This function will copy the DH parameters structure from source
to destination.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dst</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-rsa-params-init" role="function"/>gnutls_rsa_params_init ()</title>
<indexterm><primary>gnutls_rsa_params_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_rsa_params_init              (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> *rsa_params);</programlisting>
<para>
This function will initialize the temporary RSA parameters structure.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>rsa_params</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-rsa-params-deinit" role="function"/>gnutls_rsa_params_deinit ()</title>
<indexterm><primary>gnutls_rsa_params_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_rsa_params_deinit            (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> rsa_params);</programlisting>
<para>
This function will deinitialize the RSA parameters structure.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>rsa_params</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-rsa-params-cpy" role="function"/>gnutls_rsa_params_cpy ()</title>
<indexterm><primary>gnutls_rsa_params_cpy</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_rsa_params_cpy               (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> dst,
                                                         <link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> src);</programlisting>
<para>
This function will copy the RSA parameters structure from source
to destination.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dst</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-rsa-params-import-raw" role="function"/>gnutls_rsa_params_import_raw ()</title>
<indexterm><primary>gnutls_rsa_params_import_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_rsa_params_import_raw        (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> rsa_params,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *d,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *u);</programlisting>
<para>
This function will replace the parameters in the given structure.
The new parameters should be stored in the appropriate gnutls_datum.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>rsa_params</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>m</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>e</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>q</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>u</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-rsa-params-generate2" role="function"/>gnutls_rsa_params_generate2 ()</title>
<indexterm><primary>gnutls_rsa_params_generate2</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_rsa_params_generate2         (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> params,
                                                         unsigned <link linkend="int">int</link> bits);</programlisting>
<para>
This function will generate new temporary RSA parameters for use in 
RSA-EXPORT ciphersuites.  This function is normally slow. 
</para>
<para>
Note that if the parameters are to be used in export cipher suites the 
bits value should be 512 or less.
Also note that the generation of new RSA parameters is only useful
to servers. Clients use the parameters sent by the server, thus it's
no use calling this in client side.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-rsa-params-export-raw" role="function"/>gnutls_rsa_params_export_raw ()</title>
<indexterm><primary>gnutls_rsa_params_export_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_rsa_params_export_raw        (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> params,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *d,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *u,
                                                         unsigned <link linkend="int">int</link> *bits);</programlisting>
<para>
This function will export the RSA parameters found in the given
structure. The new parameters will be allocated using
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the appropriate datum.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>m</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>e</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>d</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>q</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>u</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-rsa-params-export-pkcs1" role="function"/>gnutls_rsa_params_export_pkcs1 ()</title>
<indexterm><primary>gnutls_rsa_params_export_pkcs1</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_rsa_params_export_pkcs1      (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> params,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         unsigned <link linkend="char">char</link> *params_data,
                                                         <link linkend="size-t">size_t</link> *params_data_size);</programlisting>
<para>
This function will export the given RSA parameters to a PKCS1
RSAPublicKey structure. If the buffer provided is not long enough to 
hold the output, then GNUTLS_E_SHORT_MEMORY_BUFFER will be returned.
</para>
<para>
If the structure is PEM encoded, it will have a header
of "BEGIN RSA PRIVATE KEY".
</para>
<para>
In case of failure a negative value will be returned, and
0 on success.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>params_data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>params_data_size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-rsa-params-import-pkcs1" role="function"/>gnutls_rsa_params_import_pkcs1 ()</title>
<indexterm><primary>gnutls_rsa_params_import_pkcs1</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_rsa_params_import_pkcs1      (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> params,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *pkcs1_params,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format);</programlisting>
<para>
This function will extract the RSAPublicKey found in a PKCS1 formatted
structure. 
</para>
<para>
If the structure is PEM encoded, it should have a header
of "BEGIN RSA PRIVATE KEY".
</para>
<para>
In case of failure a negative value will be returned, and
0 on success.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkcs1_params</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-pull-func" role="function"/>gnutls_pull_func ()</title>
<indexterm><primary>gnutls_pull_func</primary></indexterm><programlisting><link linkend="ssize-t">ssize_t</link>             (*gnutls_pull_func)                 (<link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> ,
                                                         <link linkend="void">void</link> *,
                                                         <link linkend="size-t">size_t</link> );</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param3</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-push-func" role="function"/>gnutls_push_func ()</title>
<indexterm><primary>gnutls_push_func</primary></indexterm><programlisting><link linkend="ssize-t">ssize_t</link>             (*gnutls_push_func)                 (<link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> ,
                                                         const <link linkend="void">void</link> *,
                                                         <link linkend="size-t">size_t</link> );</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param3</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-transport-set-ptr" role="function"/>gnutls_transport_set_ptr ()</title>
<indexterm><primary>gnutls_transport_set_ptr</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_transport_set_ptr            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> ptr);</programlisting>
<para>
Used to set the first argument of the transport function (like
PUSH and PULL).  In berkeley style sockets this function will set
the connection handle.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ptr</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-transport-set-ptr2" role="function"/>gnutls_transport_set_ptr2 ()</title>
<indexterm><primary>gnutls_transport_set_ptr2</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_transport_set_ptr2           (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> recv_ptr,
                                                         <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> send_ptr);</programlisting>
<para>
Used to set the first argument of the transport function (like
PUSH and PULL). In berkeley style sockets this function will set
the connection handle.  With this function you can use two
different pointers for receiving and sending.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>recv_ptr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>send_ptr</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-transport-get-ptr" role="function"/>gnutls_transport_get_ptr ()</title>
<indexterm><primary>gnutls_transport_get_ptr</primary></indexterm><programlisting><link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> gnutls_transport_get_ptr         (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Used to get the first argument of the transport function (like
PUSH and PULL).  This must have been set using
<link linkend="gnutls-transport-set-ptr"><function>gnutls_transport_set_ptr()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-transport-get-ptr2" role="function"/>gnutls_transport_get_ptr2 ()</title>
<indexterm><primary>gnutls_transport_get_ptr2</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_transport_get_ptr2           (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> *recv_ptr,
                                                         <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> *send_ptr);</programlisting>
<para>
Used to get the arguments of the transport functions (like PUSH
and PULL).  These should have been set using
<link linkend="gnutls-transport-set-ptr2"><function>gnutls_transport_set_ptr2()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>recv_ptr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>send_ptr</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-transport-set-lowat" role="function"/>gnutls_transport_set_lowat ()</title>
<indexterm><primary>gnutls_transport_set_lowat</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_transport_set_lowat          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> num);</programlisting>
<para>
Used to set the lowat value in order for select to check if there
are pending data to socket buffer. Used only if you have changed
the default low water value (default is 1).  Normally you will not
need that function.  This function is only useful if using
berkeley style sockets.  Otherwise it must be called and set lowat
to zero.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>num</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-transport-set-push-function" role="function"/>gnutls_transport_set_push_function ()</title>
<indexterm><primary>gnutls_transport_set_push_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_transport_set_push_function  (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-push-func">gnutls_push_func</link> push_func);</programlisting>
<para>
This is the function where you set a push function for gnutls
to use in order to send data. If you are going to use berkeley style
sockets, you do not need to use this function since
the default (send(2)) will probably be ok. Otherwise you should
specify this function for gnutls to be able to send data.
 
PUSH_FUNC is of the form, 
ssize_t (*gnutls_push_func)(gnutls_transport_ptr_t, const void*, size_t);</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>push_func</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-transport-set-pull-function" role="function"/>gnutls_transport_set_pull_function ()</title>
<indexterm><primary>gnutls_transport_set_pull_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_transport_set_pull_function  (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-pull-func">gnutls_pull_func</link> pull_func);</programlisting>
<para>
This is the function where you set a function for gnutls 
to receive data. Normally, if you use berkeley style sockets,
do not need to use this function since the default (recv(2)) will 
probably be ok.
</para>
<para>
PULL_FUNC is of the form, 
ssize_t (*gnutls_pull_func)(gnutls_transport_ptr_t, void*, size_t);</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pull_func</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-transport-set-errno" role="function"/>gnutls_transport_set_errno ()</title>
<indexterm><primary>gnutls_transport_set_errno</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_transport_set_errno          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> err);</programlisting>
<para>
Store <parameter>err</parameter> in the session-specific errno variable.  Useful values
for <parameter>err</parameter> is EAGAIN and EINTR, other values are treated will be
treated as real errors in the push/pull function.
</para>
<para>
This function is useful in replacement push/pull functions set by
gnutls_transport_set_push_function and
gnutls_transport_set_pullpush_function under Windows, where the
replacement push/pull may not have access to the same <parameter>errno</parameter>
variable that is used by GnuTLS (e.g., the application is linked to
msvcr71.dll and gnutls is linked to msvcrt.dll).
</para>
<para>
If you don't have the <parameter>session</parameter> variable easily accessible from the
push/pull function, and don't worry about thread conflicts, you can
also use <link linkend="gnutls-transport-set-global-errno"><function>gnutls_transport_set_global_errno()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>err</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-transport-set-global-errno" role="function"/>gnutls_transport_set_global_errno ()</title>
<indexterm><primary>gnutls_transport_set_global_errno</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_transport_set_global_errno   (<link linkend="int">int</link> err);</programlisting>
<para>
Store <parameter>err</parameter> in the global errno variable.  Useful values for <parameter>err</parameter> is
EAGAIN and EINTR, other values are treated will be treated as real
errors in the push/pull function.
</para>
<para>
This function is useful in replacement push/pull functions set by
gnutls_transport_set_push_function and
gnutls_transport_set_pullpush_function under Windows, where the
replacement push/pull may not have access to the same <parameter>errno</parameter>
variable that is used by GnuTLS (e.g., the application is linked to
msvcr71.dll and gnutls is linked to msvcrt.dll).
</para>
<para>
Whether this function is thread safe or not depends on whether the
global variable errno is thread safe, some system libraries make it
a thread-local variable.  When feasible, using the guaranteed
thread-safe <link linkend="gnutls-transport-set-errno"><function>gnutls_transport_set_errno()</function></link> may be better.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>err</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-session-set-ptr" role="function"/>gnutls_session_set_ptr ()</title>
<indexterm><primary>gnutls_session_set_ptr</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_session_set_ptr              (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *ptr);</programlisting>
<para>
This function will set (associate) the user given pointer to the
session structure.  This is pointer can be accessed with
<link linkend="gnutls-session-get-ptr"><function>gnutls_session_get_ptr()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ptr</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-session-get-ptr" role="function"/>gnutls_session_get_ptr ()</title>
<indexterm><primary>gnutls_session_get_ptr</primary></indexterm><programlisting><link linkend="void">void</link>*               gnutls_session_get_ptr              (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-openpgp-send-cert" role="function"/>gnutls_openpgp_send_cert ()</title>
<indexterm><primary>gnutls_openpgp_send_cert</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_openpgp_send_cert            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-openpgp-crt-status-t">gnutls_openpgp_crt_status_t</link> status);</programlisting>
<para>
This function will order gnutls to send the key fingerprint
instead of the key in the initial handshake procedure. This should
be used with care and only when there is indication or knowledge
that the server can obtain the client's key.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-fingerprint" role="function"/>gnutls_fingerprint ()</title>
<indexterm><primary>gnutls_fingerprint</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_fingerprint                  (<link linkend="gnutls-digest-algorithm-t">gnutls_digest_algorithm_t</link> algo,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="void">void</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);</programlisting>
<para>
This function will calculate a fingerprint (actually a hash), of the
given data. The result is not printable data. You should convert it
to hex, or to something else printable.
</para>
<para>
This is the usual way to calculate a fingerprint of an X.509 
DER encoded certificate. Note however that the fingerprint 
of an OpenPGP is not just a hash and cannot be calculated with
this function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>algo</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-srp-free-client-credentials" role="function"/>gnutls_srp_free_client_credentials ()</title>
<indexterm><primary>gnutls_srp_free_client_credentials</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_srp_free_client_credentials  (<link linkend="gnutls-srp-client-credentials-tsc">gnutls_srp_client_credentials_tsc</link> );</programlisting>
<para>
This structure is complex enough to manipulate directly thus
this helper function is provided in order to free (deallocate) it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-srp-allocate-client-credentials" role="function"/>gnutls_srp_allocate_client_credentials ()</title>
<indexterm><primary>gnutls_srp_allocate_client_credentials</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_srp_allocate_client_credentials
                                                        (<link linkend="gnutls-srp-client-credentials-t">gnutls_srp_client_credentials_t</link> *sc);</programlisting>
<para>
This structure is complex enough to manipulate directly thus
this helper function is provided in order to allocate it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-srp-set-client-credentials" role="function"/>gnutls_srp_set_client_credentials ()</title>
<indexterm><primary>gnutls_srp_set_client_credentials</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_srp_set_client_credentials   (<link linkend="gnutls-srp-client-credentials-t">gnutls_srp_client_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *username,
                                                         const <link linkend="char">char</link> *password);</programlisting>
<para>
This function sets the username and password, in a gnutls_srp_client_credentials_t structure.
Those will be used in SRP authentication. <parameter>username</parameter> and <parameter>password</parameter> should be ASCII
strings or UTF-8 strings prepared using the "SASLprep" profile of "stringprep".</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>username</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-srp-free-server-credentials" role="function"/>gnutls_srp_free_server_credentials ()</title>
<indexterm><primary>gnutls_srp_free_server_credentials</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_srp_free_server_credentials  (<link linkend="gnutls-srp-server-credentials-tsc">gnutls_srp_server_credentials_tsc</link> );</programlisting>
<para>
This structure is complex enough to manipulate directly thus
this helper function is provided in order to free (deallocate) it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-srp-allocate-server-credentials" role="function"/>gnutls_srp_allocate_server_credentials ()</title>
<indexterm><primary>gnutls_srp_allocate_server_credentials</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_srp_allocate_server_credentials
                                                        (<link linkend="gnutls-srp-server-credentials-t">gnutls_srp_server_credentials_t</link> *sc);</programlisting>
<para>
This structure is complex enough to manipulate directly thus
this helper function is provided in order to allocate it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-srp-set-server-credentials-file" role="function"/>gnutls_srp_set_server_credentials_file ()</title>
<indexterm><primary>gnutls_srp_set_server_credentials_file</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_srp_set_server_credentials_file
                                                        (<link linkend="gnutls-srp-server-credentials-tres">gnutls_srp_server_credentials_tres</link> ,
                                                         const <link linkend="char">char</link> *password_file,
                                                         const <link linkend="char">char</link> *password_conf_file);</programlisting>
<para>
This function sets the password files, in a gnutls_srp_server_credentials_t structure.
Those password files hold usernames and verifiers and will be used for SRP authentication.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password_file</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password_conf_file</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-srp-server-get-username" role="function"/>gnutls_srp_server_get_username ()</title>
<indexterm><primary>gnutls_srp_server_get_username</primary></indexterm><programlisting>const <link linkend="char">char</link>*         gnutls_srp_server_get_username      (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function will return the username of the peer. This should only be
called in case of SRP authentication and in case of a server.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-srp-verifier" role="function"/>gnutls_srp_verifier ()</title>
<indexterm><primary>gnutls_srp_verifier</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_srp_verifier                 (const <link linkend="char">char</link> *username,
                                                         const <link linkend="char">char</link> *password,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *salt,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *generator,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *prime,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *res);</programlisting>
<para>
This function will create an SRP verifier, as specified in RFC2945.
The <parameter>prime</parameter> and <parameter>generator</parameter> should be one of the static parameters defined
in gnutls/extra.h or may be generated using the GCRYPT functions
<link linkend="gcry-prime-generate"><function>gcry_prime_generate()</function></link> and <link linkend="gcry-prime-group-generator"><function>gcry_prime_group_generator()</function></link>.
The verifier will be allocated with <parameter>malloc</parameter> and will be stored in <parameter>res</parameter> using 
binary format.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>username</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>salt</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>generator</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prime</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>res</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-srp-2048-group-prime" role="variable"/>gnutls_srp_2048_group_prime</title>
<indexterm><primary>gnutls_srp_2048_group_prime</primary></indexterm><programlisting>  extern const gnutls_datum_t gnutls_srp_2048_group_prime;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-srp-2048-group-generator" role="variable"/>gnutls_srp_2048_group_generator</title>
<indexterm><primary>gnutls_srp_2048_group_generator</primary></indexterm><programlisting>  extern const gnutls_datum_t gnutls_srp_2048_group_generator;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-srp-1536-group-prime" role="variable"/>gnutls_srp_1536_group_prime</title>
<indexterm><primary>gnutls_srp_1536_group_prime</primary></indexterm><programlisting>  extern const gnutls_datum_t gnutls_srp_1536_group_prime;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-srp-1536-group-generator" role="variable"/>gnutls_srp_1536_group_generator</title>
<indexterm><primary>gnutls_srp_1536_group_generator</primary></indexterm><programlisting>  extern const gnutls_datum_t gnutls_srp_1536_group_generator;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-srp-1024-group-prime" role="variable"/>gnutls_srp_1024_group_prime</title>
<indexterm><primary>gnutls_srp_1024_group_prime</primary></indexterm><programlisting>  extern const gnutls_datum_t gnutls_srp_1024_group_prime;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-srp-1024-group-generator" role="variable"/>gnutls_srp_1024_group_generator</title>
<indexterm><primary>gnutls_srp_1024_group_generator</primary></indexterm><programlisting>  extern const gnutls_datum_t gnutls_srp_1024_group_generator;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-srp-set-server-credentials-function" role="function"/>gnutls_srp_set_server_credentials_function ()</title>
<indexterm><primary>gnutls_srp_set_server_credentials_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_srp_set_server_credentials_function
                                                        (<link linkend="gnutls-srp-server-credentials-t">gnutls_srp_server_credentials_t</link> cred,
                                                         <link linkend="gnutls-srp-server-credentials-function">gnutls_srp_server_credentials_function</link> *func);</programlisting>
<para>
This function can be used to set a callback to retrieve the user's SRP credentials.
The callback's function form is:
int (*callback)(gnutls_session_t, const char* username,
 gnutls_datum_t* salt, gnutls_datum_t *verifier, gnutls_datum_t* g,
 gnutls_datum_t* n);
</para>
<para>
<parameter>username</parameter> contains the actual username. 
The <parameter>salt</parameter>, <parameter>verifier</parameter>, <parameter>generator</parameter> and <parameter>prime</parameter> must be filled
in using the <link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link>. For convenience <parameter>prime</parameter> and <parameter>generator</parameter> 
may also be one of the static parameters defined in extra.h.
</para>
<para>
In case the callback returned a negative number then gnutls will
assume that the username does not exist.
</para>
<para>
In order to prevent attackers from guessing valid usernames,
if a user does not exist, g and n values should be filled in
using a random user's parameters. In that case the callback must
return the special value (1).
</para>
<para>
The callback function will only be called once per handshake.
The callback function should return 0 on success, while
-1 indicates an error.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cred</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-srp-set-client-credentials-function" role="function"/>gnutls_srp_set_client_credentials_function ()</title>
<indexterm><primary>gnutls_srp_set_client_credentials_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_srp_set_client_credentials_function
                                                        (<link linkend="gnutls-srp-client-credentials-t">gnutls_srp_client_credentials_t</link> cred,
                                                         <link linkend="gnutls-srp-client-credentials-function">gnutls_srp_client_credentials_function</link> *func);</programlisting>
<para>
This function can be used to set a callback to retrieve the username and
password for client SRP authentication.
The callback's function form is:
int (*callback)(gnutls_session_t, char** username,
 char** password);
</para>
<para>
The <parameter>username</parameter> and <parameter>password</parameter> must be allocated using <link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link>.
<parameter>username</parameter> and <parameter>password</parameter> should be ASCII strings or UTF-8 strings 
prepared using the "SASLprep" profile of "stringprep".
</para>
<para>
The callback function will be called once per handshake before the
initial hello message is sent.
</para>
<para>
The callback should not return a negative error code the second
time called, since the handshake procedure will be aborted.
</para>
<para>
The callback function should return 0 on success.
-1 indicates an error.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cred</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-srp-base64-encode" role="function"/>gnutls_srp_base64_encode ()</title>
<indexterm><primary>gnutls_srp_base64_encode</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_srp_base64_encode            (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);</programlisting>
<para>
This function will convert the given data to printable data, using the base64 
encoding, as used in the libsrp. This is the encoding used in SRP password files.
If the provided buffer is not long enough GNUTLS_E_SHORT_MEMORY_BUFFER is returned.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-srp-base64-encode-alloc" role="function"/>gnutls_srp_base64_encode_alloc ()</title>
<indexterm><primary>gnutls_srp_base64_encode_alloc</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_srp_base64_encode_alloc      (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *result);</programlisting>
<para>
This function will convert the given data to printable data, using the base64 
encoding. This is the encoding used in SRP password files. This function will
allocate the required memory to hold the encoded data.
</para>
<para>
You should use <link linkend="gnutls-free"><function>gnutls_free()</function></link> to free the returned data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-srp-base64-decode" role="function"/>gnutls_srp_base64_decode ()</title>
<indexterm><primary>gnutls_srp_base64_decode</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_srp_base64_decode            (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *b64_data,
                                                         <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);</programlisting>
<para>
This function will decode the given encoded data, using the base64 encoding
found in libsrp.
</para>
<para>
Note that b64_data should be null terminated.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>b64_data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-srp-base64-decode-alloc" role="function"/>gnutls_srp_base64_decode_alloc ()</title>
<indexterm><primary>gnutls_srp_base64_decode_alloc</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_srp_base64_decode_alloc      (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *b64_data,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *result);</programlisting>
<para>
This function will decode the given encoded data. The decoded data
will be allocated, and stored into result.
It will decode using the base64 algorithm found in libsrp.
</para>
<para>
You should use <link linkend="gnutls-free"><function>gnutls_free()</function></link> to free the returned data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>b64_data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-psk-key-flags" role="enum"/>enum gnutls_psk_key_flags</title>
<indexterm><primary>gnutls_psk_key_flags</primary></indexterm><programlisting>  typedef enum gnutls_psk_key_flags
    {
      GNUTLS_PSK_KEY_RAW = 0,
      GNUTLS_PSK_KEY_HEX
    } gnutls_psk_key_flags;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-psk-free-client-credentials" role="function"/>gnutls_psk_free_client_credentials ()</title>
<indexterm><primary>gnutls_psk_free_client_credentials</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_psk_free_client_credentials  (<link linkend="gnutls-psk-client-credentials-tsc">gnutls_psk_client_credentials_tsc</link> );</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to free (deallocate) it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-psk-allocate-client-credentials" role="function"/>gnutls_psk_allocate_client_credentials ()</title>
<indexterm><primary>gnutls_psk_allocate_client_credentials</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_psk_allocate_client_credentials
                                                        (<link linkend="gnutls-psk-client-credentials-t">gnutls_psk_client_credentials_t</link> *sc);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to allocate it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-psk-set-client-credentials" role="function"/>gnutls_psk_set_client_credentials ()</title>
<indexterm><primary>gnutls_psk_set_client_credentials</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_psk_set_client_credentials   (<link linkend="gnutls-psk-client-credentials-t">gnutls_psk_client_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *username,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *key,
                                                         <link linkend="gnutls-psk-key-flags">gnutls_psk_key_flags</link> format);</programlisting>
<para>
This function sets the username and password, in a
gnutls_psk_client_credentials_t structure.  Those will be used in
PSK authentication. <parameter>username</parameter> should be an ASCII string or UTF-8
strings prepared using the "SASLprep" profile of "stringprep".
The key can be either in raw byte format or in Hex (not with the
'0x' prefix).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>username</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-psk-free-server-credentials" role="function"/>gnutls_psk_free_server_credentials ()</title>
<indexterm><primary>gnutls_psk_free_server_credentials</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_psk_free_server_credentials  (<link linkend="gnutls-psk-server-credentials-tsc">gnutls_psk_server_credentials_tsc</link> );</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to free (deallocate) it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-psk-allocate-server-credentials" role="function"/>gnutls_psk_allocate_server_credentials ()</title>
<indexterm><primary>gnutls_psk_allocate_server_credentials</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_psk_allocate_server_credentials
                                                        (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> *sc);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to allocate it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-psk-set-server-credentials-file" role="function"/>gnutls_psk_set_server_credentials_file ()</title>
<indexterm><primary>gnutls_psk_set_server_credentials_file</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_psk_set_server_credentials_file
                                                        (<link linkend="gnutls-psk-server-credentials-tres">gnutls_psk_server_credentials_tres</link> ,
                                                         const <link linkend="char">char</link> *password_file);</programlisting>
<para>
This function sets the password file, in a
<link linkend="gnutls-psk-server-credentials-t"><literal>gnutls_psk_server_credentials_t</literal></link> structure.  This password file
holds usernames and keys and will be used for PSK authentication.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password_file</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-psk-server-get-username" role="function"/>gnutls_psk_server_get_username ()</title>
<indexterm><primary>gnutls_psk_server_get_username</primary></indexterm><programlisting>const <link linkend="char">char</link>*         gnutls_psk_server_get_username      (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This should only be called in case of PSK authentication and in
case of a server.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-psk-set-server-credentials-function" role="function"/>gnutls_psk_set_server_credentials_function ()</title>
<indexterm><primary>gnutls_psk_set_server_credentials_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_psk_set_server_credentials_function
                                                        (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> cred,
                                                         <link linkend="gnutls-psk-server-credentials-function">gnutls_psk_server_credentials_function</link> *func);</programlisting>
<para>
This function can be used to set a callback to retrieve the user's PSK credentials.
The callback's function form is:
int (*callback)(gnutls_session_t, const char* username,
 gnutls_datum_t* key);
</para>
<para>
<parameter>username</parameter> contains the actual username. 
The <parameter>key</parameter> must be filled in using the <link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link>. 
</para>
<para>
In case the callback returned a negative number then gnutls will
assume that the username does not exist.
</para>
<para>
The callback function will only be called once per handshake.  The
callback function should return 0 on success, while -1 indicates
an error.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cred</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-psk-set-client-credentials-function" role="function"/>gnutls_psk_set_client_credentials_function ()</title>
<indexterm><primary>gnutls_psk_set_client_credentials_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_psk_set_client_credentials_function
                                                        (<link linkend="gnutls-psk-client-credentials-t">gnutls_psk_client_credentials_t</link> cred,
                                                         <link linkend="gnutls-psk-client-credentials-function">gnutls_psk_client_credentials_function</link> *func);</programlisting>
<para>
This function can be used to set a callback to retrieve the username and
password for client PSK authentication.
The callback's function form is:
int (*callback)(gnutls_session_t, char** username,
 gnutls_datum_t* key);
</para>
<para>
The <parameter>username</parameter> and <parameter>key</parameter> must be allocated using <link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link>.
<parameter>username</parameter> should be ASCII strings or UTF-8 strings prepared using
the "SASLprep" profile of "stringprep".
</para>
<para>
The callback function will be called once per handshake.
</para>
<para>
The callback function should return 0 on success.
-1 indicates an error.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cred</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-hex-encode" role="function"/>gnutls_hex_encode ()</title>
<indexterm><primary>gnutls_hex_encode</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_hex_encode                   (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);</programlisting>
<para>
This function will convert the given data to printable data, using
the hex encoding, as used in the PSK password files.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-hex-decode" role="function"/>gnutls_hex_decode ()</title>
<indexterm><primary>gnutls_hex_decode</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_hex_decode                   (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *hex_data,
                                                         <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);</programlisting>
<para>
This function will decode the given encoded data, using the hex encoding
used by PSK password files.
</para>
<para>
Note that hex_data should be null terminated.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hex_data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-psk-set-server-dh-params" role="function"/>gnutls_psk_set_server_dh_params ()</title>
<indexterm><primary>gnutls_psk_set_server_dh_params</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_psk_set_server_dh_params     (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> res,
                                                         <link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dh_params);</programlisting>
<para>
This function will set the diffie hellman parameters for an
anonymous server to use. These parameters will be used in Diffie
Hellman with PSK cipher suites.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dh_params</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-psk-set-server-params-function" role="function"/>gnutls_psk_set_server_params_function ()</title>
<indexterm><primary>gnutls_psk_set_server_params_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_psk_set_server_params_function
                                                        (<link linkend="gnutls-psk-server-credentials-tres">gnutls_psk_server_credentials_tres</link> ,
                                                         <link linkend="gnutls-params-function">gnutls_params_function</link> *func);</programlisting>
<para>
This function will set a callback in order for the server to get
the diffie hellman parameters for PSK authentication. The callback
should return zero on success.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-x509-subject-alt-name-t" role="enum"/>enum gnutls_x509_subject_alt_name_t</title>
<indexterm><primary>gnutls_x509_subject_alt_name_t</primary></indexterm><programlisting>  typedef enum gnutls_x509_subject_alt_name_t
  {
    GNUTLS_SAN_DNSNAME = 1,
    GNUTLS_SAN_RFC822NAME,
    GNUTLS_SAN_URI,
    GNUTLS_SAN_IPADDRESS,
    GNUTLS_SAN_OTHERNAME,
    GNUTLS_SAN_DN,
    /* The following are "virtual" subject alternative name types, in
       that they are represented by an otherName value and an OID.
       Used by gnutls_x509_crt_get_subject_alt_othername_oid().  */
    GNUTLS_SAN_OTHERNAME_XMPP = 1000
  } gnutls_x509_subject_alt_name_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-openpgp-crt-int" role="struct"/>struct gnutls_openpgp_crt_int</title>
<indexterm><primary>gnutls_openpgp_crt_int</primary></indexterm><programlisting>struct gnutls_openpgp_crt_int;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-openpgp-crt-t" role="typedef"/>gnutls_openpgp_crt_t</title>
<indexterm><primary>gnutls_openpgp_crt_t</primary></indexterm><para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-openpgp-privkey-int" role="struct"/>struct gnutls_openpgp_privkey_int</title>
<indexterm><primary>gnutls_openpgp_privkey_int</primary></indexterm><programlisting>struct gnutls_openpgp_privkey_int;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-openpgp-privkey-t" role="typedef"/>gnutls_openpgp_privkey_t</title>
<indexterm><primary>gnutls_openpgp_privkey_t</primary></indexterm><para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-auth-get-type" role="function"/>gnutls_auth_get_type ()</title>
<indexterm><primary>gnutls_auth_get_type</primary></indexterm><programlisting><link linkend="gnutls-credentials-type-t">gnutls_credentials_type_t</link> gnutls_auth_get_type          (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-auth-server-get-type" role="function"/>gnutls_auth_server_get_type ()</title>
<indexterm><primary>gnutls_auth_server_get_type</primary></indexterm><programlisting><link linkend="gnutls-credentials-type-t">gnutls_credentials_type_t</link> gnutls_auth_server_get_type   (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-auth-client-get-type" role="function"/>gnutls_auth_client_get_type ()</title>
<indexterm><primary>gnutls_auth_client_get_type</primary></indexterm><programlisting><link linkend="gnutls-credentials-type-t">gnutls_credentials_type_t</link> gnutls_auth_client_get_type   (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-dh-set-prime-bits" role="function"/>gnutls_dh_set_prime_bits ()</title>
<indexterm><primary>gnutls_dh_set_prime_bits</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_dh_set_prime_bits            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         unsigned <link linkend="int">int</link> bits);</programlisting>
<para>
This function sets the number of bits, for use in an 
Diffie Hellman key exchange. This is used both in DH ephemeral and
DH anonymous cipher suites. This will set the
minimum size of the prime that will be used for the handshake.
</para>
<para>
In the client side it sets the minimum accepted number of bits.
If a server sends a prime with less bits than that 
GNUTLS_E_DH_PRIME_UNACCEPTABLE will be returned by the
handshake.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-dh-get-secret-bits" role="function"/>gnutls_dh_get_secret_bits ()</title>
<indexterm><primary>gnutls_dh_get_secret_bits</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_get_secret_bits           (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function will return the bits used in the last Diffie Hellman authentication
with the peer. Should be used for both anonymous and ephemeral diffie Hellman.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-dh-get-peers-public-bits" role="function"/>gnutls_dh_get_peers_public_bits ()</title>
<indexterm><primary>gnutls_dh_get_peers_public_bits</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_get_peers_public_bits     (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function will return the bits used in the last Diffie Hellman authentication
with the peer. Should be used for both anonymous and ephemeral diffie Hellman.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-dh-get-prime-bits" role="function"/>gnutls_dh_get_prime_bits ()</title>
<indexterm><primary>gnutls_dh_get_prime_bits</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_get_prime_bits            (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function will return the bits of the prime used in the last Diffie Hellman authentication
with the peer. Should be used for both anonymous and ephemeral diffie Hellman.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-dh-get-group" role="function"/>gnutls_dh_get_group ()</title>
<indexterm><primary>gnutls_dh_get_group</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_get_group                 (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *raw_gen,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *raw_prime);</programlisting>
<para>
This function will return the group parameters used in the last Diffie Hellman 
authentication with the peer. These are the prime and the generator used.
This function should be used for both anonymous and ephemeral diffie Hellman.
The output parameters must be freed with <link linkend="gnutls-free"><function>gnutls_free()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>raw_gen</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>raw_prime</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-dh-get-pubkey" role="function"/>gnutls_dh_get_pubkey ()</title>
<indexterm><primary>gnutls_dh_get_pubkey</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_get_pubkey                (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *raw_key);</programlisting>
<para>
This function will return the peer's public key used in the last Diffie Hellman authentication.
This function should be used for both anonymous and ephemeral diffie Hellman.
The output parameters must be freed with <link linkend="gnutls-free"><function>gnutls_free()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>raw_key</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-rsa-export-get-pubkey" role="function"/>gnutls_rsa_export_get_pubkey ()</title>
<indexterm><primary>gnutls_rsa_export_get_pubkey</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_rsa_export_get_pubkey        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *exponent,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *modulus);</programlisting>
<para>
This function will return the peer's public key exponent and
modulus used in the last RSA-EXPORT authentication.  The output
parameters must be freed with <link linkend="gnutls-free"><function>gnutls_free()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>exponent</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>modulus</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-rsa-export-get-modulus-bits" role="function"/>gnutls_rsa_export_get_modulus_bits ()</title>
<indexterm><primary>gnutls_rsa_export_get_modulus_bits</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_rsa_export_get_modulus_bits  (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function will return the bits used in the last RSA-EXPORT key exchange
with the peer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-sign-func" role="function"/>gnutls_sign_func ()</title>
<indexterm><primary>gnutls_sign_func</primary></indexterm><programlisting><link linkend="int">int</link>                 (*gnutls_sign_func)                 (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *userdata,
                                                         <link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link> cert_type,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *cert,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *hash,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *signature);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>userdata</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert_type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hash</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>signature</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-sign-callback-set" role="function"/>gnutls_sign_callback_set ()</title>
<indexterm><primary>gnutls_sign_callback_set</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_sign_callback_set            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-sign-func">gnutls_sign_func</link> sign_func,
                                                         <link linkend="void">void</link> *userdata);</programlisting>
<para>
Set the callback function.  The function must have this prototype:
</para>
<para>
typedef int (*gnutls_sign_func) (gnutls_session_t session,
                                 void *userdata,
                                 gnutls_certificate_type_t cert_type,
                                 const gnutls_datum_t * cert,
                                 const gnutls_datum_t * hash,
                                 gnutls_datum_t * signature);
</para>
<para>
The <parameter>userdata</parameter> parameter is passed to the <parameter>sign_func</parameter> verbatim, and
can be used to store application-specific data needed in the
callback function.  See also <link linkend="gnutls-sign-callback-get"><function>gnutls_sign_callback_get()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sign_func</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>userdata</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-sign-callback-get" role="function"/>gnutls_sign_callback_get ()</title>
<indexterm><primary>gnutls_sign_callback_get</primary></indexterm><programlisting><link linkend="gnutls-sign-func">gnutls_sign_func</link>    gnutls_sign_callback_get            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> **userdata);</programlisting>
<para>
Retrieve the callback function, and its userdata pointer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>userdata</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-client-set-retrieve-function" role="function"/>gnutls_certificate_client_set_retrieve_function ()</title>
<indexterm><primary>gnutls_certificate_client_set_retrieve_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_client_set_retrieve_function
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> cred,
                                                         <link linkend="gnutls-certificate-client-retrieve-function">gnutls_certificate_client_retrieve_function</link> *func);</programlisting>
<para>
This function sets a callback to be called in order to retrieve the certificate
to be used in the handshake.
The callback's function prototype is:
int (*callback)(gnutls_session_t, const gnutls_datum_t* req_ca_dn, int nreqs, 
const gnutls_pk_algorithm_t* pk_algos, int pk_algos_length, gnutls_retr_st* st);
</para>
<para>
<parameter>req_ca_cert</parameter> is only used in X.509 certificates. 
Contains a list with the CA names that the server considers trusted. 
Normally we should send a certificate that is signed
by one of these CAs. These names are DER encoded. To get a more
meaningful value use the function <link linkend="gnutls-x509-rdn-get"><function>gnutls_x509_rdn_get()</function></link>.
</para>
<para>
<parameter>pk_algos</parameter> contains a list with server's acceptable signature algorithms.
The certificate returned should support the server's given algorithms.
</para>
<para>
<parameter>st</parameter> should contain the certificates and private keys.
</para>
<para>
If the callback function is provided then gnutls will call it, in the
handshake, after the certificate request message has been received.
</para>
<para>
The callback function should set the certificate list to be sent, and
return 0 on success. If no certificate was selected then the number of certificates
should be set to zero. The value (-1) indicates error and the handshake
will be terminated.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cred</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-server-set-retrieve-function" role="function"/>gnutls_certificate_server_set_retrieve_function ()</title>
<indexterm><primary>gnutls_certificate_server_set_retrieve_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_server_set_retrieve_function
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> cred,
                                                         <link linkend="gnutls-certificate-server-retrieve-function">gnutls_certificate_server_retrieve_function</link> *func);</programlisting>
<para>
This function sets a callback to be called in order to retrieve the certificate
to be used in the handshake.
The callback's function prototype is:
int (*callback)(gnutls_session_t, gnutls_retr_st* st);
</para>
<para>
<parameter>st</parameter> should contain the certificates and private keys.
</para>
<para>
If the callback function is provided then gnutls will call it, in the
handshake, after the certificate request message has been received.
</para>
<para>
The callback function should set the certificate list to be sent, and
return 0 on success.  The value (-1) indicates error and the handshake
will be terminated.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cred</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-server-set-request" role="function"/>gnutls_certificate_server_set_request ()</title>
<indexterm><primary>gnutls_certificate_server_set_request</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_server_set_request
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-certificate-request-treq">gnutls_certificate_request_treq</link> );</programlisting>
<para>
This function specifies if we (in case of a server) are going
to send a certificate request message to the client. If <parameter>req</parameter>
is GNUTLS_CERT_REQUIRE then the server will return an error if
the peer does not provide a certificate. If you do not
call this function then the client will not be asked to
send a certificate.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-get-peers" role="function"/>gnutls_certificate_get_peers ()</title>
<indexterm><primary>gnutls_certificate_get_peers</primary></indexterm><programlisting>const <link linkend="gnutls-datum-t">gnutls_datum_t</link>* gnutls_certificate_get_peers      (<link linkend="gnutls-session-tsession">gnutls_session_tsession</link> ,
                                                         unsigned <link linkend="int">int</link> *list_size);</programlisting>
<para>
This function will return the peer's raw certificate (chain) as 
sent by the peer. These certificates are in raw format (DER encoded 
for X.509). In case of a X.509 then a certificate list may be present. 
The first certificate in the list is the peer's certificate,
following the issuer's certificate, then the issuer's issuer etc.
</para>
<para>
In case of OpenPGP keys a single key will be returned
in raw format.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list_size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-get-ours" role="function"/>gnutls_certificate_get_ours ()</title>
<indexterm><primary>gnutls_certificate_get_ours</primary></indexterm><programlisting>const <link linkend="gnutls-datum-t">gnutls_datum_t</link>* gnutls_certificate_get_ours       (<link linkend="gnutls-session-tsession">gnutls_session_tsession</link> );</programlisting>
<para>
This function will return the certificate as sent to the peer,
in the last handshake. These certificates are in raw format. 
In X.509 this is a certificate list. In OpenPGP this is a single
certificate.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-activation-time-peers" role="function"/>gnutls_certificate_activation_time_peers ()</title>
<indexterm><primary>gnutls_certificate_activation_time_peers</primary></indexterm><programlisting><link linkend="time-t">time_t</link>              gnutls_certificate_activation_time_peers
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function will return the peer's certificate activation time.
This is the creation time for openpgp keys.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-expiration-time-peers" role="function"/>gnutls_certificate_expiration_time_peers ()</title>
<indexterm><primary>gnutls_certificate_expiration_time_peers</primary></indexterm><programlisting><link linkend="time-t">time_t</link>              gnutls_certificate_expiration_time_peers
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function will return the peer's certificate expiration time.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-client-get-request-status" role="function"/>gnutls_certificate_client_get_request_status ()</title>
<indexterm><primary>gnutls_certificate_client_get_request_status</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_client_get_request_status
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function will return 0 if the peer (server) did not request client
authentication or 1 otherwise.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-verify-peers2" role="function"/>gnutls_certificate_verify_peers2 ()</title>
<indexterm><primary>gnutls_certificate_verify_peers2</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_verify_peers2    (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         unsigned <link linkend="int">int</link> *status);</programlisting>
<para>
This function will try to verify the peer's certificate and return
its status (trusted, invalid etc.).  The value of <parameter>status</parameter> should
be one or more of the gnutls_certificate_status_t enumerated
elements bitwise or'd. To avoid denial of service attacks some
default upper limits regarding the certificate key size and chain
size are set. To override them use
<link linkend="gnutls-certificate-set-verify-limits"><function>gnutls_certificate_set_verify_limits()</function></link>.
</para>
<para>
Note that you must also check the peer's name in order to check if
the verified certificate belongs to the actual peer.
</para>
<para>
This is the same as <link linkend="gnutls-x509-crt-list-verify"><function>gnutls_x509_crt_list_verify()</function></link> and uses the
loaded CAs in the credentials as trusted CAs.
</para>
<para>
Note that some commonly used X.509 Certificate Authorities are
still using Version 1 certificates.  If you want to accept them,
you need to call <link linkend="gnutls-certificate-set-verify-flags"><function>gnutls_certificate_set_verify_flags()</function></link> with, e.g.,
<link linkend="GNUTLS-VERIFY-ALLOW-X509-V1-CA-CRT:CAPS"><literal>GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT</literal></link> parameter.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-verify-peers" role="function" condition="deprecated:Use gnutls_certificate_verify_peers2() instead."/>gnutls_certificate_verify_peers ()</title>
<indexterm role="deprecated"><primary>gnutls_certificate_verify_peers</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_verify_peers     (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<warning><para><literal>gnutls_certificate_verify_peers</literal> is deprecated and should not be used in newly-written code. Use <link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link> instead.</para></warning>
<para>
This function will try to verify the peer's certificate and return
its status (trusted, invalid etc.).  However you must also check
the peer's name in order to check if the verified certificate
belongs to the actual peer.
</para>
<para>
The return value should be one or more of the
gnutls_certificate_status_t enumerated elements bitwise or'd, or a
negative value on error.
</para>
<para>
This is the same as <link linkend="gnutls-x509-crt-list-verify"><function>gnutls_x509_crt_list_verify()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-pem-base64-encode" role="function"/>gnutls_pem_base64_encode ()</title>
<indexterm><primary>gnutls_pem_base64_encode</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pem_base64_encode            (const <link linkend="char">char</link> *msg,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);</programlisting>
<para>
This function will convert the given data to printable data, using the base64 
encoding. This is the encoding used in PEM messages. If the provided
buffer is not long enough GNUTLS_E_SHORT_MEMORY_BUFFER is returned.
</para>
<para>
The output string will be null terminated, although the size will not include
the terminating null.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-pem-base64-decode" role="function"/>gnutls_pem_base64_decode ()</title>
<indexterm><primary>gnutls_pem_base64_decode</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pem_base64_decode            (const <link linkend="char">char</link> *header,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *b64_data,
                                                         unsigned <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);</programlisting>
<para>
This function will decode the given encoded data. If the header given
is non null this function will search for "-----BEGIN header" and decode
only this part. Otherwise it will decode the first PEM packet found.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>header</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b64_data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-pem-base64-encode-alloc" role="function"/>gnutls_pem_base64_encode_alloc ()</title>
<indexterm><primary>gnutls_pem_base64_encode_alloc</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pem_base64_encode_alloc      (const <link linkend="char">char</link> *msg,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *result);</programlisting>
<para>
This function will convert the given data to printable data, using the base64 
encoding. This is the encoding used in PEM messages. This function will
allocate the required memory to hold the encoded data.
</para>
<para>
You should use <link linkend="gnutls-free"><function>gnutls_free()</function></link> to free the returned data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-pem-base64-decode-alloc" role="function"/>gnutls_pem_base64_decode_alloc ()</title>
<indexterm><primary>gnutls_pem_base64_decode_alloc</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pem_base64_decode_alloc      (const <link linkend="char">char</link> *header,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *b64_data,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *result);</programlisting>
<para>
This function will decode the given encoded data. The decoded data
will be allocated, and stored into result.
If the header given is non null this function will search for 
"-----BEGIN header" and decode only this part. Otherwise it will decode the 
first PEM packet found.
</para>
<para>
You should use <link linkend="gnutls-free"><function>gnutls_free()</function></link> to free the returned data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>header</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b64_data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GNUTLS-KEY-DIGITAL-SIGNATURE:CAPS" role="macro"/>GNUTLS_KEY_DIGITAL_SIGNATURE</title>
<indexterm><primary>GNUTLS_KEY_DIGITAL_SIGNATURE</primary></indexterm><programlisting>#define             GNUTLS_KEY_DIGITAL_SIGNATURE</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-KEY-NON-REPUDIATION:CAPS" role="macro"/>GNUTLS_KEY_NON_REPUDIATION</title>
<indexterm><primary>GNUTLS_KEY_NON_REPUDIATION</primary></indexterm><programlisting>#define             GNUTLS_KEY_NON_REPUDIATION</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-KEY-KEY-ENCIPHERMENT:CAPS" role="macro"/>GNUTLS_KEY_KEY_ENCIPHERMENT</title>
<indexterm><primary>GNUTLS_KEY_KEY_ENCIPHERMENT</primary></indexterm><programlisting>#define             GNUTLS_KEY_KEY_ENCIPHERMENT</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-KEY-DATA-ENCIPHERMENT:CAPS" role="macro"/>GNUTLS_KEY_DATA_ENCIPHERMENT</title>
<indexterm><primary>GNUTLS_KEY_DATA_ENCIPHERMENT</primary></indexterm><programlisting>#define             GNUTLS_KEY_DATA_ENCIPHERMENT</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-KEY-KEY-AGREEMENT:CAPS" role="macro"/>GNUTLS_KEY_KEY_AGREEMENT</title>
<indexterm><primary>GNUTLS_KEY_KEY_AGREEMENT</primary></indexterm><programlisting>#define             GNUTLS_KEY_KEY_AGREEMENT</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-KEY-KEY-CERT-SIGN:CAPS" role="macro"/>GNUTLS_KEY_KEY_CERT_SIGN</title>
<indexterm><primary>GNUTLS_KEY_KEY_CERT_SIGN</primary></indexterm><programlisting>#define             GNUTLS_KEY_KEY_CERT_SIGN</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-KEY-CRL-SIGN:CAPS" role="macro"/>GNUTLS_KEY_CRL_SIGN</title>
<indexterm><primary>GNUTLS_KEY_CRL_SIGN</primary></indexterm><programlisting>#define             GNUTLS_KEY_CRL_SIGN</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-KEY-ENCIPHER-ONLY:CAPS" role="macro"/>GNUTLS_KEY_ENCIPHER_ONLY</title>
<indexterm><primary>GNUTLS_KEY_ENCIPHER_ONLY</primary></indexterm><programlisting>#define             GNUTLS_KEY_ENCIPHER_ONLY</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-KEY-DECIPHER-ONLY:CAPS" role="macro"/>GNUTLS_KEY_DECIPHER_ONLY</title>
<indexterm><primary>GNUTLS_KEY_DECIPHER_ONLY</primary></indexterm><programlisting>#define             GNUTLS_KEY_DECIPHER_ONLY</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gnutls-certificate-set-params-function" role="function"/>gnutls_certificate_set_params_function ()</title>
<indexterm><primary>gnutls_certificate_set_params_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_set_params_function
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-params-function">gnutls_params_function</link> *func);</programlisting>
<para>
This function will set a callback in order for the server to get the 
diffie hellman or RSA parameters for certificate authentication. The callback
should return zero on success.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-anon-set-params-function" role="function"/>gnutls_anon_set_params_function ()</title>
<indexterm><primary>gnutls_anon_set_params_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_anon_set_params_function     (<link linkend="gnutls-anon-server-credentials-t">gnutls_anon_server_credentials_t</link> res,
                                                         <link linkend="gnutls-params-function">gnutls_params_function</link> *func);</programlisting>
<para>
This function will set a callback in order for the server to get the 
diffie hellman or RSA parameters for anonymous authentication. The callback
should return zero on success.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gnutls-psk-set-params-function" role="function"/>gnutls_psk_set_params_function ()</title>
<indexterm><primary>gnutls_psk_set_params_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_psk_set_params_function      (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> res,
                                                         <link linkend="gnutls-params-function">gnutls_params_function</link> *func);</programlisting>
<para>
This function will set a callback in order for the server to get the 
diffie hellman or RSA parameters for psk authentication. The callback
should return zero on success.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-SUCCESS:CAPS" role="macro"/>GNUTLS_E_SUCCESS</title>
<indexterm><primary>GNUTLS_E_SUCCESS</primary></indexterm><programlisting>#define             GNUTLS_E_SUCCESS</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-UNKNOWN-COMPRESSION-ALGORITHM:CAPS" role="macro"/>GNUTLS_E_UNKNOWN_COMPRESSION_ALGORITHM</title>
<indexterm><primary>GNUTLS_E_UNKNOWN_COMPRESSION_ALGORITHM</primary></indexterm><programlisting>#define             GNUTLS_E_UNKNOWN_COMPRESSION_ALGORITHM</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-UNKNOWN-CIPHER-TYPE:CAPS" role="macro"/>GNUTLS_E_UNKNOWN_CIPHER_TYPE</title>
<indexterm><primary>GNUTLS_E_UNKNOWN_CIPHER_TYPE</primary></indexterm><programlisting>#define             GNUTLS_E_UNKNOWN_CIPHER_TYPE</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-LARGE-PACKET:CAPS" role="macro"/>GNUTLS_E_LARGE_PACKET</title>
<indexterm><primary>GNUTLS_E_LARGE_PACKET</primary></indexterm><programlisting>#define             GNUTLS_E_LARGE_PACKET</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-UNSUPPORTED-VERSION-PACKET:CAPS" role="macro"/>GNUTLS_E_UNSUPPORTED_VERSION_PACKET</title>
<indexterm><primary>GNUTLS_E_UNSUPPORTED_VERSION_PACKET</primary></indexterm><programlisting>#define             GNUTLS_E_UNSUPPORTED_VERSION_PACKET</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-UNEXPECTED-PACKET-LENGTH:CAPS" role="macro"/>GNUTLS_E_UNEXPECTED_PACKET_LENGTH</title>
<indexterm><primary>GNUTLS_E_UNEXPECTED_PACKET_LENGTH</primary></indexterm><programlisting>#define             GNUTLS_E_UNEXPECTED_PACKET_LENGTH</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-INVALID-SESSION:CAPS" role="macro"/>GNUTLS_E_INVALID_SESSION</title>
<indexterm><primary>GNUTLS_E_INVALID_SESSION</primary></indexterm><programlisting>#define             GNUTLS_E_INVALID_SESSION</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-FATAL-ALERT-RECEIVED:CAPS" role="macro"/>GNUTLS_E_FATAL_ALERT_RECEIVED</title>
<indexterm><primary>GNUTLS_E_FATAL_ALERT_RECEIVED</primary></indexterm><programlisting>#define             GNUTLS_E_FATAL_ALERT_RECEIVED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-UNEXPECTED-PACKET:CAPS" role="macro"/>GNUTLS_E_UNEXPECTED_PACKET</title>
<indexterm><primary>GNUTLS_E_UNEXPECTED_PACKET</primary></indexterm><programlisting>#define             GNUTLS_E_UNEXPECTED_PACKET</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-WARNING-ALERT-RECEIVED:CAPS" role="macro"/>GNUTLS_E_WARNING_ALERT_RECEIVED</title>
<indexterm><primary>GNUTLS_E_WARNING_ALERT_RECEIVED</primary></indexterm><programlisting>#define             GNUTLS_E_WARNING_ALERT_RECEIVED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-ERROR-IN-FINISHED-PACKET:CAPS" role="macro"/>GNUTLS_E_ERROR_IN_FINISHED_PACKET</title>
<indexterm><primary>GNUTLS_E_ERROR_IN_FINISHED_PACKET</primary></indexterm><programlisting>#define             GNUTLS_E_ERROR_IN_FINISHED_PACKET</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-UNEXPECTED-HANDSHAKE-PACKET:CAPS" role="macro"/>GNUTLS_E_UNEXPECTED_HANDSHAKE_PACKET</title>
<indexterm><primary>GNUTLS_E_UNEXPECTED_HANDSHAKE_PACKET</primary></indexterm><programlisting>#define             GNUTLS_E_UNEXPECTED_HANDSHAKE_PACKET</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-UNKNOWN-CIPHER-SUITE:CAPS" role="macro"/>GNUTLS_E_UNKNOWN_CIPHER_SUITE</title>
<indexterm><primary>GNUTLS_E_UNKNOWN_CIPHER_SUITE</primary></indexterm><programlisting>#define             GNUTLS_E_UNKNOWN_CIPHER_SUITE</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-UNWANTED-ALGORITHM:CAPS" role="macro"/>GNUTLS_E_UNWANTED_ALGORITHM</title>
<indexterm><primary>GNUTLS_E_UNWANTED_ALGORITHM</primary></indexterm><programlisting>#define             GNUTLS_E_UNWANTED_ALGORITHM</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-MPI-SCAN-FAILED:CAPS" role="macro"/>GNUTLS_E_MPI_SCAN_FAILED</title>
<indexterm><primary>GNUTLS_E_MPI_SCAN_FAILED</primary></indexterm><programlisting>#define             GNUTLS_E_MPI_SCAN_FAILED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-DECRYPTION-FAILED:CAPS" role="macro"/>GNUTLS_E_DECRYPTION_FAILED</title>
<indexterm><primary>GNUTLS_E_DECRYPTION_FAILED</primary></indexterm><programlisting>#define             GNUTLS_E_DECRYPTION_FAILED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-MEMORY-ERROR:CAPS" role="macro"/>GNUTLS_E_MEMORY_ERROR</title>
<indexterm><primary>GNUTLS_E_MEMORY_ERROR</primary></indexterm><programlisting>#define             GNUTLS_E_MEMORY_ERROR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-DECOMPRESSION-FAILED:CAPS" role="macro"/>GNUTLS_E_DECOMPRESSION_FAILED</title>
<indexterm><primary>GNUTLS_E_DECOMPRESSION_FAILED</primary></indexterm><programlisting>#define             GNUTLS_E_DECOMPRESSION_FAILED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-COMPRESSION-FAILED:CAPS" role="macro"/>GNUTLS_E_COMPRESSION_FAILED</title>
<indexterm><primary>GNUTLS_E_COMPRESSION_FAILED</primary></indexterm><programlisting>#define             GNUTLS_E_COMPRESSION_FAILED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-AGAIN:CAPS" role="macro"/>GNUTLS_E_AGAIN</title>
<indexterm><primary>GNUTLS_E_AGAIN</primary></indexterm><programlisting>#define             GNUTLS_E_AGAIN</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-EXPIRED:CAPS" role="macro"/>GNUTLS_E_EXPIRED</title>
<indexterm><primary>GNUTLS_E_EXPIRED</primary></indexterm><programlisting>#define             GNUTLS_E_EXPIRED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-DB-ERROR:CAPS" role="macro"/>GNUTLS_E_DB_ERROR</title>
<indexterm><primary>GNUTLS_E_DB_ERROR</primary></indexterm><programlisting>#define             GNUTLS_E_DB_ERROR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-SRP-PWD-ERROR:CAPS" role="macro"/>GNUTLS_E_SRP_PWD_ERROR</title>
<indexterm><primary>GNUTLS_E_SRP_PWD_ERROR</primary></indexterm><programlisting>#define             GNUTLS_E_SRP_PWD_ERROR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-INSUFFICIENT-CREDENTIALS:CAPS" role="macro"/>GNUTLS_E_INSUFFICIENT_CREDENTIALS</title>
<indexterm><primary>GNUTLS_E_INSUFFICIENT_CREDENTIALS</primary></indexterm><programlisting>#define             GNUTLS_E_INSUFFICIENT_CREDENTIALS</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-INSUFICIENT-CREDENTIALS:CAPS" role="macro"/>GNUTLS_E_INSUFICIENT_CREDENTIALS</title>
<indexterm><primary>GNUTLS_E_INSUFICIENT_CREDENTIALS</primary></indexterm><programlisting>#define             GNUTLS_E_INSUFICIENT_CREDENTIALS</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-INSUFFICIENT-CRED:CAPS" role="macro"/>GNUTLS_E_INSUFFICIENT_CRED</title>
<indexterm><primary>GNUTLS_E_INSUFFICIENT_CRED</primary></indexterm><programlisting>#define             GNUTLS_E_INSUFFICIENT_CRED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-INSUFICIENT-CRED:CAPS" role="macro"/>GNUTLS_E_INSUFICIENT_CRED</title>
<indexterm><primary>GNUTLS_E_INSUFICIENT_CRED</primary></indexterm><programlisting>#define             GNUTLS_E_INSUFICIENT_CRED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-HASH-FAILED:CAPS" role="macro"/>GNUTLS_E_HASH_FAILED</title>
<indexterm><primary>GNUTLS_E_HASH_FAILED</primary></indexterm><programlisting>#define             GNUTLS_E_HASH_FAILED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-BASE64-DECODING-ERROR:CAPS" role="macro"/>GNUTLS_E_BASE64_DECODING_ERROR</title>
<indexterm><primary>GNUTLS_E_BASE64_DECODING_ERROR</primary></indexterm><programlisting>#define             GNUTLS_E_BASE64_DECODING_ERROR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-MPI-PRINT-FAILED:CAPS" role="macro"/>GNUTLS_E_MPI_PRINT_FAILED</title>
<indexterm><primary>GNUTLS_E_MPI_PRINT_FAILED</primary></indexterm><programlisting>#define             GNUTLS_E_MPI_PRINT_FAILED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-REHANDSHAKE:CAPS" role="macro"/>GNUTLS_E_REHANDSHAKE</title>
<indexterm><primary>GNUTLS_E_REHANDSHAKE</primary></indexterm><programlisting>#define             GNUTLS_E_REHANDSHAKE</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-GOT-APPLICATION-DATA:CAPS" role="macro"/>GNUTLS_E_GOT_APPLICATION_DATA</title>
<indexterm><primary>GNUTLS_E_GOT_APPLICATION_DATA</primary></indexterm><programlisting>#define             GNUTLS_E_GOT_APPLICATION_DATA</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-RECORD-LIMIT-REACHED:CAPS" role="macro"/>GNUTLS_E_RECORD_LIMIT_REACHED</title>
<indexterm><primary>GNUTLS_E_RECORD_LIMIT_REACHED</primary></indexterm><programlisting>#define             GNUTLS_E_RECORD_LIMIT_REACHED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-ENCRYPTION-FAILED:CAPS" role="macro"/>GNUTLS_E_ENCRYPTION_FAILED</title>
<indexterm><primary>GNUTLS_E_ENCRYPTION_FAILED</primary></indexterm><programlisting>#define             GNUTLS_E_ENCRYPTION_FAILED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-PK-ENCRYPTION-FAILED:CAPS" role="macro"/>GNUTLS_E_PK_ENCRYPTION_FAILED</title>
<indexterm><primary>GNUTLS_E_PK_ENCRYPTION_FAILED</primary></indexterm><programlisting>#define             GNUTLS_E_PK_ENCRYPTION_FAILED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-PK-DECRYPTION-FAILED:CAPS" role="macro"/>GNUTLS_E_PK_DECRYPTION_FAILED</title>
<indexterm><primary>GNUTLS_E_PK_DECRYPTION_FAILED</primary></indexterm><programlisting>#define             GNUTLS_E_PK_DECRYPTION_FAILED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-PK-SIGN-FAILED:CAPS" role="macro"/>GNUTLS_E_PK_SIGN_FAILED</title>
<indexterm><primary>GNUTLS_E_PK_SIGN_FAILED</primary></indexterm><programlisting>#define             GNUTLS_E_PK_SIGN_FAILED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-X509-UNSUPPORTED-CRITICAL-EXTENSION:CAPS" role="macro"/>GNUTLS_E_X509_UNSUPPORTED_CRITICAL_EXTENSION</title>
<indexterm><primary>GNUTLS_E_X509_UNSUPPORTED_CRITICAL_EXTENSION</primary></indexterm><programlisting>#define             GNUTLS_E_X509_UNSUPPORTED_CRITICAL_EXTENSION</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-KEY-USAGE-VIOLATION:CAPS" role="macro"/>GNUTLS_E_KEY_USAGE_VIOLATION</title>
<indexterm><primary>GNUTLS_E_KEY_USAGE_VIOLATION</primary></indexterm><programlisting>#define             GNUTLS_E_KEY_USAGE_VIOLATION</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-NO-CERTIFICATE-FOUND:CAPS" role="macro"/>GNUTLS_E_NO_CERTIFICATE_FOUND</title>
<indexterm><primary>GNUTLS_E_NO_CERTIFICATE_FOUND</primary></indexterm><programlisting>#define             GNUTLS_E_NO_CERTIFICATE_FOUND</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-INVALID-REQUEST:CAPS" role="macro"/>GNUTLS_E_INVALID_REQUEST</title>
<indexterm><primary>GNUTLS_E_INVALID_REQUEST</primary></indexterm><programlisting>#define             GNUTLS_E_INVALID_REQUEST</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-SHORT-MEMORY-BUFFER:CAPS" role="macro"/>GNUTLS_E_SHORT_MEMORY_BUFFER</title>
<indexterm><primary>GNUTLS_E_SHORT_MEMORY_BUFFER</primary></indexterm><programlisting>#define             GNUTLS_E_SHORT_MEMORY_BUFFER</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-INTERRUPTED:CAPS" role="macro"/>GNUTLS_E_INTERRUPTED</title>
<indexterm><primary>GNUTLS_E_INTERRUPTED</primary></indexterm><programlisting>#define             GNUTLS_E_INTERRUPTED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-PUSH-ERROR:CAPS" role="macro"/>GNUTLS_E_PUSH_ERROR</title>
<indexterm><primary>GNUTLS_E_PUSH_ERROR</primary></indexterm><programlisting>#define             GNUTLS_E_PUSH_ERROR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-PULL-ERROR:CAPS" role="macro"/>GNUTLS_E_PULL_ERROR</title>
<indexterm><primary>GNUTLS_E_PULL_ERROR</primary></indexterm><programlisting>#define             GNUTLS_E_PULL_ERROR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-RECEIVED-ILLEGAL-PARAMETER:CAPS" role="macro"/>GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER</title>
<indexterm><primary>GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER</primary></indexterm><programlisting>#define             GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE:CAPS" role="macro"/>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</title>
<indexterm><primary>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</primary></indexterm><programlisting>#define             GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-PKCS1-WRONG-PAD:CAPS" role="macro"/>GNUTLS_E_PKCS1_WRONG_PAD</title>
<indexterm><primary>GNUTLS_E_PKCS1_WRONG_PAD</primary></indexterm><programlisting>#define             GNUTLS_E_PKCS1_WRONG_PAD</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-RECEIVED-ILLEGAL-EXTENSION:CAPS" role="macro"/>GNUTLS_E_RECEIVED_ILLEGAL_EXTENSION</title>
<indexterm><primary>GNUTLS_E_RECEIVED_ILLEGAL_EXTENSION</primary></indexterm><programlisting>#define             GNUTLS_E_RECEIVED_ILLEGAL_EXTENSION</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-INTERNAL-ERROR:CAPS" role="macro"/>GNUTLS_E_INTERNAL_ERROR</title>
<indexterm><primary>GNUTLS_E_INTERNAL_ERROR</primary></indexterm><programlisting>#define             GNUTLS_E_INTERNAL_ERROR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-DH-PRIME-UNACCEPTABLE:CAPS" role="macro"/>GNUTLS_E_DH_PRIME_UNACCEPTABLE</title>
<indexterm><primary>GNUTLS_E_DH_PRIME_UNACCEPTABLE</primary></indexterm><programlisting>#define             GNUTLS_E_DH_PRIME_UNACCEPTABLE</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-FILE-ERROR:CAPS" role="macro"/>GNUTLS_E_FILE_ERROR</title>
<indexterm><primary>GNUTLS_E_FILE_ERROR</primary></indexterm><programlisting>#define             GNUTLS_E_FILE_ERROR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-TOO-MANY-EMPTY-PACKETS:CAPS" role="macro"/>GNUTLS_E_TOO_MANY_EMPTY_PACKETS</title>
<indexterm><primary>GNUTLS_E_TOO_MANY_EMPTY_PACKETS</primary></indexterm><programlisting>#define             GNUTLS_E_TOO_MANY_EMPTY_PACKETS</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-UNKNOWN-PK-ALGORITHM:CAPS" role="macro"/>GNUTLS_E_UNKNOWN_PK_ALGORITHM</title>
<indexterm><primary>GNUTLS_E_UNKNOWN_PK_ALGORITHM</primary></indexterm><programlisting>#define             GNUTLS_E_UNKNOWN_PK_ALGORITHM</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-INIT-LIBEXTRA:CAPS" role="macro"/>GNUTLS_E_INIT_LIBEXTRA</title>
<indexterm><primary>GNUTLS_E_INIT_LIBEXTRA</primary></indexterm><programlisting>#define             GNUTLS_E_INIT_LIBEXTRA</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-LIBRARY-VERSION-MISMATCH:CAPS" role="macro"/>GNUTLS_E_LIBRARY_VERSION_MISMATCH</title>
<indexterm><primary>GNUTLS_E_LIBRARY_VERSION_MISMATCH</primary></indexterm><programlisting>#define             GNUTLS_E_LIBRARY_VERSION_MISMATCH</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-NO-TEMPORARY-RSA-PARAMS:CAPS" role="macro"/>GNUTLS_E_NO_TEMPORARY_RSA_PARAMS</title>
<indexterm><primary>GNUTLS_E_NO_TEMPORARY_RSA_PARAMS</primary></indexterm><programlisting>#define             GNUTLS_E_NO_TEMPORARY_RSA_PARAMS</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-LZO-INIT-FAILED:CAPS" role="macro"/>GNUTLS_E_LZO_INIT_FAILED</title>
<indexterm><primary>GNUTLS_E_LZO_INIT_FAILED</primary></indexterm><programlisting>#define             GNUTLS_E_LZO_INIT_FAILED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-NO-COMPRESSION-ALGORITHMS:CAPS" role="macro"/>GNUTLS_E_NO_COMPRESSION_ALGORITHMS</title>
<indexterm><primary>GNUTLS_E_NO_COMPRESSION_ALGORITHMS</primary></indexterm><programlisting>#define             GNUTLS_E_NO_COMPRESSION_ALGORITHMS</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-NO-CIPHER-SUITES:CAPS" role="macro"/>GNUTLS_E_NO_CIPHER_SUITES</title>
<indexterm><primary>GNUTLS_E_NO_CIPHER_SUITES</primary></indexterm><programlisting>#define             GNUTLS_E_NO_CIPHER_SUITES</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-OPENPGP-GETKEY-FAILED:CAPS" role="macro"/>GNUTLS_E_OPENPGP_GETKEY_FAILED</title>
<indexterm><primary>GNUTLS_E_OPENPGP_GETKEY_FAILED</primary></indexterm><programlisting>#define             GNUTLS_E_OPENPGP_GETKEY_FAILED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-PK-SIG-VERIFY-FAILED:CAPS" role="macro"/>GNUTLS_E_PK_SIG_VERIFY_FAILED</title>
<indexterm><primary>GNUTLS_E_PK_SIG_VERIFY_FAILED</primary></indexterm><programlisting>#define             GNUTLS_E_PK_SIG_VERIFY_FAILED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-ILLEGAL-SRP-USERNAME:CAPS" role="macro"/>GNUTLS_E_ILLEGAL_SRP_USERNAME</title>
<indexterm><primary>GNUTLS_E_ILLEGAL_SRP_USERNAME</primary></indexterm><programlisting>#define             GNUTLS_E_ILLEGAL_SRP_USERNAME</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-SRP-PWD-PARSING-ERROR:CAPS" role="macro"/>GNUTLS_E_SRP_PWD_PARSING_ERROR</title>
<indexterm><primary>GNUTLS_E_SRP_PWD_PARSING_ERROR</primary></indexterm><programlisting>#define             GNUTLS_E_SRP_PWD_PARSING_ERROR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-NO-TEMPORARY-DH-PARAMS:CAPS" role="macro"/>GNUTLS_E_NO_TEMPORARY_DH_PARAMS</title>
<indexterm><primary>GNUTLS_E_NO_TEMPORARY_DH_PARAMS</primary></indexterm><programlisting>#define             GNUTLS_E_NO_TEMPORARY_DH_PARAMS</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-ASN1-ELEMENT-NOT-FOUND:CAPS" role="macro"/>GNUTLS_E_ASN1_ELEMENT_NOT_FOUND</title>
<indexterm><primary>GNUTLS_E_ASN1_ELEMENT_NOT_FOUND</primary></indexterm><programlisting>#define             GNUTLS_E_ASN1_ELEMENT_NOT_FOUND</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-ASN1-IDENTIFIER-NOT-FOUND:CAPS" role="macro"/>GNUTLS_E_ASN1_IDENTIFIER_NOT_FOUND</title>
<indexterm><primary>GNUTLS_E_ASN1_IDENTIFIER_NOT_FOUND</primary></indexterm><programlisting>#define             GNUTLS_E_ASN1_IDENTIFIER_NOT_FOUND</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-ASN1-DER-ERROR:CAPS" role="macro"/>GNUTLS_E_ASN1_DER_ERROR</title>
<indexterm><primary>GNUTLS_E_ASN1_DER_ERROR</primary></indexterm><programlisting>#define             GNUTLS_E_ASN1_DER_ERROR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-ASN1-VALUE-NOT-FOUND:CAPS" role="macro"/>GNUTLS_E_ASN1_VALUE_NOT_FOUND</title>
<indexterm><primary>GNUTLS_E_ASN1_VALUE_NOT_FOUND</primary></indexterm><programlisting>#define             GNUTLS_E_ASN1_VALUE_NOT_FOUND</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-ASN1-GENERIC-ERROR:CAPS" role="macro"/>GNUTLS_E_ASN1_GENERIC_ERROR</title>
<indexterm><primary>GNUTLS_E_ASN1_GENERIC_ERROR</primary></indexterm><programlisting>#define             GNUTLS_E_ASN1_GENERIC_ERROR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-ASN1-VALUE-NOT-VALID:CAPS" role="macro"/>GNUTLS_E_ASN1_VALUE_NOT_VALID</title>
<indexterm><primary>GNUTLS_E_ASN1_VALUE_NOT_VALID</primary></indexterm><programlisting>#define             GNUTLS_E_ASN1_VALUE_NOT_VALID</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-ASN1-TAG-ERROR:CAPS" role="macro"/>GNUTLS_E_ASN1_TAG_ERROR</title>
<indexterm><primary>GNUTLS_E_ASN1_TAG_ERROR</primary></indexterm><programlisting>#define             GNUTLS_E_ASN1_TAG_ERROR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-ASN1-TAG-IMPLICIT:CAPS" role="macro"/>GNUTLS_E_ASN1_TAG_IMPLICIT</title>
<indexterm><primary>GNUTLS_E_ASN1_TAG_IMPLICIT</primary></indexterm><programlisting>#define             GNUTLS_E_ASN1_TAG_IMPLICIT</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-ASN1-TYPE-ANY-ERROR:CAPS" role="macro"/>GNUTLS_E_ASN1_TYPE_ANY_ERROR</title>
<indexterm><primary>GNUTLS_E_ASN1_TYPE_ANY_ERROR</primary></indexterm><programlisting>#define             GNUTLS_E_ASN1_TYPE_ANY_ERROR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-ASN1-SYNTAX-ERROR:CAPS" role="macro"/>GNUTLS_E_ASN1_SYNTAX_ERROR</title>
<indexterm><primary>GNUTLS_E_ASN1_SYNTAX_ERROR</primary></indexterm><programlisting>#define             GNUTLS_E_ASN1_SYNTAX_ERROR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-ASN1-DER-OVERFLOW:CAPS" role="macro"/>GNUTLS_E_ASN1_DER_OVERFLOW</title>
<indexterm><primary>GNUTLS_E_ASN1_DER_OVERFLOW</primary></indexterm><programlisting>#define             GNUTLS_E_ASN1_DER_OVERFLOW</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-OPENPGP-UID-REVOKED:CAPS" role="macro"/>GNUTLS_E_OPENPGP_UID_REVOKED</title>
<indexterm><primary>GNUTLS_E_OPENPGP_UID_REVOKED</primary></indexterm><programlisting>#define             GNUTLS_E_OPENPGP_UID_REVOKED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-CERTIFICATE-ERROR:CAPS" role="macro"/>GNUTLS_E_CERTIFICATE_ERROR</title>
<indexterm><primary>GNUTLS_E_CERTIFICATE_ERROR</primary></indexterm><programlisting>#define             GNUTLS_E_CERTIFICATE_ERROR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-X509-CERTIFICATE-ERROR:CAPS" role="macro"/>GNUTLS_E_X509_CERTIFICATE_ERROR</title>
<indexterm><primary>GNUTLS_E_X509_CERTIFICATE_ERROR</primary></indexterm><programlisting>#define             GNUTLS_E_X509_CERTIFICATE_ERROR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-CERTIFICATE-KEY-MISMATCH:CAPS" role="macro"/>GNUTLS_E_CERTIFICATE_KEY_MISMATCH</title>
<indexterm><primary>GNUTLS_E_CERTIFICATE_KEY_MISMATCH</primary></indexterm><programlisting>#define             GNUTLS_E_CERTIFICATE_KEY_MISMATCH</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-UNSUPPORTED-CERTIFICATE-TYPE:CAPS" role="macro"/>GNUTLS_E_UNSUPPORTED_CERTIFICATE_TYPE</title>
<indexterm><primary>GNUTLS_E_UNSUPPORTED_CERTIFICATE_TYPE</primary></indexterm><programlisting>#define             GNUTLS_E_UNSUPPORTED_CERTIFICATE_TYPE</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-X509-UNKNOWN-SAN:CAPS" role="macro"/>GNUTLS_E_X509_UNKNOWN_SAN</title>
<indexterm><primary>GNUTLS_E_X509_UNKNOWN_SAN</primary></indexterm><programlisting>#define             GNUTLS_E_X509_UNKNOWN_SAN</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-OPENPGP-FINGERPRINT-UNSUPPORTED:CAPS" role="macro"/>GNUTLS_E_OPENPGP_FINGERPRINT_UNSUPPORTED</title>
<indexterm><primary>GNUTLS_E_OPENPGP_FINGERPRINT_UNSUPPORTED</primary></indexterm><programlisting>#define             GNUTLS_E_OPENPGP_FINGERPRINT_UNSUPPORTED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-X509-UNSUPPORTED-ATTRIBUTE:CAPS" role="macro"/>GNUTLS_E_X509_UNSUPPORTED_ATTRIBUTE</title>
<indexterm><primary>GNUTLS_E_X509_UNSUPPORTED_ATTRIBUTE</primary></indexterm><programlisting>#define             GNUTLS_E_X509_UNSUPPORTED_ATTRIBUTE</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-UNKNOWN-HASH-ALGORITHM:CAPS" role="macro"/>GNUTLS_E_UNKNOWN_HASH_ALGORITHM</title>
<indexterm><primary>GNUTLS_E_UNKNOWN_HASH_ALGORITHM</primary></indexterm><programlisting>#define             GNUTLS_E_UNKNOWN_HASH_ALGORITHM</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-UNKNOWN-PKCS-CONTENT-TYPE:CAPS" role="macro"/>GNUTLS_E_UNKNOWN_PKCS_CONTENT_TYPE</title>
<indexterm><primary>GNUTLS_E_UNKNOWN_PKCS_CONTENT_TYPE</primary></indexterm><programlisting>#define             GNUTLS_E_UNKNOWN_PKCS_CONTENT_TYPE</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-UNKNOWN-PKCS-BAG-TYPE:CAPS" role="macro"/>GNUTLS_E_UNKNOWN_PKCS_BAG_TYPE</title>
<indexterm><primary>GNUTLS_E_UNKNOWN_PKCS_BAG_TYPE</primary></indexterm><programlisting>#define             GNUTLS_E_UNKNOWN_PKCS_BAG_TYPE</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-INVALID-PASSWORD:CAPS" role="macro"/>GNUTLS_E_INVALID_PASSWORD</title>
<indexterm><primary>GNUTLS_E_INVALID_PASSWORD</primary></indexterm><programlisting>#define             GNUTLS_E_INVALID_PASSWORD</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-MAC-VERIFY-FAILED:CAPS" role="macro"/>GNUTLS_E_MAC_VERIFY_FAILED</title>
<indexterm><primary>GNUTLS_E_MAC_VERIFY_FAILED</primary></indexterm><programlisting>#define             GNUTLS_E_MAC_VERIFY_FAILED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-CONSTRAINT-ERROR:CAPS" role="macro"/>GNUTLS_E_CONSTRAINT_ERROR</title>
<indexterm><primary>GNUTLS_E_CONSTRAINT_ERROR</primary></indexterm><programlisting>#define             GNUTLS_E_CONSTRAINT_ERROR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-WARNING-IA-IPHF-RECEIVED:CAPS" role="macro"/>GNUTLS_E_WARNING_IA_IPHF_RECEIVED</title>
<indexterm><primary>GNUTLS_E_WARNING_IA_IPHF_RECEIVED</primary></indexterm><programlisting>#define             GNUTLS_E_WARNING_IA_IPHF_RECEIVED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-WARNING-IA-FPHF-RECEIVED:CAPS" role="macro"/>GNUTLS_E_WARNING_IA_FPHF_RECEIVED</title>
<indexterm><primary>GNUTLS_E_WARNING_IA_FPHF_RECEIVED</primary></indexterm><programlisting>#define             GNUTLS_E_WARNING_IA_FPHF_RECEIVED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-IA-VERIFY-FAILED:CAPS" role="macro"/>GNUTLS_E_IA_VERIFY_FAILED</title>
<indexterm><primary>GNUTLS_E_IA_VERIFY_FAILED</primary></indexterm><programlisting>#define             GNUTLS_E_IA_VERIFY_FAILED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-UNKNOWN-ALGORITHM:CAPS" role="macro"/>GNUTLS_E_UNKNOWN_ALGORITHM</title>
<indexterm><primary>GNUTLS_E_UNKNOWN_ALGORITHM</primary></indexterm><programlisting>#define             GNUTLS_E_UNKNOWN_ALGORITHM</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-BASE64-ENCODING-ERROR:CAPS" role="macro"/>GNUTLS_E_BASE64_ENCODING_ERROR</title>
<indexterm><primary>GNUTLS_E_BASE64_ENCODING_ERROR</primary></indexterm><programlisting>#define             GNUTLS_E_BASE64_ENCODING_ERROR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-INCOMPATIBLE-GCRYPT-LIBRARY:CAPS" role="macro"/>GNUTLS_E_INCOMPATIBLE_GCRYPT_LIBRARY</title>
<indexterm><primary>GNUTLS_E_INCOMPATIBLE_GCRYPT_LIBRARY</primary></indexterm><programlisting>#define             GNUTLS_E_INCOMPATIBLE_GCRYPT_LIBRARY</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-INCOMPATIBLE-CRYPTO-LIBRARY:CAPS" role="macro"/>GNUTLS_E_INCOMPATIBLE_CRYPTO_LIBRARY</title>
<indexterm><primary>GNUTLS_E_INCOMPATIBLE_CRYPTO_LIBRARY</primary></indexterm><programlisting>#define             GNUTLS_E_INCOMPATIBLE_CRYPTO_LIBRARY</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-INCOMPATIBLE-LIBTASN1-LIBRARY:CAPS" role="macro"/>GNUTLS_E_INCOMPATIBLE_LIBTASN1_LIBRARY</title>
<indexterm><primary>GNUTLS_E_INCOMPATIBLE_LIBTASN1_LIBRARY</primary></indexterm><programlisting>#define             GNUTLS_E_INCOMPATIBLE_LIBTASN1_LIBRARY</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-OPENPGP-KEYRING-ERROR:CAPS" role="macro"/>GNUTLS_E_OPENPGP_KEYRING_ERROR</title>
<indexterm><primary>GNUTLS_E_OPENPGP_KEYRING_ERROR</primary></indexterm><programlisting>#define             GNUTLS_E_OPENPGP_KEYRING_ERROR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-X509-UNSUPPORTED-OID:CAPS" role="macro"/>GNUTLS_E_X509_UNSUPPORTED_OID</title>
<indexterm><primary>GNUTLS_E_X509_UNSUPPORTED_OID</primary></indexterm><programlisting>#define             GNUTLS_E_X509_UNSUPPORTED_OID</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-RANDOM-FAILED:CAPS" role="macro"/>GNUTLS_E_RANDOM_FAILED</title>
<indexterm><primary>GNUTLS_E_RANDOM_FAILED</primary></indexterm><programlisting>#define             GNUTLS_E_RANDOM_FAILED</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-BASE64-UNEXPECTED-HEADER-ERROR:CAPS" role="macro"/>GNUTLS_E_BASE64_UNEXPECTED_HEADER_ERROR</title>
<indexterm><primary>GNUTLS_E_BASE64_UNEXPECTED_HEADER_ERROR</primary></indexterm><programlisting>#define             GNUTLS_E_BASE64_UNEXPECTED_HEADER_ERROR</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-UNIMPLEMENTED-FEATURE:CAPS" role="macro"/>GNUTLS_E_UNIMPLEMENTED_FEATURE</title>
<indexterm><primary>GNUTLS_E_UNIMPLEMENTED_FEATURE</primary></indexterm><programlisting>#define             GNUTLS_E_UNIMPLEMENTED_FEATURE</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-APPLICATION-ERROR-MAX:CAPS" role="macro"/>GNUTLS_E_APPLICATION_ERROR_MAX</title>
<indexterm><primary>GNUTLS_E_APPLICATION_ERROR_MAX</primary></indexterm><programlisting>#define             GNUTLS_E_APPLICATION_ERROR_MAX</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GNUTLS-E-APPLICATION-ERROR-MIN:CAPS" role="macro"/>GNUTLS_E_APPLICATION_ERROR_MIN</title>
<indexterm><primary>GNUTLS_E_APPLICATION_ERROR_MIN</primary></indexterm><programlisting>#define             GNUTLS_E_APPLICATION_ERROR_MIN</programlisting>
<para>

</para></refsect2>

</refsect1>





<refsect1><refsect2 /><refsect2 /></refsect1>
</refentry>
