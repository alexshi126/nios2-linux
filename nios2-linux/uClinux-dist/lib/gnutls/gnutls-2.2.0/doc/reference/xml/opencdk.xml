<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="gnutls-opencdk">
<refmeta>
<refentrytitle role="top_of_page">opencdk</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNUTLS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>opencdk</refname>
<refpurpose></refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



#define             <link linkend="OPENCDK-VERSION:CAPS">OPENCDK_VERSION</link>
#define             <link linkend="OPENCDK-VERSION-MAJOR:CAPS">OPENCDK_VERSION_MAJOR</link>
#define             <link linkend="OPENCDK-VERSION-MINOR:CAPS">OPENCDK_VERSION_MINOR</link>
#define             <link linkend="OPENCDK-VERSION-PATCH:CAPS">OPENCDK_VERSION_PATCH</link>
struct              <link linkend="cdk-ctx-s">cdk_ctx_s</link>;
typedef             <link linkend="cdk-ctx-t">cdk_ctx_t</link>;
struct              <link linkend="cdk-strlist-s">cdk_strlist_s</link>;
typedef             <link linkend="cdk-strlist-t">cdk_strlist_t</link>;
struct              <link linkend="cdk-listkey-s">cdk_listkey_s</link>;
typedef             <link linkend="cdk-listkey-t">cdk_listkey_t</link>;
struct              <link linkend="cdk-dek-s">cdk_dek_s</link>;
typedef             <link linkend="cdk-dek-t">cdk_dek_t</link>;
struct              <link linkend="cdk-s2k-s">cdk_s2k_s</link>;
typedef             <link linkend="cdk-s2k-t">cdk_s2k_t</link>;
struct              <link linkend="cdk-stream-s">cdk_stream_s</link>;
typedef             <link linkend="cdk-stream-t">cdk_stream_t</link>;
struct              <link linkend="cdk-prefitem-s">cdk_prefitem_s</link>;
typedef             <link linkend="cdk-prefitem-t">cdk_prefitem_t</link>;
struct              <link linkend="cdk-kbnode-s">cdk_kbnode_s</link>;
typedef             <link linkend="cdk-kbnode-t">cdk_kbnode_t</link>;
struct              <link linkend="cdk-keydb-hd-s">cdk_keydb_hd_s</link>;
typedef             <link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link>;
struct              <link linkend="cdk-keylist-s">cdk_keylist_s</link>;
typedef             <link linkend="cdk-keylist-t">cdk_keylist_t</link>;
struct              <link linkend="cdk-subpkt-s">cdk_subpkt_s</link>;
typedef             <link linkend="cdk-subpkt-t">cdk_subpkt_t</link>;
struct              <link linkend="cdk-keygen-ctx-s">cdk_keygen_ctx_s</link>;
typedef             <link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link>;
struct              <link linkend="cdk-desig-revoker-s">cdk_desig_revoker_s</link>;
typedef             <link linkend="cdk-desig-revoker-t">cdk_desig_revoker_t</link>;
typedef             <link linkend="cdk-mpi-t">cdk_mpi_t</link>;
enum                <link linkend="cdk-error-t">cdk_error_t</link>;
enum                <link linkend="cdk-key-flags-t">cdk_key_flags_t</link>;
enum                <link linkend="cdk-lit-format-t">cdk_lit_format_t</link>;
enum                <link linkend="cdk-packet-type-t">cdk_packet_type_t</link>;
#define             <link linkend="MAX-CDK-PK-PARTS:CAPS">MAX_CDK_PK_PARTS</link>
#define             <link linkend="MAX-CDK-DATA-PARTS:CAPS">MAX_CDK_DATA_PARTS</link>
typedef             <link linkend="cdk-pkt-signature-t">cdk_pkt_signature_t</link>;
typedef             <link linkend="cdk-pkt-userid-t">cdk_pkt_userid_t</link>;
typedef             <link linkend="cdk-pkt-pubkey-t">cdk_pkt_pubkey_t</link>;
typedef             <link linkend="cdk-pubkey-t">cdk_pubkey_t</link>;
typedef             <link linkend="cdk-pkt-seckey-t">cdk_pkt_seckey_t</link>;
typedef             <link linkend="cdk-seckey-t">cdk_seckey_t</link>;
typedef             <link linkend="cdk-pkt-onepass-sig-t">cdk_pkt_onepass_sig_t</link>;
typedef             <link linkend="cdk-pkt-pubkey-enc-t">cdk_pkt_pubkey_enc_t</link>;
typedef             <link linkend="cdk-pkt-symkey-enc-t">cdk_pkt_symkey_enc_t</link>;
typedef             <link linkend="cdk-pkt-encrypted-t">cdk_pkt_encrypted_t</link>;
typedef             <link linkend="cdk-pkt-mdc-t">cdk_pkt_mdc_t</link>;
typedef             <link linkend="cdk-pkt-literal-t">cdk_pkt_literal_t</link>;
typedef             <link linkend="cdk-pkt-compressed-t">cdk_pkt_compressed_t</link>;
typedef             <link linkend="cdk-packet-t">cdk_packet_t</link>;
<link linkend="void">void</link>                (<link linkend="cdk-log-fnc-t">*cdk_log_fnc_t</link>)                    (<link linkend="void">void</link> *,
                                                         ...,
                                                         const <link linkend="char">char</link> *,
                                                         <link linkend="va-list">va_list</link> );
<link linkend="void">void</link>                <link linkend="cdk-set-log-level">cdk_set_log_level</link>                   (<link linkend="int">int</link> lvl);
<link linkend="void">void</link>                <link linkend="cdk-set-log-handler">cdk_set_log_handler</link>                 (<link linkend="cdk-log-fnc-t">cdk_log_fnc_t</link> logfnc,
                                                         <link linkend="void">void</link> *opaque);
const <link linkend="char">char</link>*         <link linkend="cdk-strerror">cdk_strerror</link>                        (<link linkend="int">int</link> ec);
<link linkend="void">void</link>                <link linkend="cdk-set-malloc-hooks">cdk_set_malloc_hooks</link>                (<link linkend="void">void</link>* (new_alloc_funcsize_t n) (),
                                                         <link linkend="void">void</link>* (new_alloc_secure_funcsize_t n) (),
                                                         <link linkend="void">void</link>* (new_realloc_funcvoid *p, size_t n) (),
                                                         <link linkend="void">void</link>* (new_calloc_funcsize_t m, size_t n) (),
                                                         <link linkend="void">void</link> (new_free_funcvoid *) ());
<link linkend="int">int</link>                 <link linkend="cdk-malloc-hook-initialized">cdk_malloc_hook_initialized</link>         (void);
<link linkend="void">void</link>*               <link linkend="cdk-malloc">cdk_malloc</link>                          (<link linkend="size-t">size_t</link> size);
<link linkend="void">void</link>*               <link linkend="cdk-calloc">cdk_calloc</link>                          (<link linkend="size-t">size_t</link> n,
                                                         <link linkend="size-t">size_t</link> m);
<link linkend="void">void</link>*               <link linkend="cdk-realloc">cdk_realloc</link>                         (<link linkend="void">void</link> *ptr,
                                                         <link linkend="size-t">size_t</link> size);
<link linkend="void">void</link>*               <link linkend="cdk-salloc">cdk_salloc</link>                          (<link linkend="size-t">size_t</link> size,
                                                         <link linkend="int">int</link> clear);
<link linkend="char">char</link>*               <link linkend="cdk-strdup">cdk_strdup</link>                          (const <link linkend="char">char</link> *ptr);
<link linkend="void">void</link>                <link linkend="cdk-free">cdk_free</link>                            (<link linkend="void">void</link> *ptr);
<link linkend="void">void</link>                <link linkend="cdk-lib-startup">cdk_lib_startup</link>                     (void);
<link linkend="void">void</link>                <link linkend="cdk-lib-shutdown">cdk_lib_shutdown</link>                    (void);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-handle-new">cdk_handle_new</link>                      (<link linkend="cdk-ctx-t">cdk_ctx_t</link> *r_ctx);
<link linkend="void">void</link>                <link linkend="cdk-handle-free">cdk_handle_free</link>                     (<link linkend="cdk-ctx-t">cdk_ctx_t</link> c);
<link linkend="void">void</link>                <link linkend="cdk-handle-set-keydb">cdk_handle_set_keydb</link>                (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> db);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-handle-set-keyring">cdk_handle_set_keyring</link>              (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="int">int</link> type,
                                                         const <link linkend="char">char</link> *kringname);
<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link>      <link linkend="cdk-handle-get-keydb">cdk_handle_get_keydb</link>                (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="int">int</link> type);
<link linkend="int">int</link>                 <link linkend="cdk-handle-control">cdk_handle_control</link>                  (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="int">int</link> action,
                                                         <link linkend="int">int</link> cmd,
                                                         ...);
<link linkend="void">void</link>                <link linkend="cdk-handle-set-passphrase-cb">cdk_handle_set_passphrase_cb</link>        (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="char">char</link>* (cbvoid *opa, const char *prompt) (),
                                                         <link linkend="void">void</link> *cb_value);
#define             <link linkend="cdk-handle-set-armor">cdk_handle_set_armor</link>                (a, val)
#define             <link linkend="cdk-handle-set-compress">cdk_handle_set_compress</link>             (a, algo, level)
#define             <link linkend="cdk-handle-set-blockmode">cdk_handle_set_blockmode</link>            (a, val)
#define             <link linkend="cdk-handle-set-cipher">cdk_handle_set_cipher</link>               (a, val)
#define             <link linkend="cdk-handle-set-digest">cdk_handle_set_digest</link>               (a, val)
#define             <link linkend="cdk-handle-set-s2k">cdk_handle_set_s2k</link>                  (a, val1, val2)
typedef             <link linkend="cdk-verify-result-t">cdk_verify_result_t</link>;
<link linkend="cdk-verify-result-t">cdk_verify_result_t</link> <link linkend="cdk-handle-verify-get-result">cdk_handle_verify_get_result</link>        (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-pkt-new">cdk_pkt_new</link>                         (<link linkend="cdk-packet-t">cdk_packet_t</link> *r_pkt);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-pkt-alloc">cdk_pkt_alloc</link>                       (<link linkend="cdk-packet-t">cdk_packet_t</link> *r_pkt,
                                                         <link linkend="int">int</link> pkttype);
<link linkend="void">void</link>                <link linkend="cdk-pkt-free">cdk_pkt_free</link>                        (<link linkend="cdk-packet-t">cdk_packet_t</link> pkt);
<link linkend="void">void</link>                <link linkend="cdk-pkt-release">cdk_pkt_release</link>                     (<link linkend="cdk-packet-t">cdk_packet_t</link> pkt);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-pkt-read">cdk_pkt_read</link>                        (<link linkend="cdk-stream-t">cdk_stream_t</link> inp,
                                                         <link linkend="cdk-packet-t">cdk_packet_t</link> pkt);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-pkt-write">cdk_pkt_write</link>                       (<link linkend="cdk-stream-t">cdk_stream_t</link> out,
                                                         <link linkend="cdk-packet-t">cdk_packet_t</link> pkt);
<link linkend="cdk-subpkt-t">cdk_subpkt_t</link>        <link linkend="cdk-subpkt-new">cdk_subpkt_new</link>                      (<link linkend="size-t">size_t</link> size);
<link linkend="void">void</link>                <link linkend="cdk-subpkt-free">cdk_subpkt_free</link>                     (<link linkend="cdk-subpkt-t">cdk_subpkt_t</link> ctx);
<link linkend="cdk-subpkt-t">cdk_subpkt_t</link>        <link linkend="cdk-subpkt-find">cdk_subpkt_find</link>                     (<link linkend="cdk-subpkt-t">cdk_subpkt_t</link> ctx,
                                                         <link linkend="size-t">size_t</link> type);
<link linkend="cdk-subpkt-t">cdk_subpkt_t</link>        <link linkend="cdk-subpkt-find-next">cdk_subpkt_find_next</link>                (<link linkend="cdk-subpkt-t">cdk_subpkt_t</link> root,
                                                         <link linkend="size-t">size_t</link> type);
<link linkend="size-t">size_t</link>              <link linkend="cdk-subpkt-type-count">cdk_subpkt_type_count</link>               (<link linkend="cdk-subpkt-t">cdk_subpkt_t</link> ctx,
                                                         <link linkend="size-t">size_t</link> type);
<link linkend="cdk-subpkt-t">cdk_subpkt_t</link>        <link linkend="cdk-subpkt-find-nth">cdk_subpkt_find_nth</link>                 (<link linkend="cdk-subpkt-t">cdk_subpkt_t</link> ctx,
                                                         <link linkend="size-t">size_t</link> type,
                                                         <link linkend="size-t">size_t</link> index);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-subpkt-add">cdk_subpkt_add</link>                      (<link linkend="cdk-subpkt-t">cdk_subpkt_t</link> root,
                                                         <link linkend="cdk-subpkt-t">cdk_subpkt_t</link> node);
const unsigned <link linkend="char">char</link>* <link linkend="cdk-subpkt-get-data">cdk_subpkt_get_data</link>                (<link linkend="cdk-subpkt-t">cdk_subpkt_t</link> ctx,
                                                         <link linkend="size-t">size_t</link> *r_type,
                                                         <link linkend="size-t">size_t</link> *r_nbytes);
<link linkend="void">void</link>                <link linkend="cdk-subpkt-init">cdk_subpkt_init</link>                     (<link linkend="cdk-subpkt-t">cdk_subpkt_t</link> node,
                                                         <link linkend="size-t">size_t</link> type,
                                                         const <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> buflen);
const unsigned <link linkend="char">char</link>* <link linkend="cdk-key-desig-revoker-walk">cdk_key_desig_revoker_walk</link>         (<link linkend="cdk-desig-revoker-t">cdk_desig_revoker_t</link> root,
                                                         <link linkend="cdk-desig-revoker-t">cdk_desig_revoker_t</link> *ctx,
                                                         <link linkend="int">int</link> *r_class,
                                                         <link linkend="int">int</link> *r_algid);
#define             <link linkend="is-RSA">is_RSA</link>                              (a)
#define             <link linkend="is-ELG">is_ELG</link>                              (a)
#define             <link linkend="is-DSA">is_DSA</link>                              (a)
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-pk-encrypt">cdk_pk_encrypt</link>                      (<link linkend="cdk-pubkey-t">cdk_pubkey_t</link> pk,
                                                         <link linkend="cdk-pkt-pubkey-enc-t">cdk_pkt_pubkey_enc_t</link> pke,
                                                         <link linkend="gcry-mpi-t">gcry_mpi_t</link> sk);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-pk-decrypt">cdk_pk_decrypt</link>                      (<link linkend="cdk-seckey-t">cdk_seckey_t</link> sk,
                                                         <link linkend="cdk-pkt-pubkey-enc-t">cdk_pkt_pubkey_enc_t</link> pke,
                                                         <link linkend="gcry-mpi-t">gcry_mpi_t</link> *r_sk);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-pk-sign">cdk_pk_sign</link>                         (<link linkend="cdk-seckey-t">cdk_seckey_t</link> sk,
                                                         <link linkend="cdk-pkt-signature-t">cdk_pkt_signature_t</link> sig,
                                                         unsigned <link linkend="char">char</link> *md);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-pk-verify">cdk_pk_verify</link>                       (<link linkend="cdk-pubkey-t">cdk_pubkey_t</link> pk,
                                                         <link linkend="cdk-pkt-signature-t">cdk_pkt_signature_t</link> sig,
                                                         unsigned <link linkend="char">char</link> *md);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-pk-get-mpi">cdk_pk_get_mpi</link>                      (<link linkend="cdk-pubkey-t">cdk_pubkey_t</link> pk,
                                                         <link linkend="size-t">size_t</link> idx,
                                                         unsigned <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> buflen,
                                                         <link linkend="size-t">size_t</link> *r_nwritten,
                                                         <link linkend="size-t">size_t</link> *r_nbits);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-sk-get-mpi">cdk_sk_get_mpi</link>                      (<link linkend="cdk-seckey-t">cdk_seckey_t</link> sk,
                                                         <link linkend="size-t">size_t</link> idx,
                                                         unsigned <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> buflen,
                                                         <link linkend="size-t">size_t</link> *r_nwritten,
                                                         <link linkend="size-t">size_t</link> *r_nbits);
<link linkend="int">int</link>                 <link linkend="cdk-pk-get-nbits">cdk_pk_get_nbits</link>                    (<link linkend="cdk-pubkey-t">cdk_pubkey_t</link> pk);
<link linkend="int">int</link>                 <link linkend="cdk-pk-get-npkey">cdk_pk_get_npkey</link>                    (<link linkend="int">int</link> algo);
<link linkend="int">int</link>                 <link linkend="cdk-pk-get-nskey">cdk_pk_get_nskey</link>                    (<link linkend="int">int</link> algo);
<link linkend="int">int</link>                 <link linkend="cdk-pk-get-nsig">cdk_pk_get_nsig</link>                     (<link linkend="int">int</link> algo);
<link linkend="int">int</link>                 <link linkend="cdk-pk-get-nenc">cdk_pk_get_nenc</link>                     (<link linkend="int">int</link> algo);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-pk-get-fingerprint">cdk_pk_get_fingerprint</link>              (<link linkend="cdk-pubkey-t">cdk_pubkey_t</link> pk,
                                                         unsigned <link linkend="char">char</link> *fpr);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-pk-to-fingerprint">cdk_pk_to_fingerprint</link>               (<link linkend="cdk-pubkey-t">cdk_pubkey_t</link> pk,
                                                         unsigned <link linkend="char">char</link> *fpr,
                                                         <link linkend="size-t">size_t</link> fprlen,
                                                         <link linkend="size-t">size_t</link> *r_nout);
unsigned <link linkend="int">int</link>        <link linkend="cdk-pk-fingerprint-get-keyid">cdk_pk_fingerprint_get_keyid</link>        (unsigned <link linkend="char">char</link> *fpr,
                                                         <link linkend="size-t">size_t</link> fprlen,
                                                         unsigned <link linkend="int">int</link> *keyid);
unsigned <link linkend="int">int</link>        <link linkend="cdk-pk-get-keyid">cdk_pk_get_keyid</link>                    (<link linkend="cdk-pubkey-t">cdk_pubkey_t</link> pk,
                                                         unsigned <link linkend="int">int</link> *keyid);
unsigned <link linkend="int">int</link>        <link linkend="cdk-sk-get-keyid">cdk_sk_get_keyid</link>                    (<link linkend="cdk-seckey-t">cdk_seckey_t</link> sk,
                                                         unsigned <link linkend="int">int</link> *keyid);
unsigned <link linkend="int">int</link>        <link linkend="cdk-sig-get-keyid">cdk_sig_get_keyid</link>                   (<link linkend="cdk-pkt-signature-t">cdk_pkt_signature_t</link> sig,
                                                         unsigned <link linkend="int">int</link> *keyid);
<link linkend="void">void</link>                <link linkend="cdk-pk-release">cdk_pk_release</link>                      (<link linkend="cdk-pubkey-t">cdk_pubkey_t</link> pk);
<link linkend="void">void</link>                <link linkend="cdk-sk-release">cdk_sk_release</link>                      (<link linkend="cdk-seckey-t">cdk_seckey_t</link> sk);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-sk-unprotect">cdk_sk_unprotect</link>                    (<link linkend="cdk-seckey-t">cdk_seckey_t</link> sk,
                                                         const <link linkend="char">char</link> *pw);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-sk-protect">cdk_sk_protect</link>                      (<link linkend="cdk-seckey-t">cdk_seckey_t</link> sk,
                                                         const <link linkend="char">char</link> *pw);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-pk-from-secret-key">cdk_pk_from_secret_key</link>              (<link linkend="cdk-seckey-t">cdk_seckey_t</link> sk,
                                                         <link linkend="cdk-pubkey-t">cdk_pubkey_t</link> *ret_pk);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-pubkey-to-sexp">cdk_pubkey_to_sexp</link>                  (<link linkend="cdk-pubkey-t">cdk_pubkey_t</link> pk,
                                                         <link linkend="char">char</link> **sexp,
                                                         <link linkend="size-t">size_t</link> *len);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-seckey-to-sexp">cdk_seckey_to_sexp</link>                  (<link linkend="cdk-seckey-t">cdk_seckey_t</link> sk,
                                                         <link linkend="char">char</link> **sexp,
                                                         <link linkend="size-t">size_t</link> *len);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-dek-new">cdk_dek_new</link>                         (<link linkend="cdk-dek-t">cdk_dek_t</link> *r_dek);
<link linkend="void">void</link>                <link linkend="cdk-dek-free">cdk_dek_free</link>                        (<link linkend="cdk-dek-t">cdk_dek_t</link> dek);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-dek-set-cipher">cdk_dek_set_cipher</link>                  (<link linkend="cdk-dek-t">cdk_dek_t</link> dek,
                                                         <link linkend="int">int</link> cipher_algo);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-dek-get-cipher">cdk_dek_get_cipher</link>                  (<link linkend="cdk-dek-t">cdk_dek_t</link> dek,
                                                         <link linkend="int">int</link> *r_cipher_algo);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-dek-set-key">cdk_dek_set_key</link>                     (<link linkend="cdk-dek-t">cdk_dek_t</link> dek,
                                                         unsigned <link linkend="char">char</link> *key,
                                                         <link linkend="size-t">size_t</link> keylen);
<link linkend="void">void</link>                <link linkend="cdk-dek-set-mdc-flag">cdk_dek_set_mdc_flag</link>                (<link linkend="cdk-dek-t">cdk_dek_t</link> dek,
                                                         <link linkend="int">int</link> val);
<link linkend="int">int</link>                 <link linkend="cdk-dek-get-mdc-flag">cdk_dek_get_mdc_flag</link>                (<link linkend="cdk-dek-t">cdk_dek_t</link> dek);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-dek-from-passphrase">cdk_dek_from_passphrase</link>             (<link linkend="cdk-dek-t">cdk_dek_t</link> *ret_dek,
                                                         <link linkend="int">int</link> cipher_algo,
                                                         <link linkend="cdk-s2k-t">cdk_s2k_t</link> s2k,
                                                         <link linkend="int">int</link> rndsalt,
                                                         const <link linkend="char">char</link> *passphrase);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-s2k-new">cdk_s2k_new</link>                         (<link linkend="cdk-s2k-t">cdk_s2k_t</link> *ret_s2k,
                                                         <link linkend="int">int</link> mode,
                                                         <link linkend="int">int</link> digest_algo,
                                                         unsigned <link linkend="char">char</link> *salt);
<link linkend="void">void</link>                <link linkend="cdk-s2k-free">cdk_s2k_free</link>                        (<link linkend="cdk-s2k-t">cdk_s2k_t</link> s2k);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-file-armor">cdk_file_armor</link>                      (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         const <link linkend="char">char</link> *file,
                                                         const <link linkend="char">char</link> *output);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-file-dearmor">cdk_file_dearmor</link>                    (const <link linkend="char">char</link> *file,
                                                         const <link linkend="char">char</link> *output);
<link linkend="int">int</link>                 <link linkend="cdk-armor-filter-use">cdk_armor_filter_use</link>                (<link linkend="cdk-stream-t">cdk_stream_t</link> inp);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-armor-encode-buffer">cdk_armor_encode_buffer</link>             (unsigned <link linkend="char">char</link> *inbuf,
                                                         <link linkend="size-t">size_t</link> inlen,
                                                         <link linkend="char">char</link> *outbuf,
                                                         <link linkend="size-t">size_t</link> outlen,
                                                         <link linkend="size-t">size_t</link> *nwritten,
                                                         <link linkend="int">int</link> type);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="open">open</link>                                (<link linkend="void">void</link> *);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="release">release</link>                             (<link linkend="void">void</link> *);
<link linkend="int">int</link>                 <link linkend="read">read</link>                                (<link linkend="void">void</link> *,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> );
<link linkend="int">int</link>                 <link linkend="write">write</link>                               (<link linkend="void">void</link> *,
                                                         const <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> );
<link linkend="int">int</link>                 <link linkend="seek">seek</link>                                (<link linkend="void">void</link> *,
                                                         <link linkend="off-t">off_t</link> );
typedef             <link linkend="cdk-stream-cbs-t">cdk_stream_cbs_t</link>;
<link linkend="int">int</link>                 <link linkend="cdk-stream-is-compressed">cdk_stream_is_compressed</link>            (<link linkend="cdk-stream-t">cdk_stream_t</link> s);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-sockopen">cdk_stream_sockopen</link>                 (const <link linkend="char">char</link> *host,
                                                         <link linkend="unsigned-short-">unsigned short </link> port,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> *ret_out);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-open">cdk_stream_open</link>                     (const <link linkend="char">char</link> *file,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> *ret_s);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-new">cdk_stream_new</link>                      (const <link linkend="char">char</link> *file,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> *ret_s);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-new-from-cbs">cdk_stream_new_from_cbs</link>             (<link linkend="cdk-stream-cbs-t">cdk_stream_cbs_t</link> cbs,
                                                         <link linkend="void">void</link> *opa,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> *ret_s);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-create">cdk_stream_create</link>                   (const <link linkend="char">char</link> *file,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> *ret_s);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-tmp-new">cdk_stream_tmp_new</link>                  (<link linkend="cdk-stream-t">cdk_stream_t</link> *r_out);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-tmp-from-mem">cdk_stream_tmp_from_mem</link>             (const <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> buflen,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> *r_out);
<link linkend="void">void</link>                <link linkend="cdk-stream-tmp-set-mode">cdk_stream_tmp_set_mode</link>             (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="int">int</link> val);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-flush">cdk_stream_flush</link>                    (<link linkend="cdk-stream-t">cdk_stream_t</link> s);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-enable-cache">cdk_stream_enable_cache</link>             (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="int">int</link> val);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-filter-disable">cdk_stream_filter_disable</link>           (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="int">int</link> type);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-close">cdk_stream_close</link>                    (<link linkend="cdk-stream-t">cdk_stream_t</link> s);
<link linkend="off-t">off_t</link>               <link linkend="cdk-stream-get-length">cdk_stream_get_length</link>               (<link linkend="cdk-stream-t">cdk_stream_t</link> s);
<link linkend="int">int</link>                 <link linkend="cdk-stream-read">cdk_stream_read</link>                     (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> count);
<link linkend="int">int</link>                 <link linkend="cdk-stream-write">cdk_stream_write</link>                    (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         const <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> count);
<link linkend="int">int</link>                 <link linkend="cdk-stream-putc">cdk_stream_putc</link>                     (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="int">int</link> c);
<link linkend="int">int</link>                 <link linkend="cdk-stream-getc">cdk_stream_getc</link>                     (<link linkend="cdk-stream-t">cdk_stream_t</link> s);
<link linkend="int">int</link>                 <link linkend="cdk-stream-eof">cdk_stream_eof</link>                      (<link linkend="cdk-stream-t">cdk_stream_t</link> s);
<link linkend="off-t">off_t</link>               <link linkend="cdk-stream-tell">cdk_stream_tell</link>                     (<link linkend="cdk-stream-t">cdk_stream_t</link> s);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-seek">cdk_stream_seek</link>                     (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="off-t">off_t</link> offset);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-set-armor-flag">cdk_stream_set_armor_flag</link>           (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="int">int</link> type);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-set-literal-flag">cdk_stream_set_literal_flag</link>         (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="cdk-lit-format-t">cdk_lit_format_t</link> mode,
                                                         const <link linkend="char">char</link> *fname);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-set-cipher-flag">cdk_stream_set_cipher_flag</link>          (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="cdk-dek-t">cdk_dek_t</link> dek,
                                                         <link linkend="int">int</link> use_mdc);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-set-compress-flag">cdk_stream_set_compress_flag</link>        (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="int">int</link> algo,
                                                         <link linkend="int">int</link> level);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-set-hash-flag">cdk_stream_set_hash_flag</link>            (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="int">int</link> algo);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-set-text-flag">cdk_stream_set_text_flag</link>            (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         const <link linkend="char">char</link> *lf);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-kick-off">cdk_stream_kick_off</link>                 (<link linkend="cdk-stream-t">cdk_stream_t</link> inp,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> out);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-mmap">cdk_stream_mmap</link>                     (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         unsigned <link linkend="char">char</link> **ret_buf,
                                                         <link linkend="size-t">size_t</link> *ret_buflen);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-mmap-part">cdk_stream_mmap_part</link>                (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="off-t">off_t</link> off,
                                                         <link linkend="size-t">size_t</link> len,
                                                         unsigned <link linkend="char">char</link> **ret_buf,
                                                         <link linkend="size-t">size_t</link> *ret_buflen);
<link linkend="int">int</link>                 <link linkend="cdk-stream-peek">cdk_stream_peek</link>                     (<link linkend="cdk-stream-t">cdk_stream_t</link> inp,
                                                         unsigned <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> buflen);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keydb-new">cdk_keydb_new</link>                       (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> *r_hd,
                                                         <link linkend="int">int</link> type,
                                                         <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> count);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keydb-new-from-mem">cdk_keydb_new_from_mem</link>              (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> *r_hd,
                                                         <link linkend="int">int</link> secret,
                                                         const <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> datlen);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keydb-new-from-file">cdk_keydb_new_from_file</link>             (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> *r_hd,
                                                         <link linkend="int">int</link> secret,
                                                         const <link linkend="char">char</link> *fname);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keydb-new-from-stream">cdk_keydb_new_from_stream</link>           (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> *r_hd,
                                                         <link linkend="int">int</link> secret,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> in);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keydb-check-sk">cdk_keydb_check_sk</link>                  (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd,
                                                         unsigned <link linkend="int">int</link> *keyid);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keydb-search-start">cdk_keydb_search_start</link>              (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd,
                                                         <link linkend="int">int</link> type,
                                                         <link linkend="void">void</link> *desc);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keydb-search">cdk_keydb_search</link>                    (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd,
                                                         <link linkend="cdk-kbnode-t">cdk_kbnode_t</link> *ret_key);
<link linkend="void">void</link>                <link linkend="cdk-keydb-free">cdk_keydb_free</link>                      (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keydb-get-bykeyid">cdk_keydb_get_bykeyid</link>               (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd,
                                                         unsigned <link linkend="int">int</link> *keyid,
                                                         <link linkend="cdk-kbnode-t">cdk_kbnode_t</link> *ret_pk);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keydb-get-byfpr">cdk_keydb_get_byfpr</link>                 (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd,
                                                         unsigned <link linkend="char">char</link> *fpr,
                                                         <link linkend="cdk-kbnode-t">cdk_kbnode_t</link> *ret_pk);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keydb-get-bypattern">cdk_keydb_get_bypattern</link>             (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd,
                                                         const <link linkend="char">char</link> *patt,
                                                         <link linkend="cdk-kbnode-t">cdk_kbnode_t</link> *ret_pk);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keydb-get-pk">cdk_keydb_get_pk</link>                    (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> khd,
                                                         unsigned <link linkend="int">int</link> *keyid,
                                                         <link linkend="cdk-pubkey-t">cdk_pubkey_t</link> *ret_pk);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keydb-get-sk">cdk_keydb_get_sk</link>                    (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> khd,
                                                         unsigned <link linkend="int">int</link> *keyid,
                                                         <link linkend="cdk-seckey-t">cdk_seckey_t</link> *ret_sk);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keydb-get-keyblock">cdk_keydb_get_keyblock</link>              (<link linkend="cdk-stream-t">cdk_stream_t</link> inp,
                                                         <link linkend="cdk-kbnode-t">cdk_kbnode_t</link> *ret_key);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keydb-idx-rebuild">cdk_keydb_idx_rebuild</link>               (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keydb-export">cdk_keydb_export</link>                    (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> out,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> remusr);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keydb-import">cdk_keydb_import</link>                    (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd,
                                                         <link linkend="cdk-kbnode-t">cdk_kbnode_t</link> knode);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-listkey-start">cdk_listkey_start</link>                   (<link linkend="cdk-listkey-t">cdk_listkey_t</link> *r_ctx,
                                                         <link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> db,
                                                         const <link linkend="char">char</link> *patt,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> fpatt);
<link linkend="void">void</link>                <link linkend="cdk-listkey-close">cdk_listkey_close</link>                   (<link linkend="cdk-listkey-t">cdk_listkey_t</link> ctx);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-listkey-next">cdk_listkey_next</link>                    (<link linkend="cdk-listkey-t">cdk_listkey_t</link> ctx,
                                                         <link linkend="cdk-kbnode-t">cdk_kbnode_t</link> *ret_key);
<link linkend="cdk-kbnode-t">cdk_kbnode_t</link>        <link linkend="cdk-kbnode-new">cdk_kbnode_new</link>                      (<link linkend="cdk-packet-t">cdk_packet_t</link> pkt);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-kbnode-read-from-mem">cdk_kbnode_read_from_mem</link>            (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> *ret_node,
                                                         unsigned <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> buflen);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-kbnode-write-to-mem">cdk_kbnode_write_to_mem</link>             (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> node,
                                                         unsigned <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> *r_nbytes);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-kbnode-write-to-mem-alloc">cdk_kbnode_write_to_mem_alloc</link>       (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> node,
                                                         unsigned <link linkend="char">char</link> **r_buf,
                                                         <link linkend="size-t">size_t</link> *r_buflen);
<link linkend="void">void</link>                <link linkend="cdk-kbnode-release">cdk_kbnode_release</link>                  (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> node);
<link linkend="cdk-kbnode-t">cdk_kbnode_t</link>        <link linkend="cdk-kbnode-walk">cdk_kbnode_walk</link>                     (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> root,
                                                         <link linkend="cdk-kbnode-t">cdk_kbnode_t</link> *ctx,
                                                         <link linkend="int">int</link> all);
<link linkend="cdk-packet-t">cdk_packet_t</link>        <link linkend="cdk-kbnode-find-packet">cdk_kbnode_find_packet</link>              (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> node,
                                                         <link linkend="int">int</link> pkttype);
<link linkend="cdk-packet-t">cdk_packet_t</link>        <link linkend="cdk-kbnode-get-packet">cdk_kbnode_get_packet</link>               (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> node);
<link linkend="cdk-kbnode-t">cdk_kbnode_t</link>        <link linkend="cdk-kbnode-find">cdk_kbnode_find</link>                     (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> node,
                                                         <link linkend="int">int</link> pkttype);
<link linkend="cdk-kbnode-t">cdk_kbnode_t</link>        <link linkend="cdk-kbnode-find-prev">cdk_kbnode_find_prev</link>                (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> root,
                                                         <link linkend="cdk-kbnode-t">cdk_kbnode_t</link> node,
                                                         <link linkend="int">int</link> pkttype);
<link linkend="cdk-kbnode-t">cdk_kbnode_t</link>        <link linkend="cdk-kbnode-find-next">cdk_kbnode_find_next</link>                (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> node,
                                                         <link linkend="int">int</link> pkttype);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-kbnode-hash">cdk_kbnode_hash</link>                     (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> node,
                                                         <link linkend="gcry-md-hd-t">gcry_md_hd_t</link> md,
                                                         <link linkend="int">int</link> is_v4,
                                                         <link linkend="int">int</link> pkttype,
                                                         <link linkend="int">int</link> flags);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-pk-check-sigs">cdk_pk_check_sigs</link>                   (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> knode,
                                                         <link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd,
                                                         <link linkend="int">int</link> *r_status);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-pk-check-self-sig">cdk_pk_check_self_sig</link>               (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> knode,
                                                         <link linkend="int">int</link> *r_status);
<link linkend="int">int</link>                 <link linkend="cdk-pklist-select-algo">cdk_pklist_select_algo</link>              (<link linkend="cdk-keylist-t">cdk_keylist_t</link> pkl,
                                                         <link linkend="int">int</link> preftype);
<link linkend="int">int</link>                 <link linkend="cdk-pklist-use-mdc">cdk_pklist_use_mdc</link>                  (<link linkend="cdk-keylist-t">cdk_keylist_t</link> pkl);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-pklist-build">cdk_pklist_build</link>                    (<link linkend="cdk-keylist-t">cdk_keylist_t</link> *ret_pkl,
                                                         <link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> remusr,
                                                         <link linkend="int">int</link> use);
<link linkend="void">void</link>                <link linkend="cdk-pklist-release">cdk_pklist_release</link>                  (<link linkend="cdk-keylist-t">cdk_keylist_t</link> pkl);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-pklist-encrypt">cdk_pklist_encrypt</link>                  (<link linkend="cdk-keylist-t">cdk_keylist_t</link> pkl,
                                                         <link linkend="cdk-dek-t">cdk_dek_t</link> dek,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> out);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-sklist-build">cdk_sklist_build</link>                    (<link linkend="cdk-keylist-t">cdk_keylist_t</link> *ret_skl,
                                                         <link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> db,
                                                         <link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> locusr,
                                                         <link linkend="int">int</link> unlock,
                                                         unsigned <link linkend="int">int</link> use);
<link linkend="void">void</link>                <link linkend="cdk-sklist-release">cdk_sklist_release</link>                  (<link linkend="cdk-keylist-t">cdk_keylist_t</link> skl);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-sklist-write">cdk_sklist_write</link>                    (<link linkend="cdk-keylist-t">cdk_keylist_t</link> skl,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> outp,
                                                         <link linkend="gcry-md-hd-t">gcry_md_hd_t</link> mdctx,
                                                         <link linkend="int">int</link> sigclass,
                                                         <link linkend="int">int</link> sigver);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-sklist-write-onepass">cdk_sklist_write_onepass</link>            (<link linkend="cdk-keylist-t">cdk_keylist_t</link> skl,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> outp,
                                                         <link linkend="int">int</link> sigclass,
                                                         <link linkend="int">int</link> mdalgo);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-encrypt">cdk_stream_encrypt</link>                  (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> remusr,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> inp,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> out);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-decrypt">cdk_stream_decrypt</link>                  (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> inp,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> out);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-file-encrypt">cdk_file_encrypt</link>                    (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> remusr,
                                                         const <link linkend="char">char</link> *file,
                                                         const <link linkend="char">char</link> *output);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-file-decrypt">cdk_file_decrypt</link>                    (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         const <link linkend="char">char</link> *file,
                                                         const <link linkend="char">char</link> *output);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-data-transform">cdk_data_transform</link>                  (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="enum-cdk-crypto-mode-t">enum cdk_crypto_mode_t</link> mode,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> locusr,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> remusr,
                                                         const <link linkend="void">void</link> *inbuf,
                                                         <link linkend="size-t">size_t</link> insize,
                                                         unsigned <link linkend="char">char</link> **outbuf,
                                                         <link linkend="size-t">size_t</link> *outsize,
                                                         <link linkend="int">int</link> modval);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-sign">cdk_stream_sign</link>                     (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> inp,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> out,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> locusr,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> remusr,
                                                         <link linkend="int">int</link> encryptflag,
                                                         <link linkend="int">int</link> sigmode);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-file-sign">cdk_file_sign</link>                       (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> locusr,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> remusr,
                                                         const <link linkend="char">char</link> *file,
                                                         const <link linkend="char">char</link> *output,
                                                         <link linkend="int">int</link> sigmode,
                                                         <link linkend="int">int</link> encryptflag);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-stream-verify">cdk_stream_verify</link>                   (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> inp,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> data,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> out);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-file-verify">cdk_file_verify</link>                     (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         const <link linkend="char">char</link> *file,
                                                         const <link linkend="char">char</link> *data_file,
                                                         const <link linkend="char">char</link> *output);
<link linkend="int">int</link>                 <link linkend="cdk-trustdb-get-validity">cdk_trustdb_get_validity</link>            (<link linkend="cdk-stream-t">cdk_stream_t</link> inp,
                                                         <link linkend="cdk-pkt-userid-t">cdk_pkt_userid_t</link> id,
                                                         <link linkend="int">int</link> *r_val);
<link linkend="int">int</link>                 <link linkend="cdk-trustdb-get-ownertrust">cdk_trustdb_get_ownertrust</link>          (<link linkend="cdk-stream-t">cdk_stream_t</link> inp,
                                                         <link linkend="cdk-pubkey-t">cdk_pubkey_t</link> pk,
                                                         <link linkend="int">int</link> *r_val,
                                                         <link linkend="int">int</link> *r_flags);
<link linkend="void">void</link>                <link linkend="cdk-strlist-free">cdk_strlist_free</link>                    (<link linkend="cdk-strlist-t">cdk_strlist_t</link> sl);
<link linkend="cdk-strlist-t">cdk_strlist_t</link>       <link linkend="cdk-strlist-add">cdk_strlist_add</link>                     (<link linkend="cdk-strlist-t">cdk_strlist_t</link> *list,
                                                         const <link linkend="char">char</link> *string);
<link linkend="cdk-strlist-t">cdk_strlist_t</link>       <link linkend="cdk-strlist-next">cdk_strlist_next</link>                    (<link linkend="cdk-strlist-t">cdk_strlist_t</link> root,
                                                         const <link linkend="char">char</link> **r_str);
const <link linkend="char">char</link>*         <link linkend="cdk-check-version">cdk_check_version</link>                   (const <link linkend="char">char</link> *req_version);
<link linkend="char">char</link>*               <link linkend="cdk-utf8-encode">cdk_utf8_encode</link>                     (const <link linkend="char">char</link> *string);
<link linkend="char">char</link>*               <link linkend="cdk-utf8-decode">cdk_utf8_decode</link>                     (const <link linkend="char">char</link> *string,
                                                         <link linkend="size-t">size_t</link> length,
                                                         <link linkend="int">int</link> delim);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keyserver-recv-key">cdk_keyserver_recv_key</link>              (const <link linkend="char">char</link> *host,
                                                         <link linkend="int">int</link> port,
                                                         unsigned <link linkend="char">char</link> *keyid,
                                                         <link linkend="int">int</link> kid_type,
                                                         <link linkend="cdk-kbnode-t">cdk_kbnode_t</link> *r_key);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keygen-new">cdk_keygen_new</link>                      (<link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link> *r_hd);
<link linkend="void">void</link>                <link linkend="cdk-keygen-free">cdk_keygen_free</link>                     (<link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link> hd);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keygen-set-prefs">cdk_keygen_set_prefs</link>                (<link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link> hd,
                                                         <link linkend="enum-cdk-pref-type-t">enum cdk_pref_type_t</link> type,
                                                         unsigned <link linkend="char">char</link> *array,
                                                         <link linkend="size-t">size_t</link> n);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keygen-set-algo-info">cdk_keygen_set_algo_info</link>            (<link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link> hd,
                                                         <link linkend="int">int</link> type,
                                                         <link linkend="int">int</link> usage,
                                                         <link linkend="enum-cdk-pubkey-algo-t">enum cdk_pubkey_algo_t</link> algo,
                                                         unsigned <link linkend="int">int</link> bits);
<link linkend="int">int</link>                 <link linkend="cdk-keygen-set-keyserver-flags">cdk_keygen_set_keyserver_flags</link>      (<link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link> hd,
                                                         <link linkend="int">int</link> no_modify,
                                                         const <link linkend="char">char</link> *pref_url);
<link linkend="int">int</link>                 <link linkend="cdk-keygen-set-expire-date">cdk_keygen_set_expire_date</link>          (<link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link> hd,
                                                         <link linkend="int">int</link> type,
                                                         long <link linkend="timestamp">timestamp</link> );
<link linkend="void">void</link>                <link linkend="cdk-keygen-set-name">cdk_keygen_set_name</link>                 (<link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link> hd,
                                                         const <link linkend="char">char</link> *name);
<link linkend="void">void</link>                <link linkend="cdk-keygen-set-passphrase">cdk_keygen_set_passphrase</link>           (<link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link> hd,
                                                         const <link linkend="char">char</link> *pass);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keygen-start">cdk_keygen_start</link>                    (<link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link> hd);
<link linkend="cdk-error-t">cdk_error_t</link>         <link linkend="cdk-keygen-save">cdk_keygen_save</link>                     (<link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link> hd,
                                                         const <link linkend="char">char</link> *pubf,
                                                         const <link linkend="char">char</link> *secf);

</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="OPENCDK-VERSION:CAPS" role="macro"/>OPENCDK_VERSION</title>
<indexterm><primary>OPENCDK_VERSION</primary></indexterm><programlisting>#define OPENCDK_VERSION "0.6.6"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="OPENCDK-VERSION-MAJOR:CAPS" role="macro"/>OPENCDK_VERSION_MAJOR</title>
<indexterm><primary>OPENCDK_VERSION_MAJOR</primary></indexterm><programlisting>#define OPENCDK_VERSION_MAJOR 0
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="OPENCDK-VERSION-MINOR:CAPS" role="macro"/>OPENCDK_VERSION_MINOR</title>
<indexterm><primary>OPENCDK_VERSION_MINOR</primary></indexterm><programlisting>#define OPENCDK_VERSION_MINOR 6
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="OPENCDK-VERSION-PATCH:CAPS" role="macro"/>OPENCDK_VERSION_PATCH</title>
<indexterm><primary>OPENCDK_VERSION_PATCH</primary></indexterm><programlisting>#define OPENCDK_VERSION_PATCH 6
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-ctx-s" role="struct"/>struct cdk_ctx_s</title>
<indexterm><primary>cdk_ctx_s</primary></indexterm><programlisting>struct cdk_ctx_s;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-ctx-t" role="typedef"/>cdk_ctx_t</title>
<indexterm><primary>cdk_ctx_t</primary></indexterm><programlisting>typedef struct cdk_ctx_s *cdk_ctx_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-strlist-s" role="struct"/>struct cdk_strlist_s</title>
<indexterm><primary>cdk_strlist_s</primary></indexterm><programlisting>struct cdk_strlist_s;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-strlist-t" role="typedef"/>cdk_strlist_t</title>
<indexterm><primary>cdk_strlist_t</primary></indexterm><programlisting>typedef struct cdk_strlist_s *cdk_strlist_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-listkey-s" role="struct"/>struct cdk_listkey_s</title>
<indexterm><primary>cdk_listkey_s</primary></indexterm><programlisting>struct cdk_listkey_s;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-listkey-t" role="typedef"/>cdk_listkey_t</title>
<indexterm><primary>cdk_listkey_t</primary></indexterm><programlisting>typedef struct cdk_listkey_s *cdk_listkey_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-dek-s" role="struct"/>struct cdk_dek_s</title>
<indexterm><primary>cdk_dek_s</primary></indexterm><programlisting>struct cdk_dek_s;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-dek-t" role="typedef"/>cdk_dek_t</title>
<indexterm><primary>cdk_dek_t</primary></indexterm><programlisting>typedef struct cdk_dek_s *cdk_dek_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-s2k-s" role="struct"/>struct cdk_s2k_s</title>
<indexterm><primary>cdk_s2k_s</primary></indexterm><programlisting>struct cdk_s2k_s;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-s2k-t" role="typedef"/>cdk_s2k_t</title>
<indexterm><primary>cdk_s2k_t</primary></indexterm><programlisting>typedef struct cdk_s2k_s *cdk_s2k_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-stream-s" role="struct"/>struct cdk_stream_s</title>
<indexterm><primary>cdk_stream_s</primary></indexterm><programlisting>struct cdk_stream_s;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-stream-t" role="typedef"/>cdk_stream_t</title>
<indexterm><primary>cdk_stream_t</primary></indexterm><programlisting>typedef struct cdk_stream_s *cdk_stream_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-prefitem-s" role="struct"/>struct cdk_prefitem_s</title>
<indexterm><primary>cdk_prefitem_s</primary></indexterm><programlisting>struct cdk_prefitem_s;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-prefitem-t" role="typedef"/>cdk_prefitem_t</title>
<indexterm><primary>cdk_prefitem_t</primary></indexterm><programlisting>typedef struct cdk_prefitem_s *cdk_prefitem_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-kbnode-s" role="struct"/>struct cdk_kbnode_s</title>
<indexterm><primary>cdk_kbnode_s</primary></indexterm><programlisting>struct cdk_kbnode_s;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-kbnode-t" role="typedef"/>cdk_kbnode_t</title>
<indexterm><primary>cdk_kbnode_t</primary></indexterm><programlisting>typedef struct cdk_kbnode_s *cdk_kbnode_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-keydb-hd-s" role="struct"/>struct cdk_keydb_hd_s</title>
<indexterm><primary>cdk_keydb_hd_s</primary></indexterm><programlisting>struct cdk_keydb_hd_s;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-keydb-hd-t" role="typedef"/>cdk_keydb_hd_t</title>
<indexterm><primary>cdk_keydb_hd_t</primary></indexterm><programlisting>typedef struct cdk_keydb_hd_s *cdk_keydb_hd_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-keylist-s" role="struct"/>struct cdk_keylist_s</title>
<indexterm><primary>cdk_keylist_s</primary></indexterm><programlisting>struct cdk_keylist_s;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-keylist-t" role="typedef"/>cdk_keylist_t</title>
<indexterm><primary>cdk_keylist_t</primary></indexterm><programlisting>typedef struct cdk_keylist_s *cdk_keylist_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-subpkt-s" role="struct"/>struct cdk_subpkt_s</title>
<indexterm><primary>cdk_subpkt_s</primary></indexterm><programlisting>struct cdk_subpkt_s;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-subpkt-t" role="typedef"/>cdk_subpkt_t</title>
<indexterm><primary>cdk_subpkt_t</primary></indexterm><programlisting>typedef struct cdk_subpkt_s *cdk_subpkt_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-keygen-ctx-s" role="struct"/>struct cdk_keygen_ctx_s</title>
<indexterm><primary>cdk_keygen_ctx_s</primary></indexterm><programlisting>struct cdk_keygen_ctx_s;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-keygen-ctx-t" role="typedef"/>cdk_keygen_ctx_t</title>
<indexterm><primary>cdk_keygen_ctx_t</primary></indexterm><programlisting>typedef struct cdk_keygen_ctx_s *cdk_keygen_ctx_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-desig-revoker-s" role="struct"/>struct cdk_desig_revoker_s</title>
<indexterm><primary>cdk_desig_revoker_s</primary></indexterm><programlisting>struct cdk_desig_revoker_s;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-desig-revoker-t" role="typedef"/>cdk_desig_revoker_t</title>
<indexterm><primary>cdk_desig_revoker_t</primary></indexterm><programlisting>typedef struct cdk_desig_revoker_s *cdk_desig_revoker_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-mpi-t" role="typedef"/>cdk_mpi_t</title>
<indexterm><primary>cdk_mpi_t</primary></indexterm><programlisting>typedef gcry_mpi_t cdk_mpi_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-error-t" role="enum"/>enum cdk_error_t</title>
<indexterm><primary>cdk_error_t</primary></indexterm><programlisting>typedef enum {
    CDK_EOF = -1,
    CDK_Success = 0,
    CDK_General_Error = 1,
    CDK_File_Error = 2,
    CDK_Bad_Sig = 3,
    CDK_Inv_Packet = 4,
    CDK_Inv_Algo = 5,
    CDK_Not_Implemented = 6,
    CDK_Armor_Error = 8,
    CDK_Armor_CRC_Error = 9,
    CDK_MPI_Error = 10,
    CDK_Inv_Value = 11,
    CDK_Error_No_Key = 12,
    CDK_Chksum_Error = 13,
    CDK_Time_Conflict = 14,
    CDK_Zlib_Error = 15,
    CDK_Weak_Key = 16,
    CDK_Out_Of_Core = 17,
    CDK_Wrong_Seckey = 18,
    CDK_Bad_MDC = 19,
    CDK_Inv_Mode = 20,
    CDK_Error_No_Keyring = 21,
    CDK_Wrong_Format = 22,
    CDK_Inv_Packet_Ver = 23,
    CDK_Too_Short = 24,
    CDK_Unusable_Key = 25,
    CDK_No_Data = 26,
    CDK_No_Passphrase = 27,
    CDK_Network_Error = 28
} cdk_error_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-key-flags-t" role="enum"/>enum cdk_key_flags_t</title>
<indexterm><primary>cdk_key_flags_t</primary></indexterm><programlisting>typedef enum {
    CDK_FLAG_KEY_REVOKED = 256,
    CDK_FLAG_KEY_EXPIRED = 512,
    CDK_FLAG_SIG_EXPIRED = 1024
} cdk_key_flags_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-lit-format-t" role="enum"/>enum cdk_lit_format_t</title>
<indexterm><primary>cdk_lit_format_t</primary></indexterm><programlisting>typedef enum {
  CDK_LITFMT_BINARY = 0,
  CDK_LITFMT_TEXT   = 1,
  CDK_LITFMT_UNICODE= 2
} cdk_lit_format_t;	
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-packet-type-t" role="enum"/>enum cdk_packet_type_t</title>
<indexterm><primary>cdk_packet_type_t</primary></indexterm><programlisting>typedef enum {
    CDK_PKT_RESERVED      =  0,
    CDK_PKT_PUBKEY_ENC    =  1,
    CDK_PKT_SIGNATURE     =  2,
    CDK_PKT_SYMKEY_ENC    =  3,
    CDK_PKT_ONEPASS_SIG   =  4,
    CDK_PKT_SECRET_KEY    =  5,
    CDK_PKT_PUBLIC_KEY    =  6,
    CDK_PKT_SECRET_SUBKEY =  7,
    CDK_PKT_COMPRESSED    =  8,
    CDK_PKT_ENCRYPTED     =  9,
    CDK_PKT_MARKER        = 10,
    CDK_PKT_LITERAL       = 11,
    CDK_PKT_RING_TRUST    = 12,
    CDK_PKT_USER_ID       = 13,
    CDK_PKT_PUBLIC_SUBKEY = 14,
    CDK_PKT_OLD_COMMENT   = 16,
    CDK_PKT_ATTRIBUTE     = 17,
    CDK_PKT_ENCRYPTED_MDC = 18,
    CDK_PKT_MDC           = 19
} cdk_packet_type_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="MAX-CDK-PK-PARTS:CAPS" role="macro"/>MAX_CDK_PK_PARTS</title>
<indexterm><primary>MAX_CDK_PK_PARTS</primary></indexterm><programlisting>#define MAX_CDK_PK_PARTS 4
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="MAX-CDK-DATA-PARTS:CAPS" role="macro"/>MAX_CDK_DATA_PARTS</title>
<indexterm><primary>MAX_CDK_DATA_PARTS</primary></indexterm><programlisting>#define MAX_CDK_DATA_PARTS 2
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-pkt-signature-t" role="typedef"/>cdk_pkt_signature_t</title>
<indexterm><primary>cdk_pkt_signature_t</primary></indexterm><programlisting>typedef struct cdk_pkt_signature_s *cdk_pkt_signature_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-pkt-userid-t" role="typedef"/>cdk_pkt_userid_t</title>
<indexterm><primary>cdk_pkt_userid_t</primary></indexterm><programlisting>typedef struct cdk_pkt_userid_s *cdk_pkt_userid_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-pkt-pubkey-t" role="typedef"/>cdk_pkt_pubkey_t</title>
<indexterm><primary>cdk_pkt_pubkey_t</primary></indexterm><programlisting>typedef struct cdk_pkt_pubkey_s *cdk_pkt_pubkey_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-pubkey-t" role="typedef"/>cdk_pubkey_t</title>
<indexterm><primary>cdk_pubkey_t</primary></indexterm><programlisting>typedef cdk_pkt_pubkey_t cdk_pubkey_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-pkt-seckey-t" role="typedef"/>cdk_pkt_seckey_t</title>
<indexterm><primary>cdk_pkt_seckey_t</primary></indexterm><programlisting>typedef struct cdk_pkt_seckey_s *cdk_pkt_seckey_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-seckey-t" role="typedef"/>cdk_seckey_t</title>
<indexterm><primary>cdk_seckey_t</primary></indexterm><programlisting>typedef cdk_pkt_seckey_t cdk_seckey_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-pkt-onepass-sig-t" role="typedef"/>cdk_pkt_onepass_sig_t</title>
<indexterm><primary>cdk_pkt_onepass_sig_t</primary></indexterm><programlisting>typedef struct cdk_pkt_onepass_sig_s * cdk_pkt_onepass_sig_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-pkt-pubkey-enc-t" role="typedef"/>cdk_pkt_pubkey_enc_t</title>
<indexterm><primary>cdk_pkt_pubkey_enc_t</primary></indexterm><programlisting>typedef struct cdk_pkt_pubkey_enc_s * cdk_pkt_pubkey_enc_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-pkt-symkey-enc-t" role="typedef"/>cdk_pkt_symkey_enc_t</title>
<indexterm><primary>cdk_pkt_symkey_enc_t</primary></indexterm><programlisting>typedef struct cdk_pkt_symkey_enc_s *cdk_pkt_symkey_enc_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-pkt-encrypted-t" role="typedef"/>cdk_pkt_encrypted_t</title>
<indexterm><primary>cdk_pkt_encrypted_t</primary></indexterm><programlisting>typedef struct cdk_pkt_encrypted_s *cdk_pkt_encrypted_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-pkt-mdc-t" role="typedef"/>cdk_pkt_mdc_t</title>
<indexterm><primary>cdk_pkt_mdc_t</primary></indexterm><programlisting>typedef struct cdk_pkt_mdc_s *cdk_pkt_mdc_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-pkt-literal-t" role="typedef"/>cdk_pkt_literal_t</title>
<indexterm><primary>cdk_pkt_literal_t</primary></indexterm><programlisting>typedef struct cdk_pkt_literal_s *cdk_pkt_literal_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-pkt-compressed-t" role="typedef"/>cdk_pkt_compressed_t</title>
<indexterm><primary>cdk_pkt_compressed_t</primary></indexterm><programlisting>typedef struct cdk_pkt_compressed_s *cdk_pkt_compressed_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-packet-t" role="typedef"/>cdk_packet_t</title>
<indexterm><primary>cdk_packet_t</primary></indexterm><programlisting>typedef struct cdk_packet_s *cdk_packet_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-log-fnc-t" role="function"/>cdk_log_fnc_t ()</title>
<indexterm><primary>cdk_log_fnc_t</primary></indexterm><programlisting><link linkend="void">void</link>                (*cdk_log_fnc_t)                    (<link linkend="void">void</link> *,
                                                         ...,
                                                         const <link linkend="char">char</link> *,
                                                         <link linkend="va-list">va_list</link> );</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param3</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param4</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-set-log-level" role="function"/>cdk_set_log_level ()</title>
<indexterm><primary>cdk_set_log_level</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_set_log_level                   (<link linkend="int">int</link> lvl);</programlisting>
<para>
Set the verbosity level.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>lvl</parameter>&nbsp;:</term>
<listitem><simpara> the level
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-set-log-handler" role="function"/>cdk_set_log_handler ()</title>
<indexterm><primary>cdk_set_log_handler</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_set_log_handler                 (<link linkend="cdk-log-fnc-t">cdk_log_fnc_t</link> logfnc,
                                                         <link linkend="void">void</link> *opaque);</programlisting>
<para>
Set a custom handler for logging.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>logfnc</parameter>&nbsp;:</term>
<listitem><simpara> the function pointer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opaque</parameter>&nbsp;:</term>
<listitem><simpara> a private values for the function
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-strerror" role="function"/>cdk_strerror ()</title>
<indexterm><primary>cdk_strerror</primary></indexterm><programlisting>const <link linkend="char">char</link>*         cdk_strerror                        (<link linkend="int">int</link> ec);</programlisting>
<para>
Return an error text for the given id.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ec</parameter>&nbsp;:</term>
<listitem><simpara> the error number
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-set-malloc-hooks" role="function"/>cdk_set_malloc_hooks ()</title>
<indexterm><primary>cdk_set_malloc_hooks</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_set_malloc_hooks                (<link linkend="void">void</link>* (new_alloc_funcsize_t n) (),
                                                         <link linkend="void">void</link>* (new_alloc_secure_funcsize_t n) (),
                                                         <link linkend="void">void</link>* (new_realloc_funcvoid *p, size_t n) (),
                                                         <link linkend="void">void</link>* (new_calloc_funcsize_t m, size_t n) (),
                                                         <link linkend="void">void</link> (new_free_funcvoid *) ());</programlisting>
<para>
Set private memory hooks for the library.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>new_alloc_func</parameter>&nbsp;:</term>
<listitem><simpara> malloc replacement
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_alloc_secure_func</parameter>&nbsp;:</term>
<listitem><simpara> secure malloc replacement
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_realloc_func</parameter>&nbsp;:</term>
<listitem><simpara> realloc replacement
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_calloc_func</parameter>&nbsp;:</term>
<listitem><simpara> calloc replacement
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_free_func</parameter>&nbsp;:</term>
<listitem><simpara> free replacement
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-malloc-hook-initialized" role="function"/>cdk_malloc_hook_initialized ()</title>
<indexterm><primary>cdk_malloc_hook_initialized</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_malloc_hook_initialized         (void);</programlisting>
<para>
Return if the malloc hooks are already initialized.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-malloc" role="function"/>cdk_malloc ()</title>
<indexterm><primary>cdk_malloc</primary></indexterm><programlisting><link linkend="void">void</link>*               cdk_malloc                          (<link linkend="size-t">size_t</link> size);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-calloc" role="function"/>cdk_calloc ()</title>
<indexterm><primary>cdk_calloc</primary></indexterm><programlisting><link linkend="void">void</link>*               cdk_calloc                          (<link linkend="size-t">size_t</link> n,
                                                         <link linkend="size-t">size_t</link> m);</programlisting>
<para>
Safe wrapper around the c-function calloc.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara> amount of elements
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>m</parameter>&nbsp;:</term>
<listitem><simpara> size of one element
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-realloc" role="function"/>cdk_realloc ()</title>
<indexterm><primary>cdk_realloc</primary></indexterm><programlisting><link linkend="void">void</link>*               cdk_realloc                         (<link linkend="void">void</link> *ptr,
                                                         <link linkend="size-t">size_t</link> size);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-salloc" role="function"/>cdk_salloc ()</title>
<indexterm><primary>cdk_salloc</primary></indexterm><programlisting><link linkend="void">void</link>*               cdk_salloc                          (<link linkend="size-t">size_t</link> size,
                                                         <link linkend="int">int</link> clear);</programlisting>
<para>
Allocated the requested amount of bytes in 'secure' memory.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara> how much bytes should be allocated.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>clear</parameter>&nbsp;:</term>
<listitem><simpara> shall the buffer cleared after the allocation?
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-strdup" role="function"/>cdk_strdup ()</title>
<indexterm><primary>cdk_strdup</primary></indexterm><programlisting><link linkend="char">char</link>*               cdk_strdup                          (const <link linkend="char">char</link> *ptr);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-free" role="function"/>cdk_free ()</title>
<indexterm><primary>cdk_free</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_free                            (<link linkend="void">void</link> *ptr);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-lib-startup" role="function"/>cdk_lib_startup ()</title>
<indexterm><primary>cdk_lib_startup</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_lib_startup                     (void);</programlisting>
<para>
Prepare the internal structures of the library.
This function should be called before any other CDK function.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-lib-shutdown" role="function"/>cdk_lib_shutdown ()</title>
<indexterm><primary>cdk_lib_shutdown</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_lib_shutdown                    (void);</programlisting>
<para>
Shutdown the library and free all internal and globally used
memory and structures. This function should be called in the
exit handler of the calling program.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-handle-new" role="function"/>cdk_handle_new ()</title>
<indexterm><primary>cdk_handle_new</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_handle_new                      (<link linkend="cdk-ctx-t">cdk_ctx_t</link> *r_ctx);</programlisting>
<para>
create a new session handle.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>r_ctx</parameter>&nbsp;:</term>
<listitem><simpara> context to store the handle
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-handle-free" role="function"/>cdk_handle_free ()</title>
<indexterm><primary>cdk_handle_free</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_handle_free                     (<link linkend="cdk-ctx-t">cdk_ctx_t</link> c);</programlisting>
<para>
Release the main handle.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>c</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-handle-set-keydb" role="function"/>cdk_handle_set_keydb ()</title>
<indexterm><primary>cdk_handle_set_keydb</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_handle_set_keydb                (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> db);</programlisting>
<para>
set the key database handle.
the function automatically detects whether this is a public or
secret keyring and the right handle is set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara> session handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>db</parameter>&nbsp;:</term>
<listitem><simpara> the database handle
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-handle-set-keyring" role="function"/>cdk_handle_set_keyring ()</title>
<indexterm><primary>cdk_handle_set_keyring</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_handle_set_keyring              (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="int">int</link> type,
                                                         const <link linkend="char">char</link> *kringname);</programlisting>
<para>
Convenient function to set the keyring for the current session.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara> session handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> public=0 or secret=1 keyring type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>kringname</parameter>&nbsp;:</term>
<listitem><simpara> file name of the keyring which shall be used.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-handle-get-keydb" role="function"/>cdk_handle_get_keydb ()</title>
<indexterm><primary>cdk_handle_get_keydb</primary></indexterm><programlisting><link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link>      cdk_handle_get_keydb                (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="int">int</link> type);</programlisting>
<para>
Return the keydb handle from the session handle.
The caller should not free these handles.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara> session handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> type of the keyring
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-handle-control" role="function"/>cdk_handle_control ()</title>
<indexterm><primary>cdk_handle_control</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_handle_control                  (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="int">int</link> action,
                                                         <link linkend="int">int</link> cmd,
                                                         ...);</programlisting>
<para>
Perform various control operations for the current session.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara> session handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action</parameter>&nbsp;:</term>
<listitem><simpara> flag which indicates whether put or get is requested
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cmd</parameter>&nbsp;:</term>
<listitem><simpara> command id
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-handle-set-passphrase-cb" role="function"/>cdk_handle_set_passphrase_cb ()</title>
<indexterm><primary>cdk_handle_set_passphrase_cb</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_handle_set_passphrase_cb        (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="char">char</link>* (cbvoid *opa, const char *prompt) (),
                                                         <link linkend="void">void</link> *cb_value);</programlisting>
<para>
set the passphrase callback.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara> session handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb</parameter>&nbsp;:</term>
<listitem><simpara> callback function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb_value</parameter>&nbsp;:</term>
<listitem><simpara> the opaque value for the cb function
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-handle-set-armor" role="macro"/>cdk_handle_set_armor()</title>
<indexterm><primary>cdk_handle_set_armor</primary></indexterm><programlisting>#define             cdk_handle_set_armor(a, val)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-handle-set-compress" role="macro"/>cdk_handle_set_compress()</title>
<indexterm><primary>cdk_handle_set_compress</primary></indexterm><programlisting>#define             cdk_handle_set_compress(a, algo, level)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>algo</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>level</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-handle-set-blockmode" role="macro"/>cdk_handle_set_blockmode()</title>
<indexterm><primary>cdk_handle_set_blockmode</primary></indexterm><programlisting>#define             cdk_handle_set_blockmode(a, val)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-handle-set-cipher" role="macro"/>cdk_handle_set_cipher()</title>
<indexterm><primary>cdk_handle_set_cipher</primary></indexterm><programlisting>#define             cdk_handle_set_cipher(a, val)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-handle-set-digest" role="macro"/>cdk_handle_set_digest()</title>
<indexterm><primary>cdk_handle_set_digest</primary></indexterm><programlisting>#define             cdk_handle_set_digest(a, val)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-handle-set-s2k" role="macro"/>cdk_handle_set_s2k()</title>
<indexterm><primary>cdk_handle_set_s2k</primary></indexterm><programlisting>#define             cdk_handle_set_s2k(a, val1, val2)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val2</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-verify-result-t" role="typedef"/>cdk_verify_result_t</title>
<indexterm><primary>cdk_verify_result_t</primary></indexterm><programlisting>typedef struct cdk_verify_result_s *cdk_verify_result_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-handle-verify-get-result" role="function"/>cdk_handle_verify_get_result ()</title>
<indexterm><primary>cdk_handle_verify_get_result</primary></indexterm><programlisting><link linkend="cdk-verify-result-t">cdk_verify_result_t</link> cdk_handle_verify_get_result        (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd);</programlisting>
<para>
Return the verify result for the current session.
Do not free the pointer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara> the session handle
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pkt-new" role="function"/>cdk_pkt_new ()</title>
<indexterm><primary>cdk_pkt_new</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_pkt_new                         (<link linkend="cdk-packet-t">cdk_packet_t</link> *r_pkt);</programlisting>
<para>
Allocate a new packet.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>r_pkt</parameter>&nbsp;:</term>
<listitem><simpara> the new packet
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pkt-alloc" role="function"/>cdk_pkt_alloc ()</title>
<indexterm><primary>cdk_pkt_alloc</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_pkt_alloc                       (<link linkend="cdk-packet-t">cdk_packet_t</link> *r_pkt,
                                                         <link linkend="int">int</link> pkttype);</programlisting>
<para>
Allocate a new packet structure with the given packet type.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>r_pkt</parameter>&nbsp;:</term>
<listitem><simpara> output is the new packet
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkttype</parameter>&nbsp;:</term>
<listitem><simpara> the requested packet type
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pkt-free" role="function"/>cdk_pkt_free ()</title>
<indexterm><primary>cdk_pkt_free</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_pkt_free                        (<link linkend="cdk-packet-t">cdk_packet_t</link> pkt);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pkt</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pkt-release" role="function"/>cdk_pkt_release ()</title>
<indexterm><primary>cdk_pkt_release</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_pkt_release                     (<link linkend="cdk-packet-t">cdk_packet_t</link> pkt);</programlisting>
<para>
Free the contents of the given package and
release the memory of the structure.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pkt</parameter>&nbsp;:</term>
<listitem><simpara> the packet
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pkt-read" role="function"/>cdk_pkt_read ()</title>
<indexterm><primary>cdk_pkt_read</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_pkt_read                        (<link linkend="cdk-stream-t">cdk_stream_t</link> inp,
                                                         <link linkend="cdk-packet-t">cdk_packet_t</link> pkt);</programlisting>
<para>
Parse the next packet on the <parameter>inp</parameter> stream and return its contents in <parameter>pkt</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>inp</parameter>&nbsp;:</term>
<listitem><simpara> the input stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkt</parameter>&nbsp;:</term>
<listitem><simpara> allocated packet handle to store the packet
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pkt-write" role="function"/>cdk_pkt_write ()</title>
<indexterm><primary>cdk_pkt_write</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_pkt_write                       (<link linkend="cdk-stream-t">cdk_stream_t</link> out,
                                                         <link linkend="cdk-packet-t">cdk_packet_t</link> pkt);</programlisting>
<para>
Write the contents of <parameter>pkt</parameter> into the <parameter>out</parameter> stream.
Return 0 on success.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara> the output stream handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkt</parameter>&nbsp;:</term>
<listitem><simpara> the packet itself
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-subpkt-new" role="function"/>cdk_subpkt_new ()</title>
<indexterm><primary>cdk_subpkt_new</primary></indexterm><programlisting><link linkend="cdk-subpkt-t">cdk_subpkt_t</link>        cdk_subpkt_new                      (<link linkend="size-t">size_t</link> size);</programlisting>
<para>
Create a new sub packet node with the size of <parameter>size</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara> the size of the new context
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-subpkt-free" role="function"/>cdk_subpkt_free ()</title>
<indexterm><primary>cdk_subpkt_free</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_subpkt_free                     (<link linkend="cdk-subpkt-t">cdk_subpkt_t</link> ctx);</programlisting>
<para>
Release the context.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><simpara> the sub packet node to free
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-subpkt-find" role="function"/>cdk_subpkt_find ()</title>
<indexterm><primary>cdk_subpkt_find</primary></indexterm><programlisting><link linkend="cdk-subpkt-t">cdk_subpkt_t</link>        cdk_subpkt_find                     (<link linkend="cdk-subpkt-t">cdk_subpkt_t</link> ctx,
                                                         <link linkend="size-t">size_t</link> type);</programlisting>
<para>
Find the given packet type in the node. If no packet with this
type was found, return null otherwise pointer to the node.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><simpara> the sub packet node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> the packet type to find
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-subpkt-find-next" role="function"/>cdk_subpkt_find_next ()</title>
<indexterm><primary>cdk_subpkt_find_next</primary></indexterm><programlisting><link linkend="cdk-subpkt-t">cdk_subpkt_t</link>        cdk_subpkt_find_next                (<link linkend="cdk-subpkt-t">cdk_subpkt_t</link> root,
                                                         <link linkend="size-t">size_t</link> type);</programlisting>
<para>
Try to find the next node after <parameter>root</parameter> with type.
If type is 0, the next node will be returned.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>root</parameter>&nbsp;:</term>
<listitem><simpara> the base where to begin the iteration
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> the type to find or 0 for the next node.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-subpkt-type-count" role="function"/>cdk_subpkt_type_count ()</title>
<indexterm><primary>cdk_subpkt_type_count</primary></indexterm><programlisting><link linkend="size-t">size_t</link>              cdk_subpkt_type_count               (<link linkend="cdk-subpkt-t">cdk_subpkt_t</link> ctx,
                                                         <link linkend="size-t">size_t</link> type);</programlisting>
<para>
Return the amount of sub packets with this type.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><simpara> The sub packet context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> The sub packet type.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-subpkt-find-nth" role="function"/>cdk_subpkt_find_nth ()</title>
<indexterm><primary>cdk_subpkt_find_nth</primary></indexterm><programlisting><link linkend="cdk-subpkt-t">cdk_subpkt_t</link>        cdk_subpkt_find_nth                 (<link linkend="cdk-subpkt-t">cdk_subpkt_t</link> ctx,
                                                         <link linkend="size-t">size_t</link> type,
                                                         <link linkend="size-t">size_t</link> index);</programlisting>
<para>
Return the nth sub packet of the given type.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><simpara> The sub packet context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> The sub packet type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>index</parameter>&nbsp;:</term>
<listitem><simpara> The nth packet to retrieve, 0 means the first
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-subpkt-add" role="function"/>cdk_subpkt_add ()</title>
<indexterm><primary>cdk_subpkt_add</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_subpkt_add                      (<link linkend="cdk-subpkt-t">cdk_subpkt_t</link> root,
                                                         <link linkend="cdk-subpkt-t">cdk_subpkt_t</link> node);</programlisting>
<para>
Add the node in <parameter>node</parameter> to the root node <parameter>root</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>root</parameter>&nbsp;:</term>
<listitem><simpara> the root node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the node to add
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-subpkt-get-data" role="function"/>cdk_subpkt_get_data ()</title>
<indexterm><primary>cdk_subpkt_get_data</primary></indexterm><programlisting>const unsigned <link linkend="char">char</link>* cdk_subpkt_get_data                (<link linkend="cdk-subpkt-t">cdk_subpkt_t</link> ctx,
                                                         <link linkend="size-t">size_t</link> *r_type,
                                                         <link linkend="size-t">size_t</link> *r_nbytes);</programlisting>
<para>
Extract the data from the given sub packet. The type is returned
in <parameter>r_type</parameter> and the size in <parameter>r_nbytes</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><simpara> the sub packet node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_type</parameter>&nbsp;:</term>
<listitem><simpara> pointer store the packet type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_nbytes</parameter>&nbsp;:</term>
<listitem><simpara> pointer to store the packet size
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-subpkt-init" role="function"/>cdk_subpkt_init ()</title>
<indexterm><primary>cdk_subpkt_init</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_subpkt_init                     (<link linkend="cdk-subpkt-t">cdk_subpkt_t</link> node,
                                                         <link linkend="size-t">size_t</link> type,
                                                         const <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> buflen);</programlisting>
<para>
Set the packet data of the given root and set the type of it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the sub packet node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> type of the packet which data should be initialized
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara> the buffer with the actual data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buflen</parameter>&nbsp;:</term>
<listitem><simpara> the size of the data
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-key-desig-revoker-walk" role="function"/>cdk_key_desig_revoker_walk ()</title>
<indexterm><primary>cdk_key_desig_revoker_walk</primary></indexterm><programlisting>const unsigned <link linkend="char">char</link>* cdk_key_desig_revoker_walk         (<link linkend="cdk-desig-revoker-t">cdk_desig_revoker_t</link> root,
                                                         <link linkend="cdk-desig-revoker-t">cdk_desig_revoker_t</link> *ctx,
                                                         <link linkend="int">int</link> *r_class,
                                                         <link linkend="int">int</link> *r_algid);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>root</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_class</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_algid</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="is-RSA" role="macro"/>is_RSA()</title>
<indexterm><primary>is_RSA</primary></indexterm><programlisting>#define             is_RSA(a)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="is-ELG" role="macro"/>is_ELG()</title>
<indexterm><primary>is_ELG</primary></indexterm><programlisting>#define is_ELG(a) ((a) == CDK_PK_ELG_E)
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="is-DSA" role="macro"/>is_DSA()</title>
<indexterm><primary>is_DSA</primary></indexterm><programlisting>#define is_DSA(a) ((a) == CDK_PK_DSA)
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pk-encrypt" role="function"/>cdk_pk_encrypt ()</title>
<indexterm><primary>cdk_pk_encrypt</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_pk_encrypt                      (<link linkend="cdk-pubkey-t">cdk_pubkey_t</link> pk,
                                                         <link linkend="cdk-pkt-pubkey-enc-t">cdk_pkt_pubkey_enc_t</link> pke,
                                                         <link linkend="gcry-mpi-t">gcry_mpi_t</link> sk);</programlisting>
<para>
Encrypt the session key in <parameter>esk</parameter> and write its encrypted content
into the <parameter>pke</parameter> struct.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pk</parameter>&nbsp;:</term>
<listitem><simpara> the public key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pke</parameter>&nbsp;:</term>
<listitem><simpara> the public key encrypted packet
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sk</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pk-decrypt" role="function"/>cdk_pk_decrypt ()</title>
<indexterm><primary>cdk_pk_decrypt</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_pk_decrypt                      (<link linkend="cdk-seckey-t">cdk_seckey_t</link> sk,
                                                         <link linkend="cdk-pkt-pubkey-enc-t">cdk_pkt_pubkey_enc_t</link> pke,
                                                         <link linkend="gcry-mpi-t">gcry_mpi_t</link> *r_sk);</programlisting>
<para>
Decrypt the encrypted session key from <parameter>pke</parameter> into <parameter>r_sk</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sk</parameter>&nbsp;:</term>
<listitem><simpara> the secret key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pke</parameter>&nbsp;:</term>
<listitem><simpara> public key encrypted packet
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_sk</parameter>&nbsp;:</term>
<listitem><simpara> the object to store the plain session key
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pk-sign" role="function"/>cdk_pk_sign ()</title>
<indexterm><primary>cdk_pk_sign</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_pk_sign                         (<link linkend="cdk-seckey-t">cdk_seckey_t</link> sk,
                                                         <link linkend="cdk-pkt-signature-t">cdk_pkt_signature_t</link> sig,
                                                         unsigned <link linkend="char">char</link> *md);</programlisting>
<para>
Sign the message digest from <parameter>md</parameter> and write the result into <parameter>sig</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sk</parameter>&nbsp;:</term>
<listitem><simpara> secret key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sig</parameter>&nbsp;:</term>
<listitem><simpara> signature
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>md</parameter>&nbsp;:</term>
<listitem><simpara> the message digest
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pk-verify" role="function"/>cdk_pk_verify ()</title>
<indexterm><primary>cdk_pk_verify</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_pk_verify                       (<link linkend="cdk-pubkey-t">cdk_pubkey_t</link> pk,
                                                         <link linkend="cdk-pkt-signature-t">cdk_pkt_signature_t</link> sig,
                                                         unsigned <link linkend="char">char</link> *md);</programlisting>
<para>
Verify the signature in <parameter>sig</parameter> and compare it with the message digest in <parameter>md</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pk</parameter>&nbsp;:</term>
<listitem><simpara> the public key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sig</parameter>&nbsp;:</term>
<listitem><simpara> signature
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>md</parameter>&nbsp;:</term>
<listitem><simpara> the message digest
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pk-get-mpi" role="function"/>cdk_pk_get_mpi ()</title>
<indexterm><primary>cdk_pk_get_mpi</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_pk_get_mpi                      (<link linkend="cdk-pubkey-t">cdk_pubkey_t</link> pk,
                                                         <link linkend="size-t">size_t</link> idx,
                                                         unsigned <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> buflen,
                                                         <link linkend="size-t">size_t</link> *r_nwritten,
                                                         <link linkend="size-t">size_t</link> *r_nbits);</programlisting>
<para>
Return the MPI with the given index of the public key.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pk</parameter>&nbsp;:</term>
<listitem><simpara> public key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&nbsp;:</term>
<listitem><simpara> index of the MPI to retrieve
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara> buffer to hold the raw data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buflen</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_nwritten</parameter>&nbsp;:</term>
<listitem><simpara> output how large the raw data is
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_nbits</parameter>&nbsp;:</term>
<listitem><simpara> size of the MPI in bits.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-sk-get-mpi" role="function"/>cdk_sk_get_mpi ()</title>
<indexterm><primary>cdk_sk_get_mpi</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_sk_get_mpi                      (<link linkend="cdk-seckey-t">cdk_seckey_t</link> sk,
                                                         <link linkend="size-t">size_t</link> idx,
                                                         unsigned <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> buflen,
                                                         <link linkend="size-t">size_t</link> *r_nwritten,
                                                         <link linkend="size-t">size_t</link> *r_nbits);</programlisting>
<para>
Return the MPI of the given secret key with the
index <parameter>idx</parameter>. It is important to check if the key
is protected and thus no real MPI data will be returned then.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sk</parameter>&nbsp;:</term>
<listitem><simpara> secret key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&nbsp;:</term>
<listitem><simpara> index of the MPI to retrieve
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara> buffer to hold the raw data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buflen</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_nwritten</parameter>&nbsp;:</term>
<listitem><simpara> output length of the raw data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_nbits</parameter>&nbsp;:</term>
<listitem><simpara> length of the MPI data in bits.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pk-get-nbits" role="function"/>cdk_pk_get_nbits ()</title>
<indexterm><primary>cdk_pk_get_nbits</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_pk_get_nbits                    (<link linkend="cdk-pubkey-t">cdk_pubkey_t</link> pk);</programlisting>
<para>
Return the number of MPIs a signature consists of.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pk</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pk-get-npkey" role="function"/>cdk_pk_get_npkey ()</title>
<indexterm><primary>cdk_pk_get_npkey</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_pk_get_npkey                    (<link linkend="int">int</link> algo);</programlisting>
<para>
Return the number of multiprecison integer forming an public
key with the given algorithm.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>algo</parameter>&nbsp;:</term>
<listitem><simpara> The public key algorithm.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pk-get-nskey" role="function"/>cdk_pk_get_nskey ()</title>
<indexterm><primary>cdk_pk_get_nskey</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_pk_get_nskey                    (<link linkend="int">int</link> algo);</programlisting>
<para>
Return the number of multiprecision integers forming an
secret key with the given algorithm.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>algo</parameter>&nbsp;:</term>
<listitem><simpara> the public key algorithm
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pk-get-nsig" role="function"/>cdk_pk_get_nsig ()</title>
<indexterm><primary>cdk_pk_get_nsig</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_pk_get_nsig                     (<link linkend="int">int</link> algo);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>algo</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pk-get-nenc" role="function"/>cdk_pk_get_nenc ()</title>
<indexterm><primary>cdk_pk_get_nenc</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_pk_get_nenc                     (<link linkend="int">int</link> algo);</programlisting>
<para>
Return the number of MPI's the encrypted data consists of.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>algo</parameter>&nbsp;:</term>
<listitem><simpara> the public key algorithm
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pk-get-fingerprint" role="function"/>cdk_pk_get_fingerprint ()</title>
<indexterm><primary>cdk_pk_get_fingerprint</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_pk_get_fingerprint              (<link linkend="cdk-pubkey-t">cdk_pubkey_t</link> pk,
                                                         unsigned <link linkend="char">char</link> *fpr);</programlisting>
<para>
Return the fingerprint of the given public key.
The buffer must be at least 20 octets.
This function should be considered deprecated and
the new <link linkend="cdk-pk-to-fingerprint"><function>cdk_pk_to_fingerprint()</function></link> should be used whenever
possible to avoid overflows.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pk</parameter>&nbsp;:</term>
<listitem><simpara> the public key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fpr</parameter>&nbsp;:</term>
<listitem><simpara> the buffer to hold the fingerprint
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pk-to-fingerprint" role="function"/>cdk_pk_to_fingerprint ()</title>
<indexterm><primary>cdk_pk_to_fingerprint</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_pk_to_fingerprint               (<link linkend="cdk-pubkey-t">cdk_pubkey_t</link> pk,
                                                         unsigned <link linkend="char">char</link> *fpr,
                                                         <link linkend="size-t">size_t</link> fprlen,
                                                         <link linkend="size-t">size_t</link> *r_nout);</programlisting>
<para>
Calculate a fingerprint of the given key and
return it in the given byte array.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pk</parameter>&nbsp;:</term>
<listitem><simpara> the public key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fpr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fprlen</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_nout</parameter>&nbsp;:</term>
<listitem><simpara> actual length of the fingerprint.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pk-fingerprint-get-keyid" role="function"/>cdk_pk_fingerprint_get_keyid ()</title>
<indexterm><primary>cdk_pk_fingerprint_get_keyid</primary></indexterm><programlisting>unsigned <link linkend="int">int</link>        cdk_pk_fingerprint_get_keyid        (unsigned <link linkend="char">char</link> *fpr,
                                                         <link linkend="size-t">size_t</link> fprlen,
                                                         unsigned <link linkend="int">int</link> *keyid);</programlisting>
<para>
Derive the key ID from the key fingerprint.
For version 3 keys, this is not working.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>fpr</parameter>&nbsp;:</term>
<listitem><simpara> the key fingerprint
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fprlen</parameter>&nbsp;:</term>
<listitem><simpara> the length of the fingerprint
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pk-get-keyid" role="function"/>cdk_pk_get_keyid ()</title>
<indexterm><primary>cdk_pk_get_keyid</primary></indexterm><programlisting>unsigned <link linkend="int">int</link>        cdk_pk_get_keyid                    (<link linkend="cdk-pubkey-t">cdk_pubkey_t</link> pk,
                                                         unsigned <link linkend="int">int</link> *keyid);</programlisting>
<para>
Calculate the key ID of the given public key.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pk</parameter>&nbsp;:</term>
<listitem><simpara> the public key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&nbsp;:</term>
<listitem><simpara> buffer to store the key ID
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-sk-get-keyid" role="function"/>cdk_sk_get_keyid ()</title>
<indexterm><primary>cdk_sk_get_keyid</primary></indexterm><programlisting>unsigned <link linkend="int">int</link>        cdk_sk_get_keyid                    (<link linkend="cdk-seckey-t">cdk_seckey_t</link> sk,
                                                         unsigned <link linkend="int">int</link> *keyid);</programlisting>
<para>
Calculate the key ID of the secret key, actually the public key.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sk</parameter>&nbsp;:</term>
<listitem><simpara> the secret key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&nbsp;:</term>
<listitem><simpara> buffer to hold the key ID
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-sig-get-keyid" role="function"/>cdk_sig_get_keyid ()</title>
<indexterm><primary>cdk_sig_get_keyid</primary></indexterm><programlisting>unsigned <link linkend="int">int</link>        cdk_sig_get_keyid                   (<link linkend="cdk-pkt-signature-t">cdk_pkt_signature_t</link> sig,
                                                         unsigned <link linkend="int">int</link> *keyid);</programlisting>
<para>
Retrieve the key ID from the given signature.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sig</parameter>&nbsp;:</term>
<listitem><simpara> the signature
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&nbsp;:</term>
<listitem><simpara> buffer to hold the key ID
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pk-release" role="function"/>cdk_pk_release ()</title>
<indexterm><primary>cdk_pk_release</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_pk_release                      (<link linkend="cdk-pubkey-t">cdk_pubkey_t</link> pk);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pk</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-sk-release" role="function"/>cdk_sk_release ()</title>
<indexterm><primary>cdk_sk_release</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_sk_release                      (<link linkend="cdk-seckey-t">cdk_seckey_t</link> sk);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sk</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-sk-unprotect" role="function"/>cdk_sk_unprotect ()</title>
<indexterm><primary>cdk_sk_unprotect</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_sk_unprotect                    (<link linkend="cdk-seckey-t">cdk_seckey_t</link> sk,
                                                         const <link linkend="char">char</link> *pw);</programlisting>
<para>
Unprotect the given secret key with the passphrase.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sk</parameter>&nbsp;:</term>
<listitem><simpara> the secret key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pw</parameter>&nbsp;:</term>
<listitem><simpara> the passphrase
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-sk-protect" role="function"/>cdk_sk_protect ()</title>
<indexterm><primary>cdk_sk_protect</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_sk_protect                      (<link linkend="cdk-seckey-t">cdk_seckey_t</link> sk,
                                                         const <link linkend="char">char</link> *pw);</programlisting>
<para>
Protect the given secret key with a passphrase.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sk</parameter>&nbsp;:</term>
<listitem><simpara> the secret key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pw</parameter>&nbsp;:</term>
<listitem><simpara> the passphrase to use
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pk-from-secret-key" role="function"/>cdk_pk_from_secret_key ()</title>
<indexterm><primary>cdk_pk_from_secret_key</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_pk_from_secret_key              (<link linkend="cdk-seckey-t">cdk_seckey_t</link> sk,
                                                         <link linkend="cdk-pubkey-t">cdk_pubkey_t</link> *ret_pk);</programlisting>
<para>
Create a new public key from a secret key.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sk</parameter>&nbsp;:</term>
<listitem><simpara> the secret key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_pk</parameter>&nbsp;:</term>
<listitem><simpara> the new public key
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pubkey-to-sexp" role="function"/>cdk_pubkey_to_sexp ()</title>
<indexterm><primary>cdk_pubkey_to_sexp</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_pubkey_to_sexp                  (<link linkend="cdk-pubkey-t">cdk_pubkey_t</link> pk,
                                                         <link linkend="char">char</link> **sexp,
                                                         <link linkend="size-t">size_t</link> *len);</programlisting>
<para>
Convert a public key to an S-expression. sexp is allocated by this
function, but you have to <link linkend="cdk-free"><function>cdk_free()</function></link> it yourself.  The S-expression
is stored in canonical format as used by libgcrypt
(GCRYSEXP_FMT_CANON).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pk</parameter>&nbsp;:</term>
<listitem><simpara> the public key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sexp</parameter>&nbsp;:</term>
<listitem><simpara> where to store the S-expression
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> the length of sexp
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-seckey-to-sexp" role="function"/>cdk_seckey_to_sexp ()</title>
<indexterm><primary>cdk_seckey_to_sexp</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_seckey_to_sexp                  (<link linkend="cdk-seckey-t">cdk_seckey_t</link> sk,
                                                         <link linkend="char">char</link> **sexp,
                                                         <link linkend="size-t">size_t</link> *len);</programlisting>
<para>
Convert a public key to an S-expression. sexp is allocated by this
function, but you have to <link linkend="cdk-free"><function>cdk_free()</function></link> it yourself.  The S-expression
is stored in canonical format as used by libgcrypt
(GCRYSEXP_FMT_CANON).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sk</parameter>&nbsp;:</term>
<listitem><simpara> the secret key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sexp</parameter>&nbsp;:</term>
<listitem><simpara> where to store the S-expression
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> the length of sexp
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-dek-new" role="function"/>cdk_dek_new ()</title>
<indexterm><primary>cdk_dek_new</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_dek_new                         (<link linkend="cdk-dek-t">cdk_dek_t</link> *r_dek);</programlisting>
<para>
Create a new DEK object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>r_dek</parameter>&nbsp;:</term>
<listitem><simpara> the new DEK object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-dek-free" role="function"/>cdk_dek_free ()</title>
<indexterm><primary>cdk_dek_free</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_dek_free                        (<link linkend="cdk-dek-t">cdk_dek_t</link> dek);</programlisting>
<para>
Release the DEK object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dek</parameter>&nbsp;:</term>
<listitem><simpara> the DEK object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-dek-set-cipher" role="function"/>cdk_dek_set_cipher ()</title>
<indexterm><primary>cdk_dek_set_cipher</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_dek_set_cipher                  (<link linkend="cdk-dek-t">cdk_dek_t</link> dek,
                                                         <link linkend="int">int</link> cipher_algo);</programlisting>
<para>
Set the cipher for the given DEK object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dek</parameter>&nbsp;:</term>
<listitem><simpara> the DEK object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cipher_algo</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-dek-get-cipher" role="function"/>cdk_dek_get_cipher ()</title>
<indexterm><primary>cdk_dek_get_cipher</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_dek_get_cipher                  (<link linkend="cdk-dek-t">cdk_dek_t</link> dek,
                                                         <link linkend="int">int</link> *r_cipher_algo);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dek</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_cipher_algo</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-dek-set-key" role="function"/>cdk_dek_set_key ()</title>
<indexterm><primary>cdk_dek_set_key</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_dek_set_key                     (<link linkend="cdk-dek-t">cdk_dek_t</link> dek,
                                                         unsigned <link linkend="char">char</link> *key,
                                                         <link linkend="size-t">size_t</link> keylen);</programlisting>
<para>
Set the random session key for the given DEK object.
If <parameter>key</parameter> and <parameter>keylen</parameter> is NULL (0) a random key will be generated.
In any case, cdk_dek_set_cipher must be called first.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dek</parameter>&nbsp;:</term>
<listitem><simpara> the DEK object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> the random session key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keylen</parameter>&nbsp;:</term>
<listitem><simpara> the length of the session key.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-dek-set-mdc-flag" role="function"/>cdk_dek_set_mdc_flag ()</title>
<indexterm><primary>cdk_dek_set_mdc_flag</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_dek_set_mdc_flag                (<link linkend="cdk-dek-t">cdk_dek_t</link> dek,
                                                         <link linkend="int">int</link> val);</programlisting>
<para>
Enable or disable the MDC flag for the given DEK object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dek</parameter>&nbsp;:</term>
<listitem><simpara> the DEK object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val</parameter>&nbsp;:</term>
<listitem><simpara> value to enable or disable the use
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-dek-get-mdc-flag" role="function"/>cdk_dek_get_mdc_flag ()</title>
<indexterm><primary>cdk_dek_get_mdc_flag</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_dek_get_mdc_flag                (<link linkend="cdk-dek-t">cdk_dek_t</link> dek);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dek</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-dek-from-passphrase" role="function"/>cdk_dek_from_passphrase ()</title>
<indexterm><primary>cdk_dek_from_passphrase</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_dek_from_passphrase             (<link linkend="cdk-dek-t">cdk_dek_t</link> *ret_dek,
                                                         <link linkend="int">int</link> cipher_algo,
                                                         <link linkend="cdk-s2k-t">cdk_s2k_t</link> s2k,
                                                         <link linkend="int">int</link> rndsalt,
                                                         const <link linkend="char">char</link> *passphrase);</programlisting>
<para>
Transform a passphrase into a DEK object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ret_dek</parameter>&nbsp;:</term>
<listitem><simpara> the new DEK.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cipher_algo</parameter>&nbsp;:</term>
<listitem><simpara> symmetric key algorithm to use
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>s2k</parameter>&nbsp;:</term>
<listitem><simpara> the S2K to use
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rndsalt</parameter>&nbsp;:</term>
<listitem><simpara> 1=create random salt
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>passphrase</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-s2k-new" role="function"/>cdk_s2k_new ()</title>
<indexterm><primary>cdk_s2k_new</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_s2k_new                         (<link linkend="cdk-s2k-t">cdk_s2k_t</link> *ret_s2k,
                                                         <link linkend="int">int</link> mode,
                                                         <link linkend="int">int</link> digest_algo,
                                                         unsigned <link linkend="char">char</link> *salt);</programlisting>
<para>
Create a new S2K object with the given parameter.
The <parameter>salt</parameter> parameter must be always 8 octets.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ret_s2k</parameter>&nbsp;:</term>
<listitem><simpara> output for the new S2K object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&nbsp;:</term>
<listitem><simpara> the S2K mode (simple, salted, iter+salted)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>digest_algo</parameter>&nbsp;:</term>
<listitem><simpara> the hash algorithm
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>salt</parameter>&nbsp;:</term>
<listitem><simpara> random salt
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-s2k-free" role="function"/>cdk_s2k_free ()</title>
<indexterm><primary>cdk_s2k_free</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_s2k_free                        (<link linkend="cdk-s2k-t">cdk_s2k_t</link> s2k);</programlisting>
<para>
Release the given S2K object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s2k</parameter>&nbsp;:</term>
<listitem><simpara> the S2K object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-file-armor" role="function"/>cdk_file_armor ()</title>
<indexterm><primary>cdk_file_armor</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_file_armor                      (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         const <link linkend="char">char</link> *file,
                                                         const <link linkend="char">char</link> *output);</programlisting>
<para>
Protect a file with ASCII armor.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara> Handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>file</parameter>&nbsp;:</term>
<listitem><simpara> Name of the file to protect.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara> Output filename.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-file-dearmor" role="function"/>cdk_file_dearmor ()</title>
<indexterm><primary>cdk_file_dearmor</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_file_dearmor                    (const <link linkend="char">char</link> *file,
                                                         const <link linkend="char">char</link> *output);</programlisting>
<para>
Remove ASCII armor from a file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>file</parameter>&nbsp;:</term>
<listitem><simpara> Name of the file to unprotect.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara> Output filename.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-armor-filter-use" role="function"/>cdk_armor_filter_use ()</title>
<indexterm><primary>cdk_armor_filter_use</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_armor_filter_use                (<link linkend="cdk-stream-t">cdk_stream_t</link> inp);</programlisting>
<para>
Check if the stream contains armored data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>inp</parameter>&nbsp;:</term>
<listitem><simpara> the stream to check
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-armor-encode-buffer" role="function"/>cdk_armor_encode_buffer ()</title>
<indexterm><primary>cdk_armor_encode_buffer</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_armor_encode_buffer             (unsigned <link linkend="char">char</link> *inbuf,
                                                         <link linkend="size-t">size_t</link> inlen,
                                                         <link linkend="char">char</link> *outbuf,
                                                         <link linkend="size-t">size_t</link> outlen,
                                                         <link linkend="size-t">size_t</link> *nwritten,
                                                         <link linkend="int">int</link> type);</programlisting>
<para>
Encode the given buffer into base64 format.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>inbuf</parameter>&nbsp;:</term>
<listitem><simpara> the raw input buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inlen</parameter>&nbsp;:</term>
<listitem><simpara> raw buffer len
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>outbuf</parameter>&nbsp;:</term>
<listitem><simpara> the destination buffer for the base64 output
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>outlen</parameter>&nbsp;:</term>
<listitem><simpara> destination buffer len
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>nwritten</parameter>&nbsp;:</term>
<listitem><simpara> actual length of the base64 data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> the base64 file type.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="open" role="function"/>open ()</title>
<indexterm><primary>open</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         open                                (<link linkend="void">void</link> *);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="release" role="function"/>release ()</title>
<indexterm><primary>release</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         release                             (<link linkend="void">void</link> *);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="read" role="function"/>read ()</title>
<indexterm><primary>read</primary></indexterm><programlisting><link linkend="int">int</link>                 read                                (<link linkend="void">void</link> *,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> );</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param3</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="write" role="function"/>write ()</title>
<indexterm><primary>write</primary></indexterm><programlisting><link linkend="int">int</link>                 write                               (<link linkend="void">void</link> *,
                                                         const <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> );</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param3</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="seek" role="function"/>seek ()</title>
<indexterm><primary>seek</primary></indexterm><programlisting><link linkend="int">int</link>                 seek                                (<link linkend="void">void</link> *,
                                                         <link linkend="off-t">off_t</link> );</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-cbs-t" role="typedef"/>cdk_stream_cbs_t</title>
<indexterm><primary>cdk_stream_cbs_t</primary></indexterm><programlisting>typedef struct cdk_stream_cbs_s *cdk_stream_cbs_t;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="cdk-stream-is-compressed" role="function"/>cdk_stream_is_compressed ()</title>
<indexterm><primary>cdk_stream_is_compressed</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_stream_is_compressed            (<link linkend="cdk-stream-t">cdk_stream_t</link> s);</programlisting>
<para>
Return 0 if the stream is uncompressed, otherwise the
compression algorithm.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> the stream
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-sockopen" role="function"/>cdk_stream_sockopen ()</title>
<indexterm><primary>cdk_stream_sockopen</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_sockopen                 (const <link linkend="char">char</link> *host,
                                                         <link linkend="unsigned-short-">unsigned short </link> port,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> *ret_out);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>host</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>port</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_out</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-open" role="function"/>cdk_stream_open ()</title>
<indexterm><primary>cdk_stream_open</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_open                     (const <link linkend="char">char</link> *file,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> *ret_s);</programlisting>
<para>
Create a new stream based on an existing file. The stream is
opened in read-only mode.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>file</parameter>&nbsp;:</term>
<listitem><simpara> The file to open
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_s</parameter>&nbsp;:</term>
<listitem><simpara> The new STREAM object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-new" role="function"/>cdk_stream_new ()</title>
<indexterm><primary>cdk_stream_new</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_new                      (const <link linkend="char">char</link> *file,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> *ret_s);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>file</parameter>&nbsp;:</term>
<listitem><simpara> The name of the new file
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_s</parameter>&nbsp;:</term>
<listitem><simpara> The new STREAM object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-new-from-cbs" role="function"/>cdk_stream_new_from_cbs ()</title>
<indexterm><primary>cdk_stream_new_from_cbs</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_new_from_cbs             (<link linkend="cdk-stream-cbs-t">cdk_stream_cbs_t</link> cbs,
                                                         <link linkend="void">void</link> *opa,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> *ret_s);</programlisting>
<para>
This function creates a stream which uses user callback
for the core operations (open, close, read, write, seek).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cbs</parameter>&nbsp;:</term>
<listitem><simpara> the callback context with all user callback functions
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opa</parameter>&nbsp;:</term>
<listitem><simpara> opaque handle which is passed to all callbacks.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_s</parameter>&nbsp;:</term>
<listitem><simpara> the allocated stream
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-create" role="function"/>cdk_stream_create ()</title>
<indexterm><primary>cdk_stream_create</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_create                   (const <link linkend="char">char</link> *file,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> *ret_s);</programlisting>
<para>
The difference to cdk_stream_new is, that no filtering can be used with
this kind of stream and everything is written directly to the stream.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>file</parameter>&nbsp;:</term>
<listitem><simpara> the filename
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_s</parameter>&nbsp;:</term>
<listitem><simpara> the object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-tmp-new" role="function"/>cdk_stream_tmp_new ()</title>
<indexterm><primary>cdk_stream_tmp_new</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_tmp_new                  (<link linkend="cdk-stream-t">cdk_stream_t</link> *r_out);</programlisting>
<para>
Allocate a new tempory stream which is not associated with a file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>r_out</parameter>&nbsp;:</term>
<listitem><simpara> the new temp stream.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-tmp-from-mem" role="function"/>cdk_stream_tmp_from_mem ()</title>
<indexterm><primary>cdk_stream_tmp_from_mem</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_tmp_from_mem             (const <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> buflen,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> *r_out);</programlisting>
<para>
Create a new tempory stream with the given contests.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara> the buffer which shall be written to the temp stream.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buflen</parameter>&nbsp;:</term>
<listitem><simpara> how large the buffer is
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_out</parameter>&nbsp;:</term>
<listitem><simpara> the new stream with the given contents.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-tmp-set-mode" role="function"/>cdk_stream_tmp_set_mode ()</title>
<indexterm><primary>cdk_stream_tmp_set_mode</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_stream_tmp_set_mode             (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="int">int</link> val);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-flush" role="function"/>cdk_stream_flush ()</title>
<indexterm><primary>cdk_stream_flush</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_flush                    (<link linkend="cdk-stream-t">cdk_stream_t</link> s);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-enable-cache" role="function"/>cdk_stream_enable_cache ()</title>
<indexterm><primary>cdk_stream_enable_cache</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_enable_cache             (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="int">int</link> val);</programlisting>
<para>
Enable or disable the cache section of a stream object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> the stream object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val</parameter>&nbsp;:</term>
<listitem><simpara> 1=on, 0=off
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-filter-disable" role="function"/>cdk_stream_filter_disable ()</title>
<indexterm><primary>cdk_stream_filter_disable</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_filter_disable           (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="int">int</link> type);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> The STREAM object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> The numberic filter ID.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-close" role="function"/>cdk_stream_close ()</title>
<indexterm><primary>cdk_stream_close</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_close                    (<link linkend="cdk-stream-t">cdk_stream_t</link> s);</programlisting>
<para>
This function work different for read or write streams. When the
stream is for reading, the filtering is already done and we can
simply close the file and all buffers.
But for the case it's a write stream, we need to apply all registered
filters now. The file is closed in the filter function and not here.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> The STREAM object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-get-length" role="function"/>cdk_stream_get_length ()</title>
<indexterm><primary>cdk_stream_get_length</primary></indexterm><programlisting><link linkend="off-t">off_t</link>               cdk_stream_get_length               (<link linkend="cdk-stream-t">cdk_stream_t</link> s);</programlisting>
<para>
This function should work for both read and write streams. For write
streams an additional flush is used to write possible pending data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> The STREAM object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-read" role="function"/>cdk_stream_read ()</title>
<indexterm><primary>cdk_stream_read</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_stream_read                     (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> count);</programlisting>
<para>
When this function is called the first time, it can take a while
because all filters need to be processed. Please remember that you
need to add the filters in reserved order.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> The STREAM object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara> The buffer to insert the readed bytes.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&nbsp;:</term>
<listitem><simpara> Request so much bytes.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-write" role="function"/>cdk_stream_write ()</title>
<indexterm><primary>cdk_stream_write</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_stream_write                    (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         const <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> count);</programlisting>
<para>
In this function we simply write the bytes to the stream. We can't
use the filters here because it would mean they have to support
partial flushing.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> The STREAM object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara> The buffer with the values to write.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&nbsp;:</term>
<listitem><simpara> The size of the buffer.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-putc" role="function"/>cdk_stream_putc ()</title>
<indexterm><primary>cdk_stream_putc</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_stream_putc                     (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="int">int</link> c);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>c</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-getc" role="function"/>cdk_stream_getc ()</title>
<indexterm><primary>cdk_stream_getc</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_stream_getc                     (<link linkend="cdk-stream-t">cdk_stream_t</link> s);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-eof" role="function"/>cdk_stream_eof ()</title>
<indexterm><primary>cdk_stream_eof</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_stream_eof                      (<link linkend="cdk-stream-t">cdk_stream_t</link> s);</programlisting>
<para>
This function will only work with read streams.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> The STREAM object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-tell" role="function"/>cdk_stream_tell ()</title>
<indexterm><primary>cdk_stream_tell</primary></indexterm><programlisting><link linkend="off-t">off_t</link>               cdk_stream_tell                     (<link linkend="cdk-stream-t">cdk_stream_t</link> s);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-seek" role="function"/>cdk_stream_seek ()</title>
<indexterm><primary>cdk_stream_seek</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_seek                     (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="off-t">off_t</link> offset);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-set-armor-flag" role="function"/>cdk_stream_set_armor_flag ()</title>
<indexterm><primary>cdk_stream_set_armor_flag</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_set_armor_flag           (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="int">int</link> type);</programlisting>
<para>
If the file is in read-mode, no armor type needs to be
defined (armor_type=0) because the armor filter will be
used for decoding existing armor data.
For the write mode, <parameter>armor_type</parameter> can be set to any valid
armor type (message, key, sig).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> the stream object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> the type of armor to use
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-set-literal-flag" role="function"/>cdk_stream_set_literal_flag ()</title>
<indexterm><primary>cdk_stream_set_literal_flag</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_set_literal_flag         (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="cdk-lit-format-t">cdk_lit_format_t</link> mode,
                                                         const <link linkend="char">char</link> *fname);</programlisting>
<para>
In read mode it kicks off the literal decoding routine to
unwrap the data from the packet. The <parameter>mode</parameter> parameter is ignored.
In write mode the function can be used to wrap the stream data
into a literal packet with the given mode and file name.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> the stream object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&nbsp;:</term>
<listitem><simpara> the mode to use (binary, text, unicode)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fname</parameter>&nbsp;:</term>
<listitem><simpara> the file name to store in the packet.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-set-cipher-flag" role="function"/>cdk_stream_set_cipher_flag ()</title>
<indexterm><primary>cdk_stream_set_cipher_flag</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_set_cipher_flag          (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="cdk-dek-t">cdk_dek_t</link> dek,
                                                         <link linkend="int">int</link> use_mdc);</programlisting>
<para>
In read mode it kicks off the cipher filter to decrypt the data
from the stream with the key given in <parameter>dek</parameter>.
In write mode the stream data will be encrypted with the DEK object
and optionally, the <parameter>use_mdc</parameter> parameter can be used to enable the MDC mode.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> the stream object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dek</parameter>&nbsp;:</term>
<listitem><simpara> the data encryption key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>use_mdc</parameter>&nbsp;:</term>
<listitem><simpara> 1 means to use the MDC mode
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-set-compress-flag" role="function"/>cdk_stream_set_compress_flag ()</title>
<indexterm><primary>cdk_stream_set_compress_flag</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_set_compress_flag        (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="int">int</link> algo,
                                                         <link linkend="int">int</link> level);</programlisting>
<para>
In read mode it kicks off the decompression filter to retrieve
the uncompressed data.
In write mode the stream data will be compressed with the
given algorithm at the given level.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> the stream object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>algo</parameter>&nbsp;:</term>
<listitem><simpara> the compression algo
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>level</parameter>&nbsp;:</term>
<listitem><simpara> level of compression (0..9)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-set-hash-flag" role="function"/>cdk_stream_set_hash_flag ()</title>
<indexterm><primary>cdk_stream_set_hash_flag</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_set_hash_flag            (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="int">int</link> algo);</programlisting>
<para>
This is for read-only streams. It pushes a digest filter to
calculate the digest of the given stream data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> the stream object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>algo</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-set-text-flag" role="function"/>cdk_stream_set_text_flag ()</title>
<indexterm><primary>cdk_stream_set_text_flag</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_set_text_flag            (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         const <link linkend="char">char</link> *lf);</programlisting>
<para>
Pushes the text filter to store the stream data in cannoncial format.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> the stream object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>lf</parameter>&nbsp;:</term>
<listitem><simpara> line ending
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-kick-off" role="function"/>cdk_stream_kick_off ()</title>
<indexterm><primary>cdk_stream_kick_off</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_kick_off                 (<link linkend="cdk-stream-t">cdk_stream_t</link> inp,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> out);</programlisting>
<para>
Passes the entire data from <parameter>inp</parameter> into the output stream <parameter>out</parameter>
with all the activated filters.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>inp</parameter>&nbsp;:</term>
<listitem><simpara> the input stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara> the output stream.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-mmap" role="function"/>cdk_stream_mmap ()</title>
<indexterm><primary>cdk_stream_mmap</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_mmap                     (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         unsigned <link linkend="char">char</link> **ret_buf,
                                                         <link linkend="size-t">size_t</link> *ret_buflen);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_buf</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_buflen</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-mmap-part" role="function"/>cdk_stream_mmap_part ()</title>
<indexterm><primary>cdk_stream_mmap_part</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_mmap_part                (<link linkend="cdk-stream-t">cdk_stream_t</link> s,
                                                         <link linkend="off-t">off_t</link> off,
                                                         <link linkend="size-t">size_t</link> len,
                                                         unsigned <link linkend="char">char</link> **ret_buf,
                                                         <link linkend="size-t">size_t</link> *ret_buflen);</programlisting>
<para>
Map the data of the given stream into a memory section. <parameter>ret_count</parameter>
contains the length of the buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&nbsp;:</term>
<listitem><simpara> the stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>off</parameter>&nbsp;:</term>
<listitem><simpara> the offset where to start
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> how much bytes shall be mapped
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_buf</parameter>&nbsp;:</term>
<listitem><simpara> the buffer to store the content
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_buflen</parameter>&nbsp;:</term>
<listitem><simpara> length of the buffer
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-peek" role="function"/>cdk_stream_peek ()</title>
<indexterm><primary>cdk_stream_peek</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_stream_peek                     (<link linkend="cdk-stream-t">cdk_stream_t</link> inp,
                                                         unsigned <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> buflen);</programlisting>
<para>
The function acts like cdk_stream_read with the difference that
the file pointer is moved to the old position after the bytes were read.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>inp</parameter>&nbsp;:</term>
<listitem><simpara> the input stream handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buflen</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keydb-new" role="function"/>cdk_keydb_new ()</title>
<indexterm><primary>cdk_keydb_new</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keydb_new                       (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> *r_hd,
                                                         <link linkend="int">int</link> type,
                                                         <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> count);</programlisting>
<para>
Create a new keydb object</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>r_hd</parameter>&nbsp;:</term>
<listitem><simpara> handle to store the new keydb object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> type of the keyring
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> data which depends on the keyring type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&nbsp;:</term>
<listitem><simpara> length of the data
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keydb-new-from-mem" role="function"/>cdk_keydb_new_from_mem ()</title>
<indexterm><primary>cdk_keydb_new_from_mem</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keydb_new_from_mem              (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> *r_hd,
                                                         <link linkend="int">int</link> secret,
                                                         const <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> datlen);</programlisting>
<para>
Create a new keyring db handle from the contents of a buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>r_hd</parameter>&nbsp;:</term>
<listitem><simpara> The keydb output handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>secret</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> The raw key data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>datlen</parameter>&nbsp;:</term>
<listitem><simpara> The length of the raw data.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keydb-new-from-file" role="function"/>cdk_keydb_new_from_file ()</title>
<indexterm><primary>cdk_keydb_new_from_file</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keydb_new_from_file             (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> *r_hd,
                                                         <link linkend="int">int</link> secret,
                                                         const <link linkend="char">char</link> *fname);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>r_hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>secret</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fname</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keydb-new-from-stream" role="function"/>cdk_keydb_new_from_stream ()</title>
<indexterm><primary>cdk_keydb_new_from_stream</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keydb_new_from_stream           (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> *r_hd,
                                                         <link linkend="int">int</link> secret,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> in);</programlisting>
<para>
This function creates a new keydb handle based on the given
stream. The stream is not closed in <link linkend="cdk-keydb-free"><function>cdk_keydb_free()</function></link> and it
is up to the caller to close it. No decoding is done.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>r_hd</parameter>&nbsp;:</term>
<listitem><simpara> the output keydb handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>secret</parameter>&nbsp;:</term>
<listitem><simpara> does the stream contain secret key data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara> the input stream to use
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keydb-check-sk" role="function"/>cdk_keydb_check_sk ()</title>
<indexterm><primary>cdk_keydb_check_sk</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keydb_check_sk                  (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd,
                                                         unsigned <link linkend="int">int</link> *keyid);</programlisting>
<para>
Check if a secret key with the given key ID is available
in the key database.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara> the key db handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&nbsp;:</term>
<listitem><simpara> the 64-bit keyid
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keydb-search-start" role="function"/>cdk_keydb_search_start ()</title>
<indexterm><primary>cdk_keydb_search_start</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keydb_search_start              (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd,
                                                         <link linkend="int">int</link> type,
                                                         <link linkend="void">void</link> *desc);</programlisting>
<para>
Create a new keydb search object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> specifies the search type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>desc</parameter>&nbsp;:</term>
<listitem><simpara> description which depends on the type
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keydb-search" role="function"/>cdk_keydb_search ()</title>
<indexterm><primary>cdk_keydb_search</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keydb_search                    (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd,
                                                         <link linkend="cdk-kbnode-t">cdk_kbnode_t</link> *ret_key);</programlisting>
<para>
Search for a key in the given keyring. The search mode is handled
via <parameter>ks</parameter>. If the key was found, <parameter>ret_key</parameter> contains the key data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara> the keydb object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_key</parameter>&nbsp;:</term>
<listitem><simpara> kbnode object to store the key
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keydb-free" role="function"/>cdk_keydb_free ()</title>
<indexterm><primary>cdk_keydb_free</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_keydb_free                      (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd);</programlisting>
<para>
Free the keydb object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara> the keydb object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keydb-get-bykeyid" role="function"/>cdk_keydb_get_bykeyid ()</title>
<indexterm><primary>cdk_keydb_get_bykeyid</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keydb_get_bykeyid               (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd,
                                                         unsigned <link linkend="int">int</link> *keyid,
                                                         <link linkend="cdk-kbnode-t">cdk_kbnode_t</link> *ret_pk);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_pk</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keydb-get-byfpr" role="function"/>cdk_keydb_get_byfpr ()</title>
<indexterm><primary>cdk_keydb_get_byfpr</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keydb_get_byfpr                 (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd,
                                                         unsigned <link linkend="char">char</link> *fpr,
                                                         <link linkend="cdk-kbnode-t">cdk_kbnode_t</link> *ret_pk);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fpr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_pk</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keydb-get-bypattern" role="function"/>cdk_keydb_get_bypattern ()</title>
<indexterm><primary>cdk_keydb_get_bypattern</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keydb_get_bypattern             (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd,
                                                         const <link linkend="char">char</link> *patt,
                                                         <link linkend="cdk-kbnode-t">cdk_kbnode_t</link> *ret_pk);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>patt</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_pk</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keydb-get-pk" role="function"/>cdk_keydb_get_pk ()</title>
<indexterm><primary>cdk_keydb_get_pk</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keydb_get_pk                    (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> khd,
                                                         unsigned <link linkend="int">int</link> *keyid,
                                                         <link linkend="cdk-pubkey-t">cdk_pubkey_t</link> *ret_pk);</programlisting>
<para>
Perform a key database search by keyid and return the raw public
key without any signatures or user id's.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>khd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&nbsp;:</term>
<listitem><simpara> keyid of the key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_pk</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keydb-get-sk" role="function"/>cdk_keydb_get_sk ()</title>
<indexterm><primary>cdk_keydb_get_sk</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keydb_get_sk                    (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> khd,
                                                         unsigned <link linkend="int">int</link> *keyid,
                                                         <link linkend="cdk-seckey-t">cdk_seckey_t</link> *ret_sk);</programlisting>
<para>
Perform a key database search by keyid and return
only the raw secret key without the additional nodes,
like the user id or the signatures.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>khd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&nbsp;:</term>
<listitem><simpara> the keyid of the key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_sk</parameter>&nbsp;:</term>
<listitem><simpara> the allocated secret key
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keydb-get-keyblock" role="function"/>cdk_keydb_get_keyblock ()</title>
<indexterm><primary>cdk_keydb_get_keyblock</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keydb_get_keyblock              (<link linkend="cdk-stream-t">cdk_stream_t</link> inp,
                                                         <link linkend="cdk-kbnode-t">cdk_kbnode_t</link> *ret_key);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>inp</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_key</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keydb-idx-rebuild" role="function"/>cdk_keydb_idx_rebuild ()</title>
<indexterm><primary>cdk_keydb_idx_rebuild</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keydb_idx_rebuild               (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd);</programlisting>
<para>
Rebuild the key index files for the given key database.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara> key database handle
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keydb-export" role="function"/>cdk_keydb_export ()</title>
<indexterm><primary>cdk_keydb_export</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keydb_export                    (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> out,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> remusr);</programlisting>
<para>
Export a list of keys to the given output stream.
Use string list with names for pattering searching.
This procedure strips local signatures.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara> the keydb handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara> the output stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>remusr</parameter>&nbsp;:</term>
<listitem><simpara> the list of key pattern to export
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keydb-import" role="function"/>cdk_keydb_import ()</title>
<indexterm><primary>cdk_keydb_import</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keydb_import                    (<link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd,
                                                         <link linkend="cdk-kbnode-t">cdk_kbnode_t</link> knode);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>knode</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-listkey-start" role="function"/>cdk_listkey_start ()</title>
<indexterm><primary>cdk_listkey_start</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_listkey_start                   (<link linkend="cdk-listkey-t">cdk_listkey_t</link> *r_ctx,
                                                         <link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> db,
                                                         const <link linkend="char">char</link> *patt,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> fpatt);</programlisting>
<para>
Prepare a key listing with the given parameters. Two modes are supported.
The first mode uses string pattern to determine if the key should be
returned or not. The other mode uses a string list to request the key
which should be listed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>r_ctx</parameter>&nbsp;:</term>
<listitem><simpara> pointer to store the new context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>db</parameter>&nbsp;:</term>
<listitem><simpara> the key database handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>patt</parameter>&nbsp;:</term>
<listitem><simpara> string pattern
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fpatt</parameter>&nbsp;:</term>
<listitem><simpara> recipients from a stringlist to show
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-listkey-close" role="function"/>cdk_listkey_close ()</title>
<indexterm><primary>cdk_listkey_close</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_listkey_close                   (<link linkend="cdk-listkey-t">cdk_listkey_t</link> ctx);</programlisting>
<para>
Free the list key context.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><simpara> the list key context
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-listkey-next" role="function"/>cdk_listkey_next ()</title>
<indexterm><primary>cdk_listkey_next</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_listkey_next                    (<link linkend="cdk-listkey-t">cdk_listkey_t</link> ctx,
                                                         <link linkend="cdk-kbnode-t">cdk_kbnode_t</link> *ret_key);</programlisting>
<para>
Retrieve the next key from the pattern of the key list context.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><simpara> list key context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_key</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-kbnode-new" role="function"/>cdk_kbnode_new ()</title>
<indexterm><primary>cdk_kbnode_new</primary></indexterm><programlisting><link linkend="cdk-kbnode-t">cdk_kbnode_t</link>        cdk_kbnode_new                      (<link linkend="cdk-packet-t">cdk_packet_t</link> pkt);</programlisting>
<para>
Allocate a new key node and add the packet.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pkt</parameter>&nbsp;:</term>
<listitem><simpara> the packet to add
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-kbnode-read-from-mem" role="function"/>cdk_kbnode_read_from_mem ()</title>
<indexterm><primary>cdk_kbnode_read_from_mem</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_kbnode_read_from_mem            (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> *ret_node,
                                                         unsigned <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> buflen);</programlisting>
<para>
Try to read a key node from the memory buffer <parameter>buf</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ret_node</parameter>&nbsp;:</term>
<listitem><simpara> the new key node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara> the buffer which stores the key sequence
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buflen</parameter>&nbsp;:</term>
<listitem><simpara> the length of the buffer
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-kbnode-write-to-mem" role="function"/>cdk_kbnode_write_to_mem ()</title>
<indexterm><primary>cdk_kbnode_write_to_mem</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_kbnode_write_to_mem             (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> node,
                                                         unsigned <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> *r_nbytes);</programlisting>
<para>
Try to write the contents of the key node to the buffer <parameter>buf</parameter> and
return the length of it in <parameter>r_nbytes</parameter>. If buf is zero, only the
length of the node is calculated and returned in <parameter>r_nbytes</parameter>.
Whenever it is possible, the cdk_kbnode_write_to_mem_alloc should be used.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the key node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara> the buffer to store the node data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_nbytes</parameter>&nbsp;:</term>
<listitem><simpara> the new length of the buffer.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-kbnode-write-to-mem-alloc" role="function"/>cdk_kbnode_write_to_mem_alloc ()</title>
<indexterm><primary>cdk_kbnode_write_to_mem_alloc</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_kbnode_write_to_mem_alloc       (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> node,
                                                         unsigned <link linkend="char">char</link> **r_buf,
                                                         <link linkend="size-t">size_t</link> *r_buflen);</programlisting>
<para>
The function acts similar to cdk_kbnode_write_to_mem but
it allocates the buffer to avoid the lengthy second run.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the key node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_buf</parameter>&nbsp;:</term>
<listitem><simpara> buffer to hold the raw data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_buflen</parameter>&nbsp;:</term>
<listitem><simpara> buffer length of the allocated raw data.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-kbnode-release" role="function"/>cdk_kbnode_release ()</title>
<indexterm><primary>cdk_kbnode_release</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_kbnode_release                  (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> node);</programlisting>
<para>
Release the memory of the node.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-kbnode-walk" role="function"/>cdk_kbnode_walk ()</title>
<indexterm><primary>cdk_kbnode_walk</primary></indexterm><programlisting><link linkend="cdk-kbnode-t">cdk_kbnode_t</link>        cdk_kbnode_walk                     (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> root,
                                                         <link linkend="cdk-kbnode-t">cdk_kbnode_t</link> *ctx,
                                                         <link linkend="int">int</link> all);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>root</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>all</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-kbnode-find-packet" role="function"/>cdk_kbnode_find_packet ()</title>
<indexterm><primary>cdk_kbnode_find_packet</primary></indexterm><programlisting><link linkend="cdk-packet-t">cdk_packet_t</link>        cdk_kbnode_find_packet              (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> node,
                                                         <link linkend="int">int</link> pkttype);</programlisting>
<para>
Same as cdk_kbnode_find but it returns the packet instead of the node.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the key node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkttype</parameter>&nbsp;:</term>
<listitem><simpara> packet type
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-kbnode-get-packet" role="function"/>cdk_kbnode_get_packet ()</title>
<indexterm><primary>cdk_kbnode_get_packet</primary></indexterm><programlisting><link linkend="cdk-packet-t">cdk_packet_t</link>        cdk_kbnode_get_packet               (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> node);</programlisting>
<para>
Return the packet which is stored inside the node in <parameter>node</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the key node
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-kbnode-find" role="function"/>cdk_kbnode_find ()</title>
<indexterm><primary>cdk_kbnode_find</primary></indexterm><programlisting><link linkend="cdk-kbnode-t">cdk_kbnode_t</link>        cdk_kbnode_find                     (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> node,
                                                         <link linkend="int">int</link> pkttype);</programlisting>
<para>
Try to find the next node with the packettype <parameter>pkttype</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the key node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkttype</parameter>&nbsp;:</term>
<listitem><simpara> packet type
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-kbnode-find-prev" role="function"/>cdk_kbnode_find_prev ()</title>
<indexterm><primary>cdk_kbnode_find_prev</primary></indexterm><programlisting><link linkend="cdk-kbnode-t">cdk_kbnode_t</link>        cdk_kbnode_find_prev                (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> root,
                                                         <link linkend="cdk-kbnode-t">cdk_kbnode_t</link> node,
                                                         <link linkend="int">int</link> pkttype);</programlisting>
<para>
Find the previous node (if <parameter>pkttype</parameter> = 0) or the previous node
with pkttype <parameter>pkttype</parameter> in the list starting with <parameter>root</parameter> of <parameter>node</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>root</parameter>&nbsp;:</term>
<listitem><simpara> the root key node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the key node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkttype</parameter>&nbsp;:</term>
<listitem><simpara> packet type
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-kbnode-find-next" role="function"/>cdk_kbnode_find_next ()</title>
<indexterm><primary>cdk_kbnode_find_next</primary></indexterm><programlisting><link linkend="cdk-kbnode-t">cdk_kbnode_t</link>        cdk_kbnode_find_next                (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> node,
                                                         <link linkend="int">int</link> pkttype);</programlisting>
<para>
Ditto, but find the next packet.  The behaviour is trivial if
<parameter>pkttype</parameter> is 0 but if it is specified, the next node with a packet
of this type is returned.  The function has some knowledge about
the valid ordering of packets: e.g. if the next signature packet
is requested, the function will not return one if it encounters
a user-id.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the key node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkttype</parameter>&nbsp;:</term>
<listitem><simpara> packet type
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-kbnode-hash" role="function"/>cdk_kbnode_hash ()</title>
<indexterm><primary>cdk_kbnode_hash</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_kbnode_hash                     (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> node,
                                                         <link linkend="gcry-md-hd-t">gcry_md_hd_t</link> md,
                                                         <link linkend="int">int</link> is_v4,
                                                         <link linkend="int">int</link> pkttype,
                                                         <link linkend="int">int</link> flags);</programlisting>
<para>
Hash the key node contents. Two modes are supported. If the packet
type is used (!= 0) then the function searches the first node with
this type. Otherwise the node is seen as a single node and the type
is extracted from it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> the key node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>md</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>is_v4</parameter>&nbsp;:</term>
<listitem><simpara> OpenPGP signature (yes=1, no=0)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkttype</parameter>&nbsp;:</term>
<listitem><simpara> packet type to hash (if zero use the packet type from the node)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&nbsp;:</term>
<listitem><simpara> flags which depend on the operation
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pk-check-sigs" role="function"/>cdk_pk_check_sigs ()</title>
<indexterm><primary>cdk_pk_check_sigs</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_pk_check_sigs                   (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> knode,
                                                         <link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd,
                                                         <link linkend="int">int</link> *r_status);</programlisting>
<para>
Check all signatures. When no key is available for checking, the
sigstat is marked as 'NOKEY'. The <parameter>r_status</parameter> contains the key flags
which are or-ed or zero when there are no flags.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>knode</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara> an optinal key database handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_status</parameter>&nbsp;:</term>
<listitem><simpara> variable to store the status of the key
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pk-check-self-sig" role="function"/>cdk_pk_check_self_sig ()</title>
<indexterm><primary>cdk_pk_check_self_sig</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_pk_check_self_sig               (<link linkend="cdk-kbnode-t">cdk_kbnode_t</link> knode,
                                                         <link linkend="int">int</link> *r_status);</programlisting>
<para>
A convenient function to make sure the key is valid.
Valid means the self signature is ok.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>knode</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_status</parameter>&nbsp;:</term>
<listitem><simpara> output the status of the key.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pklist-select-algo" role="function"/>cdk_pklist_select_algo ()</title>
<indexterm><primary>cdk_pklist_select_algo</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_pklist_select_algo              (<link linkend="cdk-keylist-t">cdk_keylist_t</link> pkl,
                                                         <link linkend="int">int</link> preftype);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pkl</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>preftype</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pklist-use-mdc" role="function"/>cdk_pklist_use_mdc ()</title>
<indexterm><primary>cdk_pklist_use_mdc</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_pklist_use_mdc                  (<link linkend="cdk-keylist-t">cdk_keylist_t</link> pkl);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pkl</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pklist-build" role="function"/>cdk_pklist_build ()</title>
<indexterm><primary>cdk_pklist_build</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_pklist_build                    (<link linkend="cdk-keylist-t">cdk_keylist_t</link> *ret_pkl,
                                                         <link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> hd,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> remusr,
                                                         <link linkend="int">int</link> use);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ret_pkl</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>remusr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>use</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pklist-release" role="function"/>cdk_pklist_release ()</title>
<indexterm><primary>cdk_pklist_release</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_pklist_release                  (<link linkend="cdk-keylist-t">cdk_keylist_t</link> pkl);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pkl</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-pklist-encrypt" role="function"/>cdk_pklist_encrypt ()</title>
<indexterm><primary>cdk_pklist_encrypt</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_pklist_encrypt                  (<link linkend="cdk-keylist-t">cdk_keylist_t</link> pkl,
                                                         <link linkend="cdk-dek-t">cdk_dek_t</link> dek,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> out);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pkl</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dek</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-sklist-build" role="function"/>cdk_sklist_build ()</title>
<indexterm><primary>cdk_sklist_build</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_sklist_build                    (<link linkend="cdk-keylist-t">cdk_keylist_t</link> *ret_skl,
                                                         <link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link> db,
                                                         <link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> locusr,
                                                         <link linkend="int">int</link> unlock,
                                                         unsigned <link linkend="int">int</link> use);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ret_skl</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>db</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>locusr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>unlock</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>use</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-sklist-release" role="function"/>cdk_sklist_release ()</title>
<indexterm><primary>cdk_sklist_release</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_sklist_release                  (<link linkend="cdk-keylist-t">cdk_keylist_t</link> skl);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>skl</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-sklist-write" role="function"/>cdk_sklist_write ()</title>
<indexterm><primary>cdk_sklist_write</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_sklist_write                    (<link linkend="cdk-keylist-t">cdk_keylist_t</link> skl,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> outp,
                                                         <link linkend="gcry-md-hd-t">gcry_md_hd_t</link> mdctx,
                                                         <link linkend="int">int</link> sigclass,
                                                         <link linkend="int">int</link> sigver);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>skl</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>outp</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mdctx</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sigclass</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sigver</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-sklist-write-onepass" role="function"/>cdk_sklist_write_onepass ()</title>
<indexterm><primary>cdk_sklist_write_onepass</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_sklist_write_onepass            (<link linkend="cdk-keylist-t">cdk_keylist_t</link> skl,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> outp,
                                                         <link linkend="int">int</link> sigclass,
                                                         <link linkend="int">int</link> mdalgo);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>skl</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>outp</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sigclass</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mdalgo</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-encrypt" role="function"/>cdk_stream_encrypt ()</title>
<indexterm><primary>cdk_stream_encrypt</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_encrypt                  (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> remusr,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> inp,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> out);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>remusr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inp</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-decrypt" role="function"/>cdk_stream_decrypt ()</title>
<indexterm><primary>cdk_stream_decrypt</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_decrypt                  (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> inp,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> out);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inp</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-file-encrypt" role="function"/>cdk_file_encrypt ()</title>
<indexterm><primary>cdk_file_encrypt</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_file_encrypt                    (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> remusr,
                                                         const <link linkend="char">char</link> *file,
                                                         const <link linkend="char">char</link> *output);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>remusr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>file</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-file-decrypt" role="function"/>cdk_file_decrypt ()</title>
<indexterm><primary>cdk_file_decrypt</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_file_decrypt                    (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         const <link linkend="char">char</link> *file,
                                                         const <link linkend="char">char</link> *output);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>file</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-data-transform" role="function"/>cdk_data_transform ()</title>
<indexterm><primary>cdk_data_transform</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_data_transform                  (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="enum-cdk-crypto-mode-t">enum cdk_crypto_mode_t</link> mode,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> locusr,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> remusr,
                                                         const <link linkend="void">void</link> *inbuf,
                                                         <link linkend="size-t">size_t</link> insize,
                                                         unsigned <link linkend="char">char</link> **outbuf,
                                                         <link linkend="size-t">size_t</link> *outsize,
                                                         <link linkend="int">int</link> modval);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>locusr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>remusr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inbuf</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>insize</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>outbuf</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>outsize</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>modval</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-sign" role="function"/>cdk_stream_sign ()</title>
<indexterm><primary>cdk_stream_sign</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_sign                     (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> inp,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> out,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> locusr,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> remusr,
                                                         <link linkend="int">int</link> encryptflag,
                                                         <link linkend="int">int</link> sigmode);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inp</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>locusr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>remusr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>encryptflag</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sigmode</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-file-sign" role="function"/>cdk_file_sign ()</title>
<indexterm><primary>cdk_file_sign</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_file_sign                       (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> locusr,
                                                         <link linkend="cdk-strlist-t">cdk_strlist_t</link> remusr,
                                                         const <link linkend="char">char</link> *file,
                                                         const <link linkend="char">char</link> *output,
                                                         <link linkend="int">int</link> sigmode,
                                                         <link linkend="int">int</link> encryptflag);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>locusr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>remusr</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>file</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sigmode</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>encryptflag</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-stream-verify" role="function"/>cdk_stream_verify ()</title>
<indexterm><primary>cdk_stream_verify</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_stream_verify                   (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> inp,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> data,
                                                         <link linkend="cdk-stream-t">cdk_stream_t</link> out);</programlisting>
<para>
</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara> session handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inp</parameter>&nbsp;:</term>
<listitem><simpara> the input stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> for detached signatures, this is the data stream <parameter>inp</parameter> is the sig
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara> where the output shall be written.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-file-verify" role="function"/>cdk_file_verify ()</title>
<indexterm><primary>cdk_file_verify</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_file_verify                     (<link linkend="cdk-ctx-t">cdk_ctx_t</link> hd,
                                                         const <link linkend="char">char</link> *file,
                                                         const <link linkend="char">char</link> *data_file,
                                                         const <link linkend="char">char</link> *output);</programlisting>
<para>
Verify a signature.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara> the session handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>file</parameter>&nbsp;:</term>
<listitem><simpara> the input file
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data_file</parameter>&nbsp;:</term>
<listitem><simpara> for detached signature this is the data file and <parameter>file</parameter> is the sig.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara> the output file
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-trustdb-get-validity" role="function"/>cdk_trustdb_get_validity ()</title>
<indexterm><primary>cdk_trustdb_get_validity</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_trustdb_get_validity            (<link linkend="cdk-stream-t">cdk_stream_t</link> inp,
                                                         <link linkend="cdk-pkt-userid-t">cdk_pkt_userid_t</link> id,
                                                         <link linkend="int">int</link> *r_val);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>inp</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_val</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-trustdb-get-ownertrust" role="function"/>cdk_trustdb_get_ownertrust ()</title>
<indexterm><primary>cdk_trustdb_get_ownertrust</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_trustdb_get_ownertrust          (<link linkend="cdk-stream-t">cdk_stream_t</link> inp,
                                                         <link linkend="cdk-pubkey-t">cdk_pubkey_t</link> pk,
                                                         <link linkend="int">int</link> *r_val,
                                                         <link linkend="int">int</link> *r_flags);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>inp</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pk</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_val</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_flags</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-strlist-free" role="function"/>cdk_strlist_free ()</title>
<indexterm><primary>cdk_strlist_free</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_strlist_free                    (<link linkend="cdk-strlist-t">cdk_strlist_t</link> sl);</programlisting>
<para>
Release the string list object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>sl</parameter>&nbsp;:</term>
<listitem><simpara> the string list
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-strlist-add" role="function"/>cdk_strlist_add ()</title>
<indexterm><primary>cdk_strlist_add</primary></indexterm><programlisting><link linkend="cdk-strlist-t">cdk_strlist_t</link>       cdk_strlist_add                     (<link linkend="cdk-strlist-t">cdk_strlist_t</link> *list,
                                                         const <link linkend="char">char</link> *string);</programlisting>
<para>
Add the given list to the string list.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> destination string list
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>string</parameter>&nbsp;:</term>
<listitem><simpara> the string to add
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-strlist-next" role="function"/>cdk_strlist_next ()</title>
<indexterm><primary>cdk_strlist_next</primary></indexterm><programlisting><link linkend="cdk-strlist-t">cdk_strlist_t</link>       cdk_strlist_next                    (<link linkend="cdk-strlist-t">cdk_strlist_t</link> root,
                                                         const <link linkend="char">char</link> **r_str);</programlisting>
<para>
Return the next string list node from <parameter>root</parameter>. The optional
argument <parameter>r_str</parameter> return the data of the current (!) node.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>root</parameter>&nbsp;:</term>
<listitem><simpara> the opaque string list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_str</parameter>&nbsp;:</term>
<listitem><simpara> optional argument to store the string data.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-check-version" role="function"/>cdk_check_version ()</title>
<indexterm><primary>cdk_check_version</primary></indexterm><programlisting>const <link linkend="char">char</link>*         cdk_check_version                   (const <link linkend="char">char</link> *req_version);</programlisting>
<para>
Check that the the version of the library is at minimum the requested
one and return the version string; return NULL if the condition is
not satisfied.  If a NULL is passed to this function, no check is done,
but the version string is simply returned.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>req_version</parameter>&nbsp;:</term>
<listitem><simpara> The requested version
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-utf8-encode" role="function"/>cdk_utf8_encode ()</title>
<indexterm><primary>cdk_utf8_encode</primary></indexterm><programlisting><link linkend="char">char</link>*               cdk_utf8_encode                     (const <link linkend="char">char</link> *string);</programlisting>
<para>
Encode the given string in utf8 and return it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>string</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-utf8-decode" role="function"/>cdk_utf8_decode ()</title>
<indexterm><primary>cdk_utf8_decode</primary></indexterm><programlisting><link linkend="char">char</link>*               cdk_utf8_decode                     (const <link linkend="char">char</link> *string,
                                                         <link linkend="size-t">size_t</link> length,
                                                         <link linkend="int">int</link> delim);</programlisting>
<para>
Decode the given utf8 string and return the native representation.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>string</parameter>&nbsp;:</term>
<listitem><simpara> the string to decode
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&nbsp;:</term>
<listitem><simpara> the length of the string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>delim</parameter>&nbsp;:</term>
<listitem><simpara> the delimiter
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keyserver-recv-key" role="function"/>cdk_keyserver_recv_key ()</title>
<indexterm><primary>cdk_keyserver_recv_key</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keyserver_recv_key              (const <link linkend="char">char</link> *host,
                                                         <link linkend="int">int</link> port,
                                                         unsigned <link linkend="char">char</link> *keyid,
                                                         <link linkend="int">int</link> kid_type,
                                                         <link linkend="cdk-kbnode-t">cdk_kbnode_t</link> *r_key);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>host</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>port</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>kid_type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_key</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keygen-new" role="function"/>cdk_keygen_new ()</title>
<indexterm><primary>cdk_keygen_new</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keygen_new                      (<link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link> *r_hd);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>r_hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keygen-free" role="function"/>cdk_keygen_free ()</title>
<indexterm><primary>cdk_keygen_free</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_keygen_free                     (<link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link> hd);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keygen-set-prefs" role="function"/>cdk_keygen_set_prefs ()</title>
<indexterm><primary>cdk_keygen_set_prefs</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keygen_set_prefs                (<link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link> hd,
                                                         <link linkend="enum-cdk-pref-type-t">enum cdk_pref_type_t</link> type,
                                                         unsigned <link linkend="char">char</link> *array,
                                                         <link linkend="size-t">size_t</link> n);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>array</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keygen-set-algo-info" role="function"/>cdk_keygen_set_algo_info ()</title>
<indexterm><primary>cdk_keygen_set_algo_info</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keygen_set_algo_info            (<link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link> hd,
                                                         <link linkend="int">int</link> type,
                                                         <link linkend="int">int</link> usage,
                                                         <link linkend="enum-cdk-pubkey-algo-t">enum cdk_pubkey_algo_t</link> algo,
                                                         unsigned <link linkend="int">int</link> bits);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>usage</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>algo</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keygen-set-keyserver-flags" role="function"/>cdk_keygen_set_keyserver_flags ()</title>
<indexterm><primary>cdk_keygen_set_keyserver_flags</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_keygen_set_keyserver_flags      (<link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link> hd,
                                                         <link linkend="int">int</link> no_modify,
                                                         const <link linkend="char">char</link> *pref_url);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>no_modify</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pref_url</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keygen-set-expire-date" role="function"/>cdk_keygen_set_expire_date ()</title>
<indexterm><primary>cdk_keygen_set_expire_date</primary></indexterm><programlisting><link linkend="int">int</link>                 cdk_keygen_set_expire_date          (<link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link> hd,
                                                         <link linkend="int">int</link> type,
                                                         long <link linkend="timestamp">timestamp</link> );</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param3</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keygen-set-name" role="function"/>cdk_keygen_set_name ()</title>
<indexterm><primary>cdk_keygen_set_name</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_keygen_set_name                 (<link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link> hd,
                                                         const <link linkend="char">char</link> *name);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keygen-set-passphrase" role="function"/>cdk_keygen_set_passphrase ()</title>
<indexterm><primary>cdk_keygen_set_passphrase</primary></indexterm><programlisting><link linkend="void">void</link>                cdk_keygen_set_passphrase           (<link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link> hd,
                                                         const <link linkend="char">char</link> *pass);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pass</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keygen-start" role="function"/>cdk_keygen_start ()</title>
<indexterm><primary>cdk_keygen_start</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keygen_start                    (<link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link> hd);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cdk-keygen-save" role="function"/>cdk_keygen_save ()</title>
<indexterm><primary>cdk_keygen_save</primary></indexterm><programlisting><link linkend="cdk-error-t">cdk_error_t</link>         cdk_keygen_save                     (<link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link> hd,
                                                         const <link linkend="char">char</link> *pubf,
                                                         const <link linkend="char">char</link> *secf);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pubf</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>secf</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>





<refsect1><refsect2 /><refsect2 /></refsect1>
</refentry>
